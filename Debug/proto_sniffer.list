
proto_sniffer.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002358  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000020c  080024e8  080024e8  000124e8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080026f4  080026f4  000200fc  2**0
                  CONTENTS
  4 .ARM          00000000  080026f4  080026f4  000200fc  2**0
                  CONTENTS
  5 .preinit_array 00000000  080026f4  080026f4  000200fc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080026f4  080026f4  000126f4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080026f8  080026f8  000126f8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000fc  20000000  080026fc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  000200fc  2**0
                  CONTENTS
 10 .bss          000003cc  200000fc  200000fc  000200fc  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  200004c8  200004c8  000200fc  2**0
                  ALLOC
 12 .ARM.attributes 0000002a  00000000  00000000  000200fc  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  00020126  2**0
                  CONTENTS, READONLY
 14 .debug_info   0000322c  00000000  00000000  00020169  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 000012d3  00000000  00000000  00023395  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 000003b0  00000000  00000000  00024668  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 00000279  00000000  00000000  00024a18  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  00003a42  00000000  00000000  00024c91  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   000065f5  00000000  00000000  000286d3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    0000ae57  00000000  00000000  0002ecc8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  00001374  00000000  00000000  00039b20  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000066  00000000  00000000  0003ae94  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200000fc 	.word	0x200000fc
 80001ac:	00000000 	.word	0x00000000
 80001b0:	080024d0 	.word	0x080024d0

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000100 	.word	0x20000100
 80001cc:	080024d0 	.word	0x080024d0

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <cb_init>:
circular_buffer_i2c_gyro circ_buffer_i2c_gyro;


/* Circular Buffer To Handle SPI loop back Data */
void cb_init(circular_buffer* pCB)
{
 8000270:	b480      	push	{r7}
 8000272:	b083      	sub	sp, #12
 8000274:	af00      	add	r7, sp, #0
 8000276:	6078      	str	r0, [r7, #4]
	pCB->head = 0;
 8000278:	687b      	ldr	r3, [r7, #4]
 800027a:	2200      	movs	r2, #0
 800027c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
	pCB->tail = 0;
 8000280:	687b      	ldr	r3, [r7, #4]
 8000282:	2200      	movs	r2, #0
 8000284:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
}
 8000288:	bf00      	nop
 800028a:	370c      	adds	r7, #12
 800028c:	46bd      	mov	sp, r7
 800028e:	bc80      	pop	{r7}
 8000290:	4770      	bx	lr

08000292 <cb_push>:

bool cb_push(circular_buffer* pCB,uint8_t data_write)
{
 8000292:	b480      	push	{r7}
 8000294:	b083      	sub	sp, #12
 8000296:	af00      	add	r7, sp, #0
 8000298:	6078      	str	r0, [r7, #4]
 800029a:	460b      	mov	r3, r1
 800029c:	70fb      	strb	r3, [r7, #3]
	if(!((pCB->head +1) % BUFFER_SIZE == pCB->tail))
 800029e:	687b      	ldr	r3, [r7, #4]
 80002a0:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80002a4:	b2db      	uxtb	r3, r3
 80002a6:	3301      	adds	r3, #1
 80002a8:	425a      	negs	r2, r3
 80002aa:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80002ae:	f002 023f 	and.w	r2, r2, #63	; 0x3f
 80002b2:	bf58      	it	pl
 80002b4:	4253      	negpl	r3, r2
 80002b6:	687a      	ldr	r2, [r7, #4]
 80002b8:	f892 2041 	ldrb.w	r2, [r2, #65]	; 0x41
 80002bc:	b2d2      	uxtb	r2, r2
 80002be:	4293      	cmp	r3, r2
 80002c0:	d019      	beq.n	80002f6 <cb_push+0x64>
	{
		pCB->buffer[pCB->head] = data_write;
 80002c2:	687b      	ldr	r3, [r7, #4]
 80002c4:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80002c8:	b2db      	uxtb	r3, r3
 80002ca:	4619      	mov	r1, r3
 80002cc:	687b      	ldr	r3, [r7, #4]
 80002ce:	78fa      	ldrb	r2, [r7, #3]
 80002d0:	545a      	strb	r2, [r3, r1]
		pCB->head = (pCB->head + 1) % BUFFER_SIZE;
 80002d2:	687b      	ldr	r3, [r7, #4]
 80002d4:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80002d8:	b2db      	uxtb	r3, r3
 80002da:	3301      	adds	r3, #1
 80002dc:	425a      	negs	r2, r3
 80002de:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80002e2:	f002 023f 	and.w	r2, r2, #63	; 0x3f
 80002e6:	bf58      	it	pl
 80002e8:	4253      	negpl	r3, r2
 80002ea:	b2da      	uxtb	r2, r3
 80002ec:	687b      	ldr	r3, [r7, #4]
 80002ee:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
		return true;
 80002f2:	2301      	movs	r3, #1
 80002f4:	e000      	b.n	80002f8 <cb_push+0x66>
	}
	return false;
 80002f6:	2300      	movs	r3, #0
}
 80002f8:	4618      	mov	r0, r3
 80002fa:	370c      	adds	r7, #12
 80002fc:	46bd      	mov	sp, r7
 80002fe:	bc80      	pop	{r7}
 8000300:	4770      	bx	lr

08000302 <cb_pop>:

void cb_pop(circular_buffer* pCB,uint8_t* data_read)
{
 8000302:	b480      	push	{r7}
 8000304:	b083      	sub	sp, #12
 8000306:	af00      	add	r7, sp, #0
 8000308:	6078      	str	r0, [r7, #4]
 800030a:	6039      	str	r1, [r7, #0]
	if(pCB->head != pCB->tail)
 800030c:	687b      	ldr	r3, [r7, #4]
 800030e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8000312:	b2da      	uxtb	r2, r3
 8000314:	687b      	ldr	r3, [r7, #4]
 8000316:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800031a:	b2db      	uxtb	r3, r3
 800031c:	429a      	cmp	r2, r3
 800031e:	d018      	beq.n	8000352 <cb_pop+0x50>
	{
		*data_read = pCB->buffer[pCB->tail];
 8000320:	687b      	ldr	r3, [r7, #4]
 8000322:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8000326:	b2db      	uxtb	r3, r3
 8000328:	461a      	mov	r2, r3
 800032a:	687b      	ldr	r3, [r7, #4]
 800032c:	5c9a      	ldrb	r2, [r3, r2]
 800032e:	683b      	ldr	r3, [r7, #0]
 8000330:	701a      	strb	r2, [r3, #0]
		pCB->tail = (pCB->tail + 1) % BUFFER_SIZE;
 8000332:	687b      	ldr	r3, [r7, #4]
 8000334:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8000338:	b2db      	uxtb	r3, r3
 800033a:	3301      	adds	r3, #1
 800033c:	425a      	negs	r2, r3
 800033e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8000342:	f002 023f 	and.w	r2, r2, #63	; 0x3f
 8000346:	bf58      	it	pl
 8000348:	4253      	negpl	r3, r2
 800034a:	b2da      	uxtb	r2, r3
 800034c:	687b      	ldr	r3, [r7, #4]
 800034e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
	}
}
 8000352:	bf00      	nop
 8000354:	370c      	adds	r7, #12
 8000356:	46bd      	mov	sp, r7
 8000358:	bc80      	pop	{r7}
 800035a:	4770      	bx	lr

0800035c <cb_push_gyro>:
	pCBgyro->head = 0;
	pCBgyro->tail = 0;
}

void cb_push_gyro(uint16_t accel_x, uint16_t accel_y, uint16_t accel_z)
{
 800035c:	b480      	push	{r7}
 800035e:	b083      	sub	sp, #12
 8000360:	af00      	add	r7, sp, #0
 8000362:	4603      	mov	r3, r0
 8000364:	80fb      	strh	r3, [r7, #6]
 8000366:	460b      	mov	r3, r1
 8000368:	80bb      	strh	r3, [r7, #4]
 800036a:	4613      	mov	r3, r2
 800036c:	807b      	strh	r3, [r7, #2]
	if(!(((circ_buffer_i2c_gyro.head + 1)% BUFFER_SIZE) == circ_buffer_i2c_gyro.tail))
 800036e:	4b1d      	ldr	r3, [pc, #116]	; (80003e4 <cb_push_gyro+0x88>)
 8000370:	781b      	ldrb	r3, [r3, #0]
 8000372:	b2db      	uxtb	r3, r3
 8000374:	3301      	adds	r3, #1
 8000376:	425a      	negs	r2, r3
 8000378:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800037c:	f002 023f 	and.w	r2, r2, #63	; 0x3f
 8000380:	bf58      	it	pl
 8000382:	4253      	negpl	r3, r2
 8000384:	4a17      	ldr	r2, [pc, #92]	; (80003e4 <cb_push_gyro+0x88>)
 8000386:	7852      	ldrb	r2, [r2, #1]
 8000388:	b2d2      	uxtb	r2, r2
 800038a:	4293      	cmp	r3, r2
 800038c:	d025      	beq.n	80003da <cb_push_gyro+0x7e>
	{
	  gyro_buffer[circ_buffer_i2c_gyro.head].accel_x = accel_x;
 800038e:	4b15      	ldr	r3, [pc, #84]	; (80003e4 <cb_push_gyro+0x88>)
 8000390:	781b      	ldrb	r3, [r3, #0]
 8000392:	b2db      	uxtb	r3, r3
 8000394:	4a14      	ldr	r2, [pc, #80]	; (80003e8 <cb_push_gyro+0x8c>)
 8000396:	00db      	lsls	r3, r3, #3
 8000398:	4413      	add	r3, r2
 800039a:	88fa      	ldrh	r2, [r7, #6]
 800039c:	805a      	strh	r2, [r3, #2]
	  gyro_buffer[circ_buffer_i2c_gyro.head].accel_y = accel_y;
 800039e:	4b11      	ldr	r3, [pc, #68]	; (80003e4 <cb_push_gyro+0x88>)
 80003a0:	781b      	ldrb	r3, [r3, #0]
 80003a2:	b2db      	uxtb	r3, r3
 80003a4:	4a10      	ldr	r2, [pc, #64]	; (80003e8 <cb_push_gyro+0x8c>)
 80003a6:	00db      	lsls	r3, r3, #3
 80003a8:	4413      	add	r3, r2
 80003aa:	88ba      	ldrh	r2, [r7, #4]
 80003ac:	809a      	strh	r2, [r3, #4]
	  gyro_buffer[circ_buffer_i2c_gyro.head].accel_z = accel_z;
 80003ae:	4b0d      	ldr	r3, [pc, #52]	; (80003e4 <cb_push_gyro+0x88>)
 80003b0:	781b      	ldrb	r3, [r3, #0]
 80003b2:	b2db      	uxtb	r3, r3
 80003b4:	4a0c      	ldr	r2, [pc, #48]	; (80003e8 <cb_push_gyro+0x8c>)
 80003b6:	00db      	lsls	r3, r3, #3
 80003b8:	4413      	add	r3, r2
 80003ba:	887a      	ldrh	r2, [r7, #2]
 80003bc:	80da      	strh	r2, [r3, #6]

	  circ_buffer_i2c_gyro.head = (circ_buffer_i2c_gyro.head + 1) % BUFFER_SIZE;
 80003be:	4b09      	ldr	r3, [pc, #36]	; (80003e4 <cb_push_gyro+0x88>)
 80003c0:	781b      	ldrb	r3, [r3, #0]
 80003c2:	b2db      	uxtb	r3, r3
 80003c4:	3301      	adds	r3, #1
 80003c6:	425a      	negs	r2, r3
 80003c8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80003cc:	f002 023f 	and.w	r2, r2, #63	; 0x3f
 80003d0:	bf58      	it	pl
 80003d2:	4253      	negpl	r3, r2
 80003d4:	b2da      	uxtb	r2, r3
 80003d6:	4b03      	ldr	r3, [pc, #12]	; (80003e4 <cb_push_gyro+0x88>)
 80003d8:	701a      	strb	r2, [r3, #0]
	}
}
 80003da:	bf00      	nop
 80003dc:	370c      	adds	r7, #12
 80003de:	46bd      	mov	sp, r7
 80003e0:	bc80      	pop	{r7}
 80003e2:	4770      	bx	lr
 80003e4:	2000035c 	.word	0x2000035c
 80003e8:	2000015c 	.word	0x2000015c

080003ec <cb_pop_gyro>:
void cb_pop_gyro(circular_buffer_i2c_gyro *data)
{
 80003ec:	b480      	push	{r7}
 80003ee:	b083      	sub	sp, #12
 80003f0:	af00      	add	r7, sp, #0
 80003f2:	6078      	str	r0, [r7, #4]

	if(circ_buffer_i2c_gyro.head != circ_buffer_i2c_gyro.tail)
 80003f4:	4b12      	ldr	r3, [pc, #72]	; (8000440 <cb_pop_gyro+0x54>)
 80003f6:	781b      	ldrb	r3, [r3, #0]
 80003f8:	b2da      	uxtb	r2, r3
 80003fa:	4b11      	ldr	r3, [pc, #68]	; (8000440 <cb_pop_gyro+0x54>)
 80003fc:	785b      	ldrb	r3, [r3, #1]
 80003fe:	b2db      	uxtb	r3, r3
 8000400:	429a      	cmp	r2, r3
 8000402:	d017      	beq.n	8000434 <cb_pop_gyro+0x48>
	{
	    *data = gyro_buffer[circ_buffer_i2c_gyro.tail];
 8000404:	4b0e      	ldr	r3, [pc, #56]	; (8000440 <cb_pop_gyro+0x54>)
 8000406:	785b      	ldrb	r3, [r3, #1]
 8000408:	b2db      	uxtb	r3, r3
 800040a:	687a      	ldr	r2, [r7, #4]
 800040c:	490d      	ldr	r1, [pc, #52]	; (8000444 <cb_pop_gyro+0x58>)
 800040e:	00db      	lsls	r3, r3, #3
 8000410:	440b      	add	r3, r1
 8000412:	cb03      	ldmia	r3!, {r0, r1}
 8000414:	6010      	str	r0, [r2, #0]
 8000416:	6051      	str	r1, [r2, #4]
	     circ_buffer_i2c_gyro.tail = (circ_buffer_i2c_gyro.tail + 1) % BUFFER_SIZE;
 8000418:	4b09      	ldr	r3, [pc, #36]	; (8000440 <cb_pop_gyro+0x54>)
 800041a:	785b      	ldrb	r3, [r3, #1]
 800041c:	b2db      	uxtb	r3, r3
 800041e:	3301      	adds	r3, #1
 8000420:	425a      	negs	r2, r3
 8000422:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8000426:	f002 023f 	and.w	r2, r2, #63	; 0x3f
 800042a:	bf58      	it	pl
 800042c:	4253      	negpl	r3, r2
 800042e:	b2da      	uxtb	r2, r3
 8000430:	4b03      	ldr	r3, [pc, #12]	; (8000440 <cb_pop_gyro+0x54>)
 8000432:	705a      	strb	r2, [r3, #1]
	}
}
 8000434:	bf00      	nop
 8000436:	370c      	adds	r7, #12
 8000438:	46bd      	mov	sp, r7
 800043a:	bc80      	pop	{r7}
 800043c:	4770      	bx	lr
 800043e:	bf00      	nop
 8000440:	2000035c 	.word	0x2000035c
 8000444:	2000015c 	.word	0x2000015c

08000448 <i2c_gyro_sensor_read>:

circular_buffer_i2c_gyro gyro_struct_data;

/*API to call i2c_master_read_data with different register addresses for reading liner acceleration */
void i2c_gyro_sensor_read(void)
{
 8000448:	b580      	push	{r7, lr}
 800044a:	b084      	sub	sp, #16
 800044c:	af00      	add	r7, sp, #0
	        uint8_t accel_XOUT_H = i2c_master_read_data(0x68, 0x3B);
 800044e:	213b      	movs	r1, #59	; 0x3b
 8000450:	2068      	movs	r0, #104	; 0x68
 8000452:	f000 f96c 	bl	800072e <i2c_master_read_data>
 8000456:	4603      	mov	r3, r0
 8000458:	73fb      	strb	r3, [r7, #15]
	        uint8_t accel_XOUT_L = i2c_master_read_data(0x68, 0x3C);
 800045a:	213c      	movs	r1, #60	; 0x3c
 800045c:	2068      	movs	r0, #104	; 0x68
 800045e:	f000 f966 	bl	800072e <i2c_master_read_data>
 8000462:	4603      	mov	r3, r0
 8000464:	73bb      	strb	r3, [r7, #14]
	        uint16_t accel_XOUT  = (int16_t)((accel_XOUT_H<<8) | accel_XOUT_L);
 8000466:	7bfb      	ldrb	r3, [r7, #15]
 8000468:	021b      	lsls	r3, r3, #8
 800046a:	b21a      	sxth	r2, r3
 800046c:	7bbb      	ldrb	r3, [r7, #14]
 800046e:	b21b      	sxth	r3, r3
 8000470:	4313      	orrs	r3, r2
 8000472:	b21b      	sxth	r3, r3
 8000474:	81bb      	strh	r3, [r7, #12]

	        uint8_t accel_YOUT_H = i2c_master_read_data(0x68, 0x3D);
 8000476:	213d      	movs	r1, #61	; 0x3d
 8000478:	2068      	movs	r0, #104	; 0x68
 800047a:	f000 f958 	bl	800072e <i2c_master_read_data>
 800047e:	4603      	mov	r3, r0
 8000480:	72fb      	strb	r3, [r7, #11]
	        uint8_t accel_YOUT_L = i2c_master_read_data(0x68, 0x3E);
 8000482:	213e      	movs	r1, #62	; 0x3e
 8000484:	2068      	movs	r0, #104	; 0x68
 8000486:	f000 f952 	bl	800072e <i2c_master_read_data>
 800048a:	4603      	mov	r3, r0
 800048c:	72bb      	strb	r3, [r7, #10]
	        uint16_t accel_YOUT  = (int16_t)((accel_YOUT_H<<8) | accel_YOUT_L);
 800048e:	7afb      	ldrb	r3, [r7, #11]
 8000490:	021b      	lsls	r3, r3, #8
 8000492:	b21a      	sxth	r2, r3
 8000494:	7abb      	ldrb	r3, [r7, #10]
 8000496:	b21b      	sxth	r3, r3
 8000498:	4313      	orrs	r3, r2
 800049a:	b21b      	sxth	r3, r3
 800049c:	813b      	strh	r3, [r7, #8]

			uint8_t accel_ZOUT_H = i2c_master_read_data(0x68, 0x3F);
 800049e:	213f      	movs	r1, #63	; 0x3f
 80004a0:	2068      	movs	r0, #104	; 0x68
 80004a2:	f000 f944 	bl	800072e <i2c_master_read_data>
 80004a6:	4603      	mov	r3, r0
 80004a8:	71fb      	strb	r3, [r7, #7]
			uint8_t accel_ZOUT_L = i2c_master_read_data(0x68, 0x40);
 80004aa:	2140      	movs	r1, #64	; 0x40
 80004ac:	2068      	movs	r0, #104	; 0x68
 80004ae:	f000 f93e 	bl	800072e <i2c_master_read_data>
 80004b2:	4603      	mov	r3, r0
 80004b4:	71bb      	strb	r3, [r7, #6]
			uint16_t accel_ZOUT  = (int16_t)((accel_ZOUT_H<<8) | accel_ZOUT_L);
 80004b6:	79fb      	ldrb	r3, [r7, #7]
 80004b8:	021b      	lsls	r3, r3, #8
 80004ba:	b21a      	sxth	r2, r3
 80004bc:	79bb      	ldrb	r3, [r7, #6]
 80004be:	b21b      	sxth	r3, r3
 80004c0:	4313      	orrs	r3, r2
 80004c2:	b21b      	sxth	r3, r3
 80004c4:	80bb      	strh	r3, [r7, #4]

			cb_push_gyro(accel_XOUT, accel_YOUT, accel_ZOUT);
 80004c6:	88ba      	ldrh	r2, [r7, #4]
 80004c8:	8939      	ldrh	r1, [r7, #8]
 80004ca:	89bb      	ldrh	r3, [r7, #12]
 80004cc:	4618      	mov	r0, r3
 80004ce:	f7ff ff45 	bl	800035c <cb_push_gyro>

			i2c_gyro_log_data();
 80004d2:	f000 f845 	bl	8000560 <i2c_gyro_log_data>
}
 80004d6:	bf00      	nop
 80004d8:	3710      	adds	r7, #16
 80004da:	46bd      	mov	sp, r7
 80004dc:	bd80      	pop	{r7, pc}
	...

080004e0 <log_data>:
uint16_t accel_gravity    = 981; // 9.81 * 100
USART_RegDef_Struct* pusart2 = USART2;

/* API to log SPI Loop Back Data */
void log_data(uint32_t tx_frame)
{
 80004e0:	b580      	push	{r7, lr}
 80004e2:	b084      	sub	sp, #16
 80004e4:	af00      	add	r7, sp, #0
 80004e6:	6078      	str	r0, [r7, #4]
   uint8_t data_read;
   cb_pop(&circ_buffer,&data_read);
 80004e8:	f107 030f 	add.w	r3, r7, #15
 80004ec:	4619      	mov	r1, r3
 80004ee:	4816      	ldr	r0, [pc, #88]	; (8000548 <log_data+0x68>)
 80004f0:	f7ff ff07 	bl	8000302 <cb_pop>
   usart_send_string(pusart2, "RX: ");
 80004f4:	4b15      	ldr	r3, [pc, #84]	; (800054c <log_data+0x6c>)
 80004f6:	681b      	ldr	r3, [r3, #0]
 80004f8:	4915      	ldr	r1, [pc, #84]	; (8000550 <log_data+0x70>)
 80004fa:	4618      	mov	r0, r3
 80004fc:	f000 f954 	bl	80007a8 <usart_send_string>
   usart_send_hex(pusart2, (uint32_t)data_read);
 8000500:	4b12      	ldr	r3, [pc, #72]	; (800054c <log_data+0x6c>)
 8000502:	681b      	ldr	r3, [r3, #0]
 8000504:	7bfa      	ldrb	r2, [r7, #15]
 8000506:	4611      	mov	r1, r2
 8000508:	4618      	mov	r0, r3
 800050a:	f000 f95a 	bl	80007c2 <usart_send_hex>
   if((uint32_t)data_read == tx_frame)
 800050e:	7bfb      	ldrb	r3, [r7, #15]
 8000510:	461a      	mov	r2, r3
 8000512:	687b      	ldr	r3, [r7, #4]
 8000514:	4293      	cmp	r3, r2
 8000516:	d106      	bne.n	8000526 <log_data+0x46>
   {
	 usart_send_string(pusart2, "   [PASS]");
 8000518:	4b0c      	ldr	r3, [pc, #48]	; (800054c <log_data+0x6c>)
 800051a:	681b      	ldr	r3, [r3, #0]
 800051c:	490d      	ldr	r1, [pc, #52]	; (8000554 <log_data+0x74>)
 800051e:	4618      	mov	r0, r3
 8000520:	f000 f942 	bl	80007a8 <usart_send_string>
 8000524:	e005      	b.n	8000532 <log_data+0x52>
   }
   else
   {
	 usart_send_string(pusart2, "   [FAIL]");
 8000526:	4b09      	ldr	r3, [pc, #36]	; (800054c <log_data+0x6c>)
 8000528:	681b      	ldr	r3, [r3, #0]
 800052a:	490b      	ldr	r1, [pc, #44]	; (8000558 <log_data+0x78>)
 800052c:	4618      	mov	r0, r3
 800052e:	f000 f93b 	bl	80007a8 <usart_send_string>
   }
   usart_send_string(pusart2, "\r\n");
 8000532:	4b06      	ldr	r3, [pc, #24]	; (800054c <log_data+0x6c>)
 8000534:	681b      	ldr	r3, [r3, #0]
 8000536:	4909      	ldr	r1, [pc, #36]	; (800055c <log_data+0x7c>)
 8000538:	4618      	mov	r0, r3
 800053a:	f000 f935 	bl	80007a8 <usart_send_string>
}
 800053e:	bf00      	nop
 8000540:	3710      	adds	r7, #16
 8000542:	46bd      	mov	sp, r7
 8000544:	bd80      	pop	{r7, pc}
 8000546:	bf00      	nop
 8000548:	20000118 	.word	0x20000118
 800054c:	20000000 	.word	0x20000000
 8000550:	080024e8 	.word	0x080024e8
 8000554:	080024f0 	.word	0x080024f0
 8000558:	080024fc 	.word	0x080024fc
 800055c:	08002508 	.word	0x08002508

08000560 <i2c_gyro_log_data>:

/* API to log I2C Accel sensor Data */
void i2c_gyro_log_data()
{
 8000560:	b580      	push	{r7, lr}
 8000562:	af00      	add	r7, sp, #0
   cb_pop_gyro(&i2c_gyro_data_store);
 8000564:	4826      	ldr	r0, [pc, #152]	; (8000600 <i2c_gyro_log_data+0xa0>)
 8000566:	f7ff ff41 	bl	80003ec <cb_pop_gyro>
   usart_send_string(pusart2, "[ACCEL Sensor-Linear Acceleration] ");
 800056a:	4b26      	ldr	r3, [pc, #152]	; (8000604 <i2c_gyro_log_data+0xa4>)
 800056c:	681b      	ldr	r3, [r3, #0]
 800056e:	4926      	ldr	r1, [pc, #152]	; (8000608 <i2c_gyro_log_data+0xa8>)
 8000570:	4618      	mov	r0, r3
 8000572:	f000 f919 	bl	80007a8 <usart_send_string>
   usart_send_string(pusart2, "X-Axix[");
 8000576:	4b23      	ldr	r3, [pc, #140]	; (8000604 <i2c_gyro_log_data+0xa4>)
 8000578:	681b      	ldr	r3, [r3, #0]
 800057a:	4924      	ldr	r1, [pc, #144]	; (800060c <i2c_gyro_log_data+0xac>)
 800057c:	4618      	mov	r0, r3
 800057e:	f000 f913 	bl	80007a8 <usart_send_string>
   usart_send_hex(pusart2, (uint32_t)i2c_gyro_data_store.accel_x);
 8000582:	4b20      	ldr	r3, [pc, #128]	; (8000604 <i2c_gyro_log_data+0xa4>)
 8000584:	681b      	ldr	r3, [r3, #0]
 8000586:	4a1e      	ldr	r2, [pc, #120]	; (8000600 <i2c_gyro_log_data+0xa0>)
 8000588:	8852      	ldrh	r2, [r2, #2]
 800058a:	4611      	mov	r1, r2
 800058c:	4618      	mov	r0, r3
 800058e:	f000 f918 	bl	80007c2 <usart_send_hex>
   usart_send_string(pusart2, "]: ");
 8000592:	4b1c      	ldr	r3, [pc, #112]	; (8000604 <i2c_gyro_log_data+0xa4>)
 8000594:	681b      	ldr	r3, [r3, #0]
 8000596:	491e      	ldr	r1, [pc, #120]	; (8000610 <i2c_gyro_log_data+0xb0>)
 8000598:	4618      	mov	r0, r3
 800059a:	f000 f905 	bl	80007a8 <usart_send_string>
   usart_send_string(pusart2, "Y-Axix[");
 800059e:	4b19      	ldr	r3, [pc, #100]	; (8000604 <i2c_gyro_log_data+0xa4>)
 80005a0:	681b      	ldr	r3, [r3, #0]
 80005a2:	491c      	ldr	r1, [pc, #112]	; (8000614 <i2c_gyro_log_data+0xb4>)
 80005a4:	4618      	mov	r0, r3
 80005a6:	f000 f8ff 	bl	80007a8 <usart_send_string>
   usart_send_hex(pusart2, (uint32_t)i2c_gyro_data_store.accel_y);
 80005aa:	4b16      	ldr	r3, [pc, #88]	; (8000604 <i2c_gyro_log_data+0xa4>)
 80005ac:	681b      	ldr	r3, [r3, #0]
 80005ae:	4a14      	ldr	r2, [pc, #80]	; (8000600 <i2c_gyro_log_data+0xa0>)
 80005b0:	8892      	ldrh	r2, [r2, #4]
 80005b2:	4611      	mov	r1, r2
 80005b4:	4618      	mov	r0, r3
 80005b6:	f000 f904 	bl	80007c2 <usart_send_hex>
   usart_send_string(pusart2, "]: ");
 80005ba:	4b12      	ldr	r3, [pc, #72]	; (8000604 <i2c_gyro_log_data+0xa4>)
 80005bc:	681b      	ldr	r3, [r3, #0]
 80005be:	4914      	ldr	r1, [pc, #80]	; (8000610 <i2c_gyro_log_data+0xb0>)
 80005c0:	4618      	mov	r0, r3
 80005c2:	f000 f8f1 	bl	80007a8 <usart_send_string>
   usart_send_string(pusart2, "Z-Axix[");
 80005c6:	4b0f      	ldr	r3, [pc, #60]	; (8000604 <i2c_gyro_log_data+0xa4>)
 80005c8:	681b      	ldr	r3, [r3, #0]
 80005ca:	4913      	ldr	r1, [pc, #76]	; (8000618 <i2c_gyro_log_data+0xb8>)
 80005cc:	4618      	mov	r0, r3
 80005ce:	f000 f8eb 	bl	80007a8 <usart_send_string>
   usart_send_hex(pusart2, (uint32_t)i2c_gyro_data_store.accel_z);
 80005d2:	4b0c      	ldr	r3, [pc, #48]	; (8000604 <i2c_gyro_log_data+0xa4>)
 80005d4:	681b      	ldr	r3, [r3, #0]
 80005d6:	4a0a      	ldr	r2, [pc, #40]	; (8000600 <i2c_gyro_log_data+0xa0>)
 80005d8:	88d2      	ldrh	r2, [r2, #6]
 80005da:	4611      	mov	r1, r2
 80005dc:	4618      	mov	r0, r3
 80005de:	f000 f8f0 	bl	80007c2 <usart_send_hex>
   usart_send_string(pusart2, "]");
 80005e2:	4b08      	ldr	r3, [pc, #32]	; (8000604 <i2c_gyro_log_data+0xa4>)
 80005e4:	681b      	ldr	r3, [r3, #0]
 80005e6:	490d      	ldr	r1, [pc, #52]	; (800061c <i2c_gyro_log_data+0xbc>)
 80005e8:	4618      	mov	r0, r3
 80005ea:	f000 f8dd 	bl	80007a8 <usart_send_string>
   usart_send_string(pusart2, "\r\n");
 80005ee:	4b05      	ldr	r3, [pc, #20]	; (8000604 <i2c_gyro_log_data+0xa4>)
 80005f0:	681b      	ldr	r3, [r3, #0]
 80005f2:	490b      	ldr	r1, [pc, #44]	; (8000620 <i2c_gyro_log_data+0xc0>)
 80005f4:	4618      	mov	r0, r3
 80005f6:	f000 f8d7 	bl	80007a8 <usart_send_string>
}
 80005fa:	bf00      	nop
 80005fc:	bd80      	pop	{r7, pc}
 80005fe:	bf00      	nop
 8000600:	20000364 	.word	0x20000364
 8000604:	20000000 	.word	0x20000000
 8000608:	0800250c 	.word	0x0800250c
 800060c:	08002530 	.word	0x08002530
 8000610:	08002538 	.word	0x08002538
 8000614:	0800253c 	.word	0x0800253c
 8000618:	08002544 	.word	0x08002544
 800061c:	0800254c 	.word	0x0800254c
 8000620:	08002508 	.word	0x08002508

08000624 <spi_fame_simulate>:
#include <stdbool.h>


/* API For Simulating SPI loopback Tx Data */
uint8_t* spi_fame_simulate()
{
 8000624:	b580      	push	{r7, lr}
 8000626:	b082      	sub	sp, #8
 8000628:	af00      	add	r7, sp, #0
	static uint8_t spi_frame[8];

	for(uint8_t i =0; i < sizeof(spi_frame)/sizeof(spi_frame[0]); i++)
 800062a:	2300      	movs	r3, #0
 800062c:	71fb      	strb	r3, [r7, #7]
 800062e:	e00f      	b.n	8000650 <spi_fame_simulate+0x2c>
	{
		spi_frame[i] = rand() % 2; //generates 0 or 1;
 8000630:	f000 ff70 	bl	8001514 <rand>
 8000634:	4603      	mov	r3, r0
 8000636:	2b00      	cmp	r3, #0
 8000638:	f003 0301 	and.w	r3, r3, #1
 800063c:	bfb8      	it	lt
 800063e:	425b      	neglt	r3, r3
 8000640:	461a      	mov	r2, r3
 8000642:	79fb      	ldrb	r3, [r7, #7]
 8000644:	b2d1      	uxtb	r1, r2
 8000646:	4a06      	ldr	r2, [pc, #24]	; (8000660 <spi_fame_simulate+0x3c>)
 8000648:	54d1      	strb	r1, [r2, r3]
	for(uint8_t i =0; i < sizeof(spi_frame)/sizeof(spi_frame[0]); i++)
 800064a:	79fb      	ldrb	r3, [r7, #7]
 800064c:	3301      	adds	r3, #1
 800064e:	71fb      	strb	r3, [r7, #7]
 8000650:	79fb      	ldrb	r3, [r7, #7]
 8000652:	2b07      	cmp	r3, #7
 8000654:	d9ec      	bls.n	8000630 <spi_fame_simulate+0xc>
	}

	return spi_frame;
 8000656:	4b02      	ldr	r3, [pc, #8]	; (8000660 <spi_fame_simulate+0x3c>)
}
 8000658:	4618      	mov	r0, r3
 800065a:	3708      	adds	r7, #8
 800065c:	46bd      	mov	sp, r7
 800065e:	bd80      	pop	{r7, pc}
 8000660:	2000036c 	.word	0x2000036c

08000664 <spi_loopback_test>:
#include "spi_loopback_feature.h"
#include <stdint.h>

/* API to generate SPI loop back Tx frame */
void spi_loopback_test()
{
 8000664:	b580      	push	{r7, lr}
 8000666:	b082      	sub	sp, #8
 8000668:	af00      	add	r7, sp, #0
    SPI_RegDef_Struct* pSPI2 = SPI2;
 800066a:	4b06      	ldr	r3, [pc, #24]	; (8000684 <spi_loopback_test+0x20>)
 800066c:	607b      	str	r3, [r7, #4]
	uint8_t * Pspi_sim_frame = spi_fame_simulate();
 800066e:	f7ff ffd9 	bl	8000624 <spi_fame_simulate>
 8000672:	6038      	str	r0, [r7, #0]
    spi_send_frame(Pspi_sim_frame,pSPI2);
 8000674:	6879      	ldr	r1, [r7, #4]
 8000676:	6838      	ldr	r0, [r7, #0]
 8000678:	f000 f874 	bl	8000764 <spi_send_frame>
}
 800067c:	bf00      	nop
 800067e:	3708      	adds	r7, #8
 8000680:	46bd      	mov	sp, r7
 8000682:	bd80      	pop	{r7, pc}
 8000684:	40003800 	.word	0x40003800

08000688 <gpio_user_cfg_init>:
const uint8_t gpio_spi_array_size = sizeof(gpio_spi_cfg)/sizeof(gpio_spi_cfg[0]);
const uint8_t gpio_i2c_array_size = sizeof(gpio_i2c_cfg)/sizeof(gpio_i2c_cfg[0]);

/*API to handle GPIO user configurations */
void gpio_user_cfg_init()
{
 8000688:	b580      	push	{r7, lr}
 800068a:	b082      	sub	sp, #8
 800068c:	af00      	add	r7, sp, #0

	for(uint8_t i = 0 ; i < gpio_uart_array_size; i++)
 800068e:	2300      	movs	r3, #0
 8000690:	71fb      	strb	r3, [r7, #7]
 8000692:	e009      	b.n	80006a8 <gpio_user_cfg_init+0x20>
	{
		gpio_init(&gpio_uart_cfg[i]);
 8000694:	79fb      	ldrb	r3, [r7, #7]
 8000696:	011b      	lsls	r3, r3, #4
 8000698:	4a19      	ldr	r2, [pc, #100]	; (8000700 <gpio_user_cfg_init+0x78>)
 800069a:	4413      	add	r3, r2
 800069c:	4618      	mov	r0, r3
 800069e:	f000 f835 	bl	800070c <gpio_init>
	for(uint8_t i = 0 ; i < gpio_uart_array_size; i++)
 80006a2:	79fb      	ldrb	r3, [r7, #7]
 80006a4:	3301      	adds	r3, #1
 80006a6:	71fb      	strb	r3, [r7, #7]
 80006a8:	2202      	movs	r2, #2
 80006aa:	79fb      	ldrb	r3, [r7, #7]
 80006ac:	4293      	cmp	r3, r2
 80006ae:	d3f1      	bcc.n	8000694 <gpio_user_cfg_init+0xc>
	}

	for(uint8_t i = 0 ; i < gpio_spi_array_size; i++)
 80006b0:	2300      	movs	r3, #0
 80006b2:	71bb      	strb	r3, [r7, #6]
 80006b4:	e009      	b.n	80006ca <gpio_user_cfg_init+0x42>
	{
		gpio_init(&gpio_spi_cfg[i]);
 80006b6:	79bb      	ldrb	r3, [r7, #6]
 80006b8:	011b      	lsls	r3, r3, #4
 80006ba:	4a12      	ldr	r2, [pc, #72]	; (8000704 <gpio_user_cfg_init+0x7c>)
 80006bc:	4413      	add	r3, r2
 80006be:	4618      	mov	r0, r3
 80006c0:	f000 f824 	bl	800070c <gpio_init>
	for(uint8_t i = 0 ; i < gpio_spi_array_size; i++)
 80006c4:	79bb      	ldrb	r3, [r7, #6]
 80006c6:	3301      	adds	r3, #1
 80006c8:	71bb      	strb	r3, [r7, #6]
 80006ca:	2204      	movs	r2, #4
 80006cc:	79bb      	ldrb	r3, [r7, #6]
 80006ce:	4293      	cmp	r3, r2
 80006d0:	d3f1      	bcc.n	80006b6 <gpio_user_cfg_init+0x2e>
	}
	for(uint8_t i =0; i < gpio_i2c_array_size; i++)
 80006d2:	2300      	movs	r3, #0
 80006d4:	717b      	strb	r3, [r7, #5]
 80006d6:	e009      	b.n	80006ec <gpio_user_cfg_init+0x64>
	{
		gpio_init(&gpio_i2c_cfg[i]);
 80006d8:	797b      	ldrb	r3, [r7, #5]
 80006da:	011b      	lsls	r3, r3, #4
 80006dc:	4a0a      	ldr	r2, [pc, #40]	; (8000708 <gpio_user_cfg_init+0x80>)
 80006de:	4413      	add	r3, r2
 80006e0:	4618      	mov	r0, r3
 80006e2:	f000 f813 	bl	800070c <gpio_init>
	for(uint8_t i =0; i < gpio_i2c_array_size; i++)
 80006e6:	797b      	ldrb	r3, [r7, #5]
 80006e8:	3301      	adds	r3, #1
 80006ea:	717b      	strb	r3, [r7, #5]
 80006ec:	2202      	movs	r2, #2
 80006ee:	797b      	ldrb	r3, [r7, #5]
 80006f0:	4293      	cmp	r3, r2
 80006f2:	d3f1      	bcc.n	80006d8 <gpio_user_cfg_init+0x50>
	}
}
 80006f4:	bf00      	nop
 80006f6:	bf00      	nop
 80006f8:	3708      	adds	r7, #8
 80006fa:	46bd      	mov	sp, r7
 80006fc:	bd80      	pop	{r7, pc}
 80006fe:	bf00      	nop
 8000700:	20000004 	.word	0x20000004
 8000704:	20000024 	.word	0x20000024
 8000708:	20000064 	.word	0x20000064

0800070c <gpio_init>:

/* API to initialize GPIO with user configurations */
void gpio_init(GPIO_Hanlde_Struct* pGpio_cfg)
{
 800070c:	b580      	push	{r7, lr}
 800070e:	b082      	sub	sp, #8
 8000710:	af00      	add	r7, sp, #0
 8000712:	6078      	str	r0, [r7, #4]
	gpio_stm32_init(pGpio_cfg);
 8000714:	6878      	ldr	r0, [r7, #4]
 8000716:	f000 f861 	bl	80007dc <gpio_stm32_init>
}
 800071a:	bf00      	nop
 800071c:	3708      	adds	r7, #8
 800071e:	46bd      	mov	sp, r7
 8000720:	bd80      	pop	{r7, pc}

08000722 <i2c_init>:

#include "i2c.h"

/*Abstraction layer API to handle I2C initializations*/
void i2c_init()
{
 8000722:	b580      	push	{r7, lr}
 8000724:	af00      	add	r7, sp, #0
   i2c_stm32_init();
 8000726:	f000 f91b 	bl	8000960 <i2c_stm32_init>
}
 800072a:	bf00      	nop
 800072c:	bd80      	pop	{r7, pc}

0800072e <i2c_master_read_data>:
	i2c_stm32_master_write_data();
}

/*Abstraction layer API to handle master reading data from slave */
uint8_t i2c_master_read_data(uint8_t sensor_addr_user_input, uint8_t read_reg_addr_user_input)
{
 800072e:	b580      	push	{r7, lr}
 8000730:	b084      	sub	sp, #16
 8000732:	af00      	add	r7, sp, #0
 8000734:	4603      	mov	r3, r0
 8000736:	460a      	mov	r2, r1
 8000738:	71fb      	strb	r3, [r7, #7]
 800073a:	4613      	mov	r3, r2
 800073c:	71bb      	strb	r3, [r7, #6]
    uint8_t sensor_data = i2c_stm32_master_read_data(sensor_addr_user_input, read_reg_addr_user_input);
 800073e:	79ba      	ldrb	r2, [r7, #6]
 8000740:	79fb      	ldrb	r3, [r7, #7]
 8000742:	4611      	mov	r1, r2
 8000744:	4618      	mov	r0, r3
 8000746:	f000 fa07 	bl	8000b58 <i2c_stm32_master_read_data>
 800074a:	4603      	mov	r3, r0
 800074c:	73fb      	strb	r3, [r7, #15]
    return sensor_data;
 800074e:	7bfb      	ldrb	r3, [r7, #15]
}
 8000750:	4618      	mov	r0, r3
 8000752:	3710      	adds	r7, #16
 8000754:	46bd      	mov	sp, r7
 8000756:	bd80      	pop	{r7, pc}

08000758 <spi_init>:
#include "spi.h"


/*Abstraction layer API to handle SPI initialization */
void spi_init()
{
 8000758:	b580      	push	{r7, lr}
 800075a:	af00      	add	r7, sp, #0
	spi_stm32_init();
 800075c:	f000 fb3e 	bl	8000ddc <spi_stm32_init>
}
 8000760:	bf00      	nop
 8000762:	bd80      	pop	{r7, pc}

08000764 <spi_send_frame>:

/*Abstraction layer API to send TX loop back frame */
void spi_send_frame(uint8_t* pSPI_Frame,SPI_RegDef_Struct* pSPI2)
{
 8000764:	b580      	push	{r7, lr}
 8000766:	b082      	sub	sp, #8
 8000768:	af00      	add	r7, sp, #0
 800076a:	6078      	str	r0, [r7, #4]
 800076c:	6039      	str	r1, [r7, #0]
	spi_stm32_send_frame(pSPI_Frame,pSPI2);
 800076e:	6839      	ldr	r1, [r7, #0]
 8000770:	6878      	ldr	r0, [r7, #4]
 8000772:	f000 fb9f 	bl	8000eb4 <spi_stm32_send_frame>
}
 8000776:	bf00      	nop
 8000778:	3708      	adds	r7, #8
 800077a:	46bd      	mov	sp, r7
 800077c:	bd80      	pop	{r7, pc}

0800077e <usart_init>:
#include "uart.h"
#include "uart_stm32.h"

/* UART abstraction layer api's implementation */
void usart_init()
{
 800077e:	b580      	push	{r7, lr}
 8000780:	af00      	add	r7, sp, #0
	usart_stm32_init();
 8000782:	f000 fc29 	bl	8000fd8 <usart_stm32_init>
}
 8000786:	bf00      	nop
 8000788:	bd80      	pop	{r7, pc}

0800078a <usart_send_char>:

void usart_send_char(USART_RegDef_Struct* pUSART,char ch)
{
 800078a:	b580      	push	{r7, lr}
 800078c:	b082      	sub	sp, #8
 800078e:	af00      	add	r7, sp, #0
 8000790:	6078      	str	r0, [r7, #4]
 8000792:	460b      	mov	r3, r1
 8000794:	70fb      	strb	r3, [r7, #3]
	usart_stm32_send_char(pUSART, ch);
 8000796:	78fb      	ldrb	r3, [r7, #3]
 8000798:	4619      	mov	r1, r3
 800079a:	6878      	ldr	r0, [r7, #4]
 800079c:	f000 fcc6 	bl	800112c <usart_stm32_send_char>
}
 80007a0:	bf00      	nop
 80007a2:	3708      	adds	r7, #8
 80007a4:	46bd      	mov	sp, r7
 80007a6:	bd80      	pop	{r7, pc}

080007a8 <usart_send_string>:

void usart_send_string(USART_RegDef_Struct* pUsart,char* pStr)
{
 80007a8:	b580      	push	{r7, lr}
 80007aa:	b082      	sub	sp, #8
 80007ac:	af00      	add	r7, sp, #0
 80007ae:	6078      	str	r0, [r7, #4]
 80007b0:	6039      	str	r1, [r7, #0]
	usart_stm32_send_string(pUsart, pStr);
 80007b2:	6839      	ldr	r1, [r7, #0]
 80007b4:	6878      	ldr	r0, [r7, #4]
 80007b6:	f000 fcd6 	bl	8001166 <usart_stm32_send_string>
}
 80007ba:	bf00      	nop
 80007bc:	3708      	adds	r7, #8
 80007be:	46bd      	mov	sp, r7
 80007c0:	bd80      	pop	{r7, pc}

080007c2 <usart_send_hex>:

void usart_send_hex(USART_RegDef_Struct* pUSARTx, uint32_t hex_value)
{
 80007c2:	b580      	push	{r7, lr}
 80007c4:	b082      	sub	sp, #8
 80007c6:	af00      	add	r7, sp, #0
 80007c8:	6078      	str	r0, [r7, #4]
 80007ca:	6039      	str	r1, [r7, #0]
	usart_stm32_send_hex(pUSARTx, hex_value);
 80007cc:	6839      	ldr	r1, [r7, #0]
 80007ce:	6878      	ldr	r0, [r7, #4]
 80007d0:	f000 fce0 	bl	8001194 <usart_stm32_send_hex>
}
 80007d4:	bf00      	nop
 80007d6:	3708      	adds	r7, #8
 80007d8:	46bd      	mov	sp, r7
 80007da:	bd80      	pop	{r7, pc}

080007dc <gpio_stm32_init>:

#include "gpio_stm32.h"

/* API for initializing GPIOA peripheral for enabling USART2 based communication - MCAL */
void gpio_stm32_init(GPIO_Hanlde_Struct* pGpio_cfg)
{
 80007dc:	b580      	push	{r7, lr}
 80007de:	b084      	sub	sp, #16
 80007e0:	af00      	add	r7, sp, #0
 80007e2:	6078      	str	r0, [r7, #4]

	GPIOA_CLK_EN();
 80007e4:	4b5d      	ldr	r3, [pc, #372]	; (800095c <gpio_stm32_init+0x180>)
 80007e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007e8:	4a5c      	ldr	r2, [pc, #368]	; (800095c <gpio_stm32_init+0x180>)
 80007ea:	f043 0301 	orr.w	r3, r3, #1
 80007ee:	6313      	str	r3, [r2, #48]	; 0x30
	GPIOB_CLK_EN();
 80007f0:	4b5a      	ldr	r3, [pc, #360]	; (800095c <gpio_stm32_init+0x180>)
 80007f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007f4:	4a59      	ldr	r2, [pc, #356]	; (800095c <gpio_stm32_init+0x180>)
 80007f6:	f043 0302 	orr.w	r3, r3, #2
 80007fa:	6313      	str	r3, [r2, #48]	; 0x30


	/*MODER Configuration */
	pGpio_cfg->gpio_reg_def->MODER   &= ~(3U << ((pGpio_cfg->gpio_cfg.gpio_pin)*2));
 80007fc:	687b      	ldr	r3, [r7, #4]
 80007fe:	68db      	ldr	r3, [r3, #12]
 8000800:	6819      	ldr	r1, [r3, #0]
 8000802:	687b      	ldr	r3, [r7, #4]
 8000804:	791b      	ldrb	r3, [r3, #4]
 8000806:	005b      	lsls	r3, r3, #1
 8000808:	2203      	movs	r2, #3
 800080a:	fa02 f303 	lsl.w	r3, r2, r3
 800080e:	43da      	mvns	r2, r3
 8000810:	687b      	ldr	r3, [r7, #4]
 8000812:	68db      	ldr	r3, [r3, #12]
 8000814:	400a      	ands	r2, r1
 8000816:	601a      	str	r2, [r3, #0]
	pGpio_cfg->gpio_reg_def->MODER   |=  (pGpio_cfg->gpio_cfg.gpio_pin_mode << ((pGpio_cfg->gpio_cfg.gpio_pin)*2));
 8000818:	687b      	ldr	r3, [r7, #4]
 800081a:	68db      	ldr	r3, [r3, #12]
 800081c:	681a      	ldr	r2, [r3, #0]
 800081e:	687b      	ldr	r3, [r7, #4]
 8000820:	795b      	ldrb	r3, [r3, #5]
 8000822:	4619      	mov	r1, r3
 8000824:	687b      	ldr	r3, [r7, #4]
 8000826:	791b      	ldrb	r3, [r3, #4]
 8000828:	005b      	lsls	r3, r3, #1
 800082a:	fa01 f303 	lsl.w	r3, r1, r3
 800082e:	4619      	mov	r1, r3
 8000830:	687b      	ldr	r3, [r7, #4]
 8000832:	68db      	ldr	r3, [r3, #12]
 8000834:	430a      	orrs	r2, r1
 8000836:	601a      	str	r2, [r3, #0]

	/*OTYPE Configuration */
	pGpio_cfg->gpio_reg_def->OTYPER  &= ~(1 << (pGpio_cfg->gpio_cfg.gpio_pin));
 8000838:	687b      	ldr	r3, [r7, #4]
 800083a:	68db      	ldr	r3, [r3, #12]
 800083c:	685a      	ldr	r2, [r3, #4]
 800083e:	687b      	ldr	r3, [r7, #4]
 8000840:	791b      	ldrb	r3, [r3, #4]
 8000842:	4619      	mov	r1, r3
 8000844:	2301      	movs	r3, #1
 8000846:	408b      	lsls	r3, r1
 8000848:	43db      	mvns	r3, r3
 800084a:	4619      	mov	r1, r3
 800084c:	687b      	ldr	r3, [r7, #4]
 800084e:	68db      	ldr	r3, [r3, #12]
 8000850:	400a      	ands	r2, r1
 8000852:	605a      	str	r2, [r3, #4]
	pGpio_cfg->gpio_reg_def->OTYPER  |=  (pGpio_cfg->gpio_cfg.gpio_pin_otype << pGpio_cfg->gpio_cfg.gpio_pin);
 8000854:	687b      	ldr	r3, [r7, #4]
 8000856:	68db      	ldr	r3, [r3, #12]
 8000858:	685a      	ldr	r2, [r3, #4]
 800085a:	687b      	ldr	r3, [r7, #4]
 800085c:	7a1b      	ldrb	r3, [r3, #8]
 800085e:	4619      	mov	r1, r3
 8000860:	687b      	ldr	r3, [r7, #4]
 8000862:	791b      	ldrb	r3, [r3, #4]
 8000864:	fa01 f303 	lsl.w	r3, r1, r3
 8000868:	4619      	mov	r1, r3
 800086a:	687b      	ldr	r3, [r7, #4]
 800086c:	68db      	ldr	r3, [r3, #12]
 800086e:	430a      	orrs	r2, r1
 8000870:	605a      	str	r2, [r3, #4]

	/*OSPEEDR Configuration */
	pGpio_cfg->gpio_reg_def->OSPEEDR &= ~(3U << ((pGpio_cfg->gpio_cfg.gpio_pin)*2));
 8000872:	687b      	ldr	r3, [r7, #4]
 8000874:	68db      	ldr	r3, [r3, #12]
 8000876:	6899      	ldr	r1, [r3, #8]
 8000878:	687b      	ldr	r3, [r7, #4]
 800087a:	791b      	ldrb	r3, [r3, #4]
 800087c:	005b      	lsls	r3, r3, #1
 800087e:	2203      	movs	r2, #3
 8000880:	fa02 f303 	lsl.w	r3, r2, r3
 8000884:	43da      	mvns	r2, r3
 8000886:	687b      	ldr	r3, [r7, #4]
 8000888:	68db      	ldr	r3, [r3, #12]
 800088a:	400a      	ands	r2, r1
 800088c:	609a      	str	r2, [r3, #8]
	pGpio_cfg->gpio_reg_def->OSPEEDR |= (pGpio_cfg->gpio_cfg.gpio_pin_speed << ((pGpio_cfg->gpio_cfg.gpio_pin)*2));
 800088e:	687b      	ldr	r3, [r7, #4]
 8000890:	68db      	ldr	r3, [r3, #12]
 8000892:	689a      	ldr	r2, [r3, #8]
 8000894:	687b      	ldr	r3, [r7, #4]
 8000896:	7a5b      	ldrb	r3, [r3, #9]
 8000898:	4619      	mov	r1, r3
 800089a:	687b      	ldr	r3, [r7, #4]
 800089c:	791b      	ldrb	r3, [r3, #4]
 800089e:	005b      	lsls	r3, r3, #1
 80008a0:	fa01 f303 	lsl.w	r3, r1, r3
 80008a4:	4619      	mov	r1, r3
 80008a6:	687b      	ldr	r3, [r7, #4]
 80008a8:	68db      	ldr	r3, [r3, #12]
 80008aa:	430a      	orrs	r2, r1
 80008ac:	609a      	str	r2, [r3, #8]

	/*PUPDR Configurations */
	pGpio_cfg->gpio_reg_def->PUPDR   &= ~(3U << ((pGpio_cfg->gpio_cfg.gpio_pin)*2));
 80008ae:	687b      	ldr	r3, [r7, #4]
 80008b0:	68db      	ldr	r3, [r3, #12]
 80008b2:	68d9      	ldr	r1, [r3, #12]
 80008b4:	687b      	ldr	r3, [r7, #4]
 80008b6:	791b      	ldrb	r3, [r3, #4]
 80008b8:	005b      	lsls	r3, r3, #1
 80008ba:	2203      	movs	r2, #3
 80008bc:	fa02 f303 	lsl.w	r3, r2, r3
 80008c0:	43da      	mvns	r2, r3
 80008c2:	687b      	ldr	r3, [r7, #4]
 80008c4:	68db      	ldr	r3, [r3, #12]
 80008c6:	400a      	ands	r2, r1
 80008c8:	60da      	str	r2, [r3, #12]
	pGpio_cfg->gpio_reg_def->PUPDR   |=  (pGpio_cfg->gpio_cfg.gpio_pin_pupd << ((pGpio_cfg->gpio_cfg.gpio_pin)*2));
 80008ca:	687b      	ldr	r3, [r7, #4]
 80008cc:	68db      	ldr	r3, [r3, #12]
 80008ce:	68da      	ldr	r2, [r3, #12]
 80008d0:	687b      	ldr	r3, [r7, #4]
 80008d2:	79db      	ldrb	r3, [r3, #7]
 80008d4:	4619      	mov	r1, r3
 80008d6:	687b      	ldr	r3, [r7, #4]
 80008d8:	791b      	ldrb	r3, [r3, #4]
 80008da:	005b      	lsls	r3, r3, #1
 80008dc:	fa01 f303 	lsl.w	r3, r1, r3
 80008e0:	4619      	mov	r1, r3
 80008e2:	687b      	ldr	r3, [r7, #4]
 80008e4:	68db      	ldr	r3, [r3, #12]
 80008e6:	430a      	orrs	r2, r1
 80008e8:	60da      	str	r2, [r3, #12]

	/*AFR Configurations */
    uint8_t AFR_index           =  pGpio_cfg->gpio_cfg.gpio_pin / 8;
 80008ea:	687b      	ldr	r3, [r7, #4]
 80008ec:	791b      	ldrb	r3, [r3, #4]
 80008ee:	08db      	lsrs	r3, r3, #3
 80008f0:	73fb      	strb	r3, [r7, #15]
    pGpio_cfg->gpio_reg_def->AFR[AFR_index] &= ~(0xF << ((pGpio_cfg->gpio_cfg.gpio_pin%8)*4));
 80008f2:	687b      	ldr	r3, [r7, #4]
 80008f4:	68db      	ldr	r3, [r3, #12]
 80008f6:	7bfa      	ldrb	r2, [r7, #15]
 80008f8:	3208      	adds	r2, #8
 80008fa:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80008fe:	687b      	ldr	r3, [r7, #4]
 8000900:	791b      	ldrb	r3, [r3, #4]
 8000902:	f003 0307 	and.w	r3, r3, #7
 8000906:	009b      	lsls	r3, r3, #2
 8000908:	220f      	movs	r2, #15
 800090a:	fa02 f303 	lsl.w	r3, r2, r3
 800090e:	43db      	mvns	r3, r3
 8000910:	4618      	mov	r0, r3
 8000912:	687b      	ldr	r3, [r7, #4]
 8000914:	68db      	ldr	r3, [r3, #12]
 8000916:	7bfa      	ldrb	r2, [r7, #15]
 8000918:	4001      	ands	r1, r0
 800091a:	3208      	adds	r2, #8
 800091c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pGpio_cfg->gpio_reg_def->AFR[AFR_index] |= (pGpio_cfg->gpio_cfg.gpio_alt_func << ((pGpio_cfg->gpio_cfg.gpio_pin%8)*4));
 8000920:	687b      	ldr	r3, [r7, #4]
 8000922:	68db      	ldr	r3, [r3, #12]
 8000924:	7bfa      	ldrb	r2, [r7, #15]
 8000926:	3208      	adds	r2, #8
 8000928:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800092c:	687b      	ldr	r3, [r7, #4]
 800092e:	799b      	ldrb	r3, [r3, #6]
 8000930:	461a      	mov	r2, r3
 8000932:	687b      	ldr	r3, [r7, #4]
 8000934:	791b      	ldrb	r3, [r3, #4]
 8000936:	f003 0307 	and.w	r3, r3, #7
 800093a:	009b      	lsls	r3, r3, #2
 800093c:	fa02 f303 	lsl.w	r3, r2, r3
 8000940:	4618      	mov	r0, r3
 8000942:	687b      	ldr	r3, [r7, #4]
 8000944:	68db      	ldr	r3, [r3, #12]
 8000946:	7bfa      	ldrb	r2, [r7, #15]
 8000948:	4301      	orrs	r1, r0
 800094a:	3208      	adds	r2, #8
 800094c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    /* UART initialization call - MCAL */
    usart_init();
 8000950:	f7ff ff15 	bl	800077e <usart_init>
}
 8000954:	bf00      	nop
 8000956:	3710      	adds	r7, #16
 8000958:	46bd      	mov	sp, r7
 800095a:	bd80      	pop	{r7, pc}
 800095c:	40023800 	.word	0x40023800

08000960 <i2c_stm32_init>:

USART_RegDef_Struct* pUsart22 = USART2;

/* API to handle I2c initializations  - MCAL */
void i2c_stm32_init()
{
 8000960:	b580      	push	{r7, lr}
 8000962:	b084      	sub	sp, #16
 8000964:	af00      	add	r7, sp, #0
    uint8_t mode = 0;
 8000966:	2300      	movs	r3, #0
 8000968:	72fb      	strb	r3, [r7, #11]
    uint8_t duty_cycle = 0;
 800096a:	2300      	movs	r3, #0
 800096c:	72bb      	strb	r3, [r7, #10]
    uint8_t t_rise = 0;
 800096e:	2300      	movs	r3, #0
 8000970:	73fb      	strb	r3, [r7, #15]
    uint16_t ccr_value = 0;
 8000972:	2300      	movs	r3, #0
 8000974:	81bb      	strh	r3, [r7, #12]
    uint32_t pclk   =  get_pclk_value()/1000000U;
 8000976:	f000 f9d3 	bl	8000d20 <get_pclk_value>
 800097a:	4603      	mov	r3, r0
 800097c:	4a6f      	ldr	r2, [pc, #444]	; (8000b3c <i2c_stm32_init+0x1dc>)
 800097e:	fba2 2303 	umull	r2, r3, r2, r3
 8000982:	0c9b      	lsrs	r3, r3, #18
 8000984:	607b      	str	r3, [r7, #4]

	/* I2C1 peripheral clock enable */
	I2C1_CLK_EN();
 8000986:	4b6e      	ldr	r3, [pc, #440]	; (8000b40 <i2c_stm32_init+0x1e0>)
 8000988:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800098a:	4a6d      	ldr	r2, [pc, #436]	; (8000b40 <i2c_stm32_init+0x1e0>)
 800098c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000990:	6413      	str	r3, [r2, #64]	; 0x40

    /* Pointer initialization */
	I2C_RegDef_Struct* pI2C1 = I2C1;
 8000992:	4b6c      	ldr	r3, [pc, #432]	; (8000b44 <i2c_stm32_init+0x1e4>)
 8000994:	603b      	str	r3, [r7, #0]

	/* I2C CR2 register initializations */
	pI2C1->I2C_CR2 &= ~(0x3F << 0);
 8000996:	683b      	ldr	r3, [r7, #0]
 8000998:	685b      	ldr	r3, [r3, #4]
 800099a:	f023 023f 	bic.w	r2, r3, #63	; 0x3f
 800099e:	683b      	ldr	r3, [r7, #0]
 80009a0:	605a      	str	r2, [r3, #4]
	pI2C1->I2C_CR2 |=  ((pclk & 0x3F) << 0);
 80009a2:	683b      	ldr	r3, [r7, #0]
 80009a4:	685a      	ldr	r2, [r3, #4]
 80009a6:	687b      	ldr	r3, [r7, #4]
 80009a8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80009ac:	431a      	orrs	r2, r3
 80009ae:	683b      	ldr	r3, [r7, #0]
 80009b0:	605a      	str	r2, [r3, #4]

	/* I2C  ITBUFEN and  ITEVTEN interrupt enable */
	pI2C1->I2C_CR2 &= ~(1 << 10);
 80009b2:	683b      	ldr	r3, [r7, #0]
 80009b4:	685b      	ldr	r3, [r3, #4]
 80009b6:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 80009ba:	683b      	ldr	r3, [r7, #0]
 80009bc:	605a      	str	r2, [r3, #4]
	pI2C1->I2C_CR2 |=  (1 << 10);
 80009be:	683b      	ldr	r3, [r7, #0]
 80009c0:	685b      	ldr	r3, [r3, #4]
 80009c2:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 80009c6:	683b      	ldr	r3, [r7, #0]
 80009c8:	605a      	str	r2, [r3, #4]
	pI2C1->I2C_CR2 &= ~(1 << 9);
 80009ca:	683b      	ldr	r3, [r7, #0]
 80009cc:	685b      	ldr	r3, [r3, #4]
 80009ce:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 80009d2:	683b      	ldr	r3, [r7, #0]
 80009d4:	605a      	str	r2, [r3, #4]
	pI2C1->I2C_CR2 |=  (1 << 9);
 80009d6:	683b      	ldr	r3, [r7, #0]
 80009d8:	685b      	ldr	r3, [r3, #4]
 80009da:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80009de:	683b      	ldr	r3, [r7, #0]
 80009e0:	605a      	str	r2, [r3, #4]
	/* I2C_OAR1 register initializations */
	/* Interface address configuration */
	//ToDo

	/* I2C_OAR1 Bit 14 configuration */
	pI2C1->I2C_OAR1 |= (1 <<14 );//should always be kept as 1 by the sw.
 80009e2:	683b      	ldr	r3, [r7, #0]
 80009e4:	689b      	ldr	r3, [r3, #8]
 80009e6:	f443 4280 	orr.w	r2, r3, #16384	; 0x4000
 80009ea:	683b      	ldr	r3, [r7, #0]
 80009ec:	609a      	str	r2, [r3, #8]

    /* I2C_CCR register initialization */
	if (mode == 0)
 80009ee:	7afb      	ldrb	r3, [r7, #11]
 80009f0:	2b00      	cmp	r3, #0
 80009f2:	d11f      	bne.n	8000a34 <i2c_stm32_init+0xd4>
	{
		pI2C1->I2C_CCR &= ~(1 << 15);//SM mode =0,100KHz speed,ORing with zero makes no difference
 80009f4:	683b      	ldr	r3, [r7, #0]
 80009f6:	69db      	ldr	r3, [r3, #28]
 80009f8:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 80009fc:	683b      	ldr	r3, [r7, #0]
 80009fe:	61da      	str	r2, [r3, #28]
		ccr_value = (get_pclk_value()/(2*100000));
 8000a00:	f000 f98e 	bl	8000d20 <get_pclk_value>
 8000a04:	4603      	mov	r3, r0
 8000a06:	099b      	lsrs	r3, r3, #6
 8000a08:	4a4f      	ldr	r2, [pc, #316]	; (8000b48 <i2c_stm32_init+0x1e8>)
 8000a0a:	fba2 2303 	umull	r2, r3, r2, r3
 8000a0e:	099b      	lsrs	r3, r3, #6
 8000a10:	81bb      	strh	r3, [r7, #12]
		pI2C1->I2C_CCR &= ~(0xFFF << 0);
 8000a12:	683b      	ldr	r3, [r7, #0]
 8000a14:	69db      	ldr	r3, [r3, #28]
 8000a16:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 8000a1a:	f023 030f 	bic.w	r3, r3, #15
 8000a1e:	683a      	ldr	r2, [r7, #0]
 8000a20:	61d3      	str	r3, [r2, #28]
		pI2C1->I2C_CCR |= ((ccr_value & 0xFFF) << 0);
 8000a22:	683b      	ldr	r3, [r7, #0]
 8000a24:	69da      	ldr	r2, [r3, #28]
 8000a26:	89bb      	ldrh	r3, [r7, #12]
 8000a28:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8000a2c:	431a      	orrs	r2, r3
 8000a2e:	683b      	ldr	r3, [r7, #0]
 8000a30:	61da      	str	r2, [r3, #28]
 8000a32:	e041      	b.n	8000ab8 <i2c_stm32_init+0x158>
	}
	else if ( mode == 1)
 8000a34:	7afb      	ldrb	r3, [r7, #11]
 8000a36:	2b01      	cmp	r3, #1
 8000a38:	d13e      	bne.n	8000ab8 <i2c_stm32_init+0x158>
	{
		pI2C1->I2C_CCR &= ~(1 << 15);
 8000a3a:	683b      	ldr	r3, [r7, #0]
 8000a3c:	69db      	ldr	r3, [r3, #28]
 8000a3e:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 8000a42:	683b      	ldr	r3, [r7, #0]
 8000a44:	61da      	str	r2, [r3, #28]
		pI2C1->I2C_CCR |=  (1 << 15);//SM mode =1,400KHz speed
 8000a46:	683b      	ldr	r3, [r7, #0]
 8000a48:	69db      	ldr	r3, [r3, #28]
 8000a4a:	f443 4200 	orr.w	r2, r3, #32768	; 0x8000
 8000a4e:	683b      	ldr	r3, [r7, #0]
 8000a50:	61da      	str	r2, [r3, #28]
		pI2C1->I2C_CCR &= ~(1 << 14);
 8000a52:	683b      	ldr	r3, [r7, #0]
 8000a54:	69db      	ldr	r3, [r3, #28]
 8000a56:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8000a5a:	683b      	ldr	r3, [r7, #0]
 8000a5c:	61da      	str	r2, [r3, #28]
		if(duty_cycle == 0)
 8000a5e:	7abb      	ldrb	r3, [r7, #10]
 8000a60:	2b00      	cmp	r3, #0
 8000a62:	d108      	bne.n	8000a76 <i2c_stm32_init+0x116>
		{
			ccr_value = (get_pclk_value()/ (3*400000));//Tlow= 2*THigh
 8000a64:	f000 f95c 	bl	8000d20 <get_pclk_value>
 8000a68:	4603      	mov	r3, r0
 8000a6a:	4a38      	ldr	r2, [pc, #224]	; (8000b4c <i2c_stm32_init+0x1ec>)
 8000a6c:	fba2 2303 	umull	r2, r3, r2, r3
 8000a70:	0cdb      	lsrs	r3, r3, #19
 8000a72:	81bb      	strh	r3, [r7, #12]
 8000a74:	e010      	b.n	8000a98 <i2c_stm32_init+0x138>


		}
		else if(duty_cycle == 1)
 8000a76:	7abb      	ldrb	r3, [r7, #10]
 8000a78:	2b01      	cmp	r3, #1
 8000a7a:	d10d      	bne.n	8000a98 <i2c_stm32_init+0x138>
		{
			ccr_value = (get_pclk_value()/(25*400000));////9*Tlow= 16*THigh
 8000a7c:	f000 f950 	bl	8000d20 <get_pclk_value>
 8000a80:	4603      	mov	r3, r0
 8000a82:	4a33      	ldr	r2, [pc, #204]	; (8000b50 <i2c_stm32_init+0x1f0>)
 8000a84:	fba2 2303 	umull	r2, r3, r2, r3
 8000a88:	0d9b      	lsrs	r3, r3, #22
 8000a8a:	81bb      	strh	r3, [r7, #12]
			pI2C1->I2C_CCR |=  (1 << 14);
 8000a8c:	683b      	ldr	r3, [r7, #0]
 8000a8e:	69db      	ldr	r3, [r3, #28]
 8000a90:	f443 4280 	orr.w	r2, r3, #16384	; 0x4000
 8000a94:	683b      	ldr	r3, [r7, #0]
 8000a96:	61da      	str	r2, [r3, #28]
		}

		pI2C1->I2C_CCR &= ~(0xFFF << 0);
 8000a98:	683b      	ldr	r3, [r7, #0]
 8000a9a:	69db      	ldr	r3, [r3, #28]
 8000a9c:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 8000aa0:	f023 030f 	bic.w	r3, r3, #15
 8000aa4:	683a      	ldr	r2, [r7, #0]
 8000aa6:	61d3      	str	r3, [r2, #28]
		pI2C1->I2C_CCR |= ((ccr_value & 0xFFF) << 0);
 8000aa8:	683b      	ldr	r3, [r7, #0]
 8000aaa:	69da      	ldr	r2, [r3, #28]
 8000aac:	89bb      	ldrh	r3, [r7, #12]
 8000aae:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8000ab2:	431a      	orrs	r2, r3
 8000ab4:	683b      	ldr	r3, [r7, #0]
 8000ab6:	61da      	str	r2, [r3, #28]

	}

	/* I2C_TRISE register initialization */
	if (mode == 0)
 8000ab8:	7afb      	ldrb	r3, [r7, #11]
 8000aba:	2b00      	cmp	r3, #0
 8000abc:	d10a      	bne.n	8000ad4 <i2c_stm32_init+0x174>
	{
		//SM mode
		t_rise = (get_pclk_value()/1000000U) + 1;
 8000abe:	f000 f92f 	bl	8000d20 <get_pclk_value>
 8000ac2:	4603      	mov	r3, r0
 8000ac4:	4a1d      	ldr	r2, [pc, #116]	; (8000b3c <i2c_stm32_init+0x1dc>)
 8000ac6:	fba2 2303 	umull	r2, r3, r2, r3
 8000aca:	0c9b      	lsrs	r3, r3, #18
 8000acc:	b2db      	uxtb	r3, r3
 8000ace:	3301      	adds	r3, #1
 8000ad0:	73fb      	strb	r3, [r7, #15]
 8000ad2:	e011      	b.n	8000af8 <i2c_stm32_init+0x198>
	}
	else if (mode == 1)
 8000ad4:	7afb      	ldrb	r3, [r7, #11]
 8000ad6:	2b01      	cmp	r3, #1
 8000ad8:	d10e      	bne.n	8000af8 <i2c_stm32_init+0x198>
	{
		//FM mode
		t_rise = ((get_pclk_value() * 300)/1000000000U) + 1;
 8000ada:	f000 f921 	bl	8000d20 <get_pclk_value>
 8000ade:	4603      	mov	r3, r0
 8000ae0:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8000ae4:	fb02 f303 	mul.w	r3, r2, r3
 8000ae8:	0a5b      	lsrs	r3, r3, #9
 8000aea:	4a1a      	ldr	r2, [pc, #104]	; (8000b54 <i2c_stm32_init+0x1f4>)
 8000aec:	fba2 2303 	umull	r2, r3, r2, r3
 8000af0:	09db      	lsrs	r3, r3, #7
 8000af2:	b2db      	uxtb	r3, r3
 8000af4:	3301      	adds	r3, #1
 8000af6:	73fb      	strb	r3, [r7, #15]
	}

	pI2C1->I2C_TRISE = (t_rise & 0x3F);
 8000af8:	7bfb      	ldrb	r3, [r7, #15]
 8000afa:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8000afe:	683b      	ldr	r3, [r7, #0]
 8000b00:	621a      	str	r2, [r3, #32]

	/* Peripheral configuration */
	pI2C1->I2C_CR1 &= ~(1 << 0 );
 8000b02:	683b      	ldr	r3, [r7, #0]
 8000b04:	681b      	ldr	r3, [r3, #0]
 8000b06:	f023 0201 	bic.w	r2, r3, #1
 8000b0a:	683b      	ldr	r3, [r7, #0]
 8000b0c:	601a      	str	r2, [r3, #0]
	pI2C1->I2C_CR1 |=  (1 << 0);
 8000b0e:	683b      	ldr	r3, [r7, #0]
 8000b10:	681b      	ldr	r3, [r3, #0]
 8000b12:	f043 0201 	orr.w	r2, r3, #1
 8000b16:	683b      	ldr	r3, [r7, #0]
 8000b18:	601a      	str	r2, [r3, #0]

	/* I2C CR1 register initializations */
	/* ACK configuration */
	pI2C1->I2C_CR1 &= ~(1 << 10);
 8000b1a:	683b      	ldr	r3, [r7, #0]
 8000b1c:	681b      	ldr	r3, [r3, #0]
 8000b1e:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8000b22:	683b      	ldr	r3, [r7, #0]
 8000b24:	601a      	str	r2, [r3, #0]
	pI2C1->I2C_CR1 |=  (1 << 10);
 8000b26:	683b      	ldr	r3, [r7, #0]
 8000b28:	681b      	ldr	r3, [r3, #0]
 8000b2a:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8000b2e:	683b      	ldr	r3, [r7, #0]
 8000b30:	601a      	str	r2, [r3, #0]

	/* Disabled I2C Interrupt handling as its not feasible to use to capture sesnor readings */
	//I2C1_irq_enable();
}
 8000b32:	bf00      	nop
 8000b34:	3710      	adds	r7, #16
 8000b36:	46bd      	mov	sp, r7
 8000b38:	bd80      	pop	{r7, pc}
 8000b3a:	bf00      	nop
 8000b3c:	431bde83 	.word	0x431bde83
 8000b40:	40023800 	.word	0x40023800
 8000b44:	40005400 	.word	0x40005400
 8000b48:	053e2d63 	.word	0x053e2d63
 8000b4c:	6fd91d85 	.word	0x6fd91d85
 8000b50:	6b5fca6b 	.word	0x6b5fca6b
 8000b54:	00044b83 	.word	0x00044b83

08000b58 <i2c_stm32_master_read_data>:
}


/* API to read data from Slave to Master - MCAL */
uint8_t i2c_stm32_master_read_data(uint8_t sensor_addr, uint8_t read_reg_addr)
{
 8000b58:	b480      	push	{r7}
 8000b5a:	b087      	sub	sp, #28
 8000b5c:	af00      	add	r7, sp, #0
 8000b5e:	4603      	mov	r3, r0
 8000b60:	460a      	mov	r2, r1
 8000b62:	71fb      	strb	r3, [r7, #7]
 8000b64:	4613      	mov	r3, r2
 8000b66:	71bb      	strb	r3, [r7, #6]

	I2C_RegDef_Struct* pI2C = I2C1;
 8000b68:	4b65      	ldr	r3, [pc, #404]	; (8000d00 <i2c_stm32_master_read_data+0x1a8>)
 8000b6a:	617b      	str	r3, [r7, #20]
	uint8_t sensor_data;
	uint8_t slave_address = sensor_addr;
 8000b6c:	79fb      	ldrb	r3, [r7, #7]
 8000b6e:	74fb      	strb	r3, [r7, #19]
	uint8_t slave_write = 0;
 8000b70:	2300      	movs	r3, #0
 8000b72:	74bb      	strb	r3, [r7, #18]
	uint8_t slave_read  = 0;
 8000b74:	2300      	movs	r3, #0
 8000b76:	747b      	strb	r3, [r7, #17]


	//1. Generate START condition
    pI2C->I2C_CR1 |= (1 << 8);
 8000b78:	697b      	ldr	r3, [r7, #20]
 8000b7a:	681b      	ldr	r3, [r3, #0]
 8000b7c:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8000b80:	697b      	ldr	r3, [r7, #20]
 8000b82:	601a      	str	r2, [r3, #0]

    //2. Confirm that START generation is completed by checking the "SB" flag in the SR1 register.
    //NOTE: Until SB is cleared SCL will be stretched(pulled to LOW).
    while(!(pI2C->I2C_SR1 & (1 << 0)));
 8000b84:	bf00      	nop
 8000b86:	697b      	ldr	r3, [r7, #20]
 8000b88:	695b      	ldr	r3, [r3, #20]
 8000b8a:	f003 0301 	and.w	r3, r3, #1
 8000b8e:	2b00      	cmp	r3, #0
 8000b90:	d0f9      	beq.n	8000b86 <i2c_stm32_master_read_data+0x2e>

    //3. Send the SLAVE Address with r/w bit set to w(0) (total 8 bits)
    // 7-bit MPU6050 address
    slave_write  = slave_address << 1; // shift left to make room for R/W bit
 8000b92:	7cfb      	ldrb	r3, [r7, #19]
 8000b94:	005b      	lsls	r3, r3, #1
 8000b96:	74bb      	strb	r3, [r7, #18]
    slave_write  &= ~(1);              // clear bit0 → write mode (R/W = 0)
 8000b98:	7cbb      	ldrb	r3, [r7, #18]
 8000b9a:	f023 0301 	bic.w	r3, r3, #1
 8000b9e:	74bb      	strb	r3, [r7, #18]
    pI2C->I2C_DR   = slave_write;      // send address
 8000ba0:	7cba      	ldrb	r2, [r7, #18]
 8000ba2:	697b      	ldr	r3, [r7, #20]
 8000ba4:	611a      	str	r2, [r3, #16]


    //4. Confirm that address phase is completed by checking the Address flag in the SR1 reg.
    while(!(pI2C->I2C_SR1 & (1 << 1)));
 8000ba6:	bf00      	nop
 8000ba8:	697b      	ldr	r3, [r7, #20]
 8000baa:	695b      	ldr	r3, [r3, #20]
 8000bac:	f003 0302 	and.w	r3, r3, #2
 8000bb0:	2b00      	cmp	r3, #0
 8000bb2:	d0f9      	beq.n	8000ba8 <i2c_stm32_master_read_data+0x50>

    //5. Clear the Address flag according to its sw sequence
    //NOTE: Until ADDR bit is cleared SCL will be stretched(pulled to LOW)
    volatile uint32_t dummy_read = pI2C->I2C_SR1;
 8000bb4:	697b      	ldr	r3, [r7, #20]
 8000bb6:	695b      	ldr	r3, [r3, #20]
 8000bb8:	60fb      	str	r3, [r7, #12]
    dummy_read          = pI2C->I2C_SR2;
 8000bba:	697b      	ldr	r3, [r7, #20]
 8000bbc:	699b      	ldr	r3, [r3, #24]
 8000bbe:	60fb      	str	r3, [r7, #12]
    (void)dummy_read;
 8000bc0:	68fb      	ldr	r3, [r7, #12]

    //6.Send register address (PWR_MGMT_1 = 0x6B)
    pI2C->I2C_DR = 0x6B;
 8000bc2:	697b      	ldr	r3, [r7, #20]
 8000bc4:	226b      	movs	r2, #107	; 0x6b
 8000bc6:	611a      	str	r2, [r3, #16]
    while (!(pI2C->I2C_SR1 & (1 << 7))); // TXE
 8000bc8:	bf00      	nop
 8000bca:	697b      	ldr	r3, [r7, #20]
 8000bcc:	695b      	ldr	r3, [r3, #20]
 8000bce:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000bd2:	2b00      	cmp	r3, #0
 8000bd4:	d0f9      	beq.n	8000bca <i2c_stm32_master_read_data+0x72>
    while (!(pI2C->I2C_SR1 & (1 << 2))); // BTF
 8000bd6:	bf00      	nop
 8000bd8:	697b      	ldr	r3, [r7, #20]
 8000bda:	695b      	ldr	r3, [r3, #20]
 8000bdc:	f003 0304 	and.w	r3, r3, #4
 8000be0:	2b00      	cmp	r3, #0
 8000be2:	d0f9      	beq.n	8000bd8 <i2c_stm32_master_read_data+0x80>

    //7.Send data 0x00 to wake sensor
    pI2C->I2C_DR = 0x00;
 8000be4:	697b      	ldr	r3, [r7, #20]
 8000be6:	2200      	movs	r2, #0
 8000be8:	611a      	str	r2, [r3, #16]
    while (!(pI2C->I2C_SR1 & (1 << 7)));
 8000bea:	bf00      	nop
 8000bec:	697b      	ldr	r3, [r7, #20]
 8000bee:	695b      	ldr	r3, [r3, #20]
 8000bf0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000bf4:	2b00      	cmp	r3, #0
 8000bf6:	d0f9      	beq.n	8000bec <i2c_stm32_master_read_data+0x94>
    while (!(pI2C->I2C_SR1 & (1 << 2)));
 8000bf8:	bf00      	nop
 8000bfa:	697b      	ldr	r3, [r7, #20]
 8000bfc:	695b      	ldr	r3, [r3, #20]
 8000bfe:	f003 0304 	and.w	r3, r3, #4
 8000c02:	2b00      	cmp	r3, #0
 8000c04:	d0f9      	beq.n	8000bfa <i2c_stm32_master_read_data+0xa2>

    //8.STOP condition after wake-up write
    pI2C->I2C_CR1 |= (1 << 9);
 8000c06:	697b      	ldr	r3, [r7, #20]
 8000c08:	681b      	ldr	r3, [r3, #0]
 8000c0a:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8000c0e:	697b      	ldr	r3, [r7, #20]
 8000c10:	601a      	str	r2, [r3, #0]

    //9.Small delay to ensure wake-up
    for(volatile int i = 0; i < 10000; i++){}
 8000c12:	2300      	movs	r3, #0
 8000c14:	60bb      	str	r3, [r7, #8]
 8000c16:	e002      	b.n	8000c1e <i2c_stm32_master_read_data+0xc6>
 8000c18:	68bb      	ldr	r3, [r7, #8]
 8000c1a:	3301      	adds	r3, #1
 8000c1c:	60bb      	str	r3, [r7, #8]
 8000c1e:	68bb      	ldr	r3, [r7, #8]
 8000c20:	f242 720f 	movw	r2, #9999	; 0x270f
 8000c24:	4293      	cmp	r3, r2
 8000c26:	ddf7      	ble.n	8000c18 <i2c_stm32_master_read_data+0xc0>


    // ========== READ SENSOR DATA ==========
	//10.START condition
	pI2C->I2C_CR1 |= (1 << 8);
 8000c28:	697b      	ldr	r3, [r7, #20]
 8000c2a:	681b      	ldr	r3, [r3, #0]
 8000c2c:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8000c30:	697b      	ldr	r3, [r7, #20]
 8000c32:	601a      	str	r2, [r3, #0]
	while (!(pI2C->I2C_SR1 & (1 << 0)));
 8000c34:	bf00      	nop
 8000c36:	697b      	ldr	r3, [r7, #20]
 8000c38:	695b      	ldr	r3, [r3, #20]
 8000c3a:	f003 0301 	and.w	r3, r3, #1
 8000c3e:	2b00      	cmp	r3, #0
 8000c40:	d0f9      	beq.n	8000c36 <i2c_stm32_master_read_data+0xde>

	//11.Send slave address (write mode)
	pI2C->I2C_DR = slave_write;
 8000c42:	7cba      	ldrb	r2, [r7, #18]
 8000c44:	697b      	ldr	r3, [r7, #20]
 8000c46:	611a      	str	r2, [r3, #16]
	while (!(pI2C->I2C_SR1 & (1 << 1)));
 8000c48:	bf00      	nop
 8000c4a:	697b      	ldr	r3, [r7, #20]
 8000c4c:	695b      	ldr	r3, [r3, #20]
 8000c4e:	f003 0302 	and.w	r3, r3, #2
 8000c52:	2b00      	cmp	r3, #0
 8000c54:	d0f9      	beq.n	8000c4a <i2c_stm32_master_read_data+0xf2>
	dummy_read = pI2C->I2C_SR1;
 8000c56:	697b      	ldr	r3, [r7, #20]
 8000c58:	695b      	ldr	r3, [r3, #20]
 8000c5a:	60fb      	str	r3, [r7, #12]
	dummy_read = pI2C->I2C_SR2;
 8000c5c:	697b      	ldr	r3, [r7, #20]
 8000c5e:	699b      	ldr	r3, [r3, #24]
 8000c60:	60fb      	str	r3, [r7, #12]

    //12.Send the register address.
    pI2C->I2C_DR = read_reg_addr; //0x3B;
 8000c62:	79ba      	ldrb	r2, [r7, #6]
 8000c64:	697b      	ldr	r3, [r7, #20]
 8000c66:	611a      	str	r2, [r3, #16]

    //13. When len becomes zero,wait for TXE=1 and BTF=1 before generting the STOP condition
    // NOTE: TXE=1,BTF=1 ,means that both SR and DR becomes empty and next transmission should begin
    // When BTF=1 SCL will be stretched(pulled to low)
    while(!(pI2C->I2C_SR1 & (1 << 7)));
 8000c68:	bf00      	nop
 8000c6a:	697b      	ldr	r3, [r7, #20]
 8000c6c:	695b      	ldr	r3, [r3, #20]
 8000c6e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000c72:	2b00      	cmp	r3, #0
 8000c74:	d0f9      	beq.n	8000c6a <i2c_stm32_master_read_data+0x112>
    while(!(pI2C->I2C_SR1 & (1 << 2)));
 8000c76:	bf00      	nop
 8000c78:	697b      	ldr	r3, [r7, #20]
 8000c7a:	695b      	ldr	r3, [r3, #20]
 8000c7c:	f003 0304 	and.w	r3, r3, #4
 8000c80:	2b00      	cmp	r3, #0
 8000c82:	d0f9      	beq.n	8000c78 <i2c_stm32_master_read_data+0x120>

    //14. Generate Repeated START condition
    pI2C->I2C_CR1 |= (1 << 8);
 8000c84:	697b      	ldr	r3, [r7, #20]
 8000c86:	681b      	ldr	r3, [r3, #0]
 8000c88:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8000c8c:	697b      	ldr	r3, [r7, #20]
 8000c8e:	601a      	str	r2, [r3, #0]

    //15. Confirm that Repeat START generation is completed by checking the "SB" flag in the SR1 register.
    //NOTE: Until SB is cleared SCL will be stretched(pulled to LOW).
    while(!(pI2C->I2C_SR1 & (1 << 0)));
 8000c90:	bf00      	nop
 8000c92:	697b      	ldr	r3, [r7, #20]
 8000c94:	695b      	ldr	r3, [r3, #20]
 8000c96:	f003 0301 	and.w	r3, r3, #1
 8000c9a:	2b00      	cmp	r3, #0
 8000c9c:	d0f9      	beq.n	8000c92 <i2c_stm32_master_read_data+0x13a>

    //16. Send the SLAVE Address with r/w bit set to R(1) (total 8 bits)
    // 7-bit MPU6050 address
    slave_read  = slave_address << 1; // shift left to make room for R/W bit
 8000c9e:	7cfb      	ldrb	r3, [r7, #19]
 8000ca0:	005b      	lsls	r3, r3, #1
 8000ca2:	747b      	strb	r3, [r7, #17]
    slave_read  |= 0x1;              // set bit0 → read mode (R/W = 1)
 8000ca4:	7c7b      	ldrb	r3, [r7, #17]
 8000ca6:	f043 0301 	orr.w	r3, r3, #1
 8000caa:	747b      	strb	r3, [r7, #17]
    pI2C->I2C_DR   = slave_read;      // send address
 8000cac:	7c7a      	ldrb	r2, [r7, #17]
 8000cae:	697b      	ldr	r3, [r7, #20]
 8000cb0:	611a      	str	r2, [r3, #16]

    //17. Confirm that address phase is completed by checking the Address flag in the SR1 reg.
    while(!(pI2C->I2C_SR1 & (1 << 1)));
 8000cb2:	bf00      	nop
 8000cb4:	697b      	ldr	r3, [r7, #20]
 8000cb6:	695b      	ldr	r3, [r3, #20]
 8000cb8:	f003 0302 	and.w	r3, r3, #2
 8000cbc:	2b00      	cmp	r3, #0
 8000cbe:	d0f9      	beq.n	8000cb4 <i2c_stm32_master_read_data+0x15c>

    //18. Disable ACK (for single byte read)
    pI2C->I2C_CR1 &= ~(1 << 10);
 8000cc0:	697b      	ldr	r3, [r7, #20]
 8000cc2:	681b      	ldr	r3, [r3, #0]
 8000cc4:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8000cc8:	697b      	ldr	r3, [r7, #20]
 8000cca:	601a      	str	r2, [r3, #0]
    (void)pI2C->I2C_SR1;
 8000ccc:	697b      	ldr	r3, [r7, #20]
 8000cce:	695b      	ldr	r3, [r3, #20]
    (void)pI2C->I2C_SR2;
 8000cd0:	697b      	ldr	r3, [r7, #20]
 8000cd2:	699b      	ldr	r3, [r3, #24]


    //19. Generate STOP condition and master need not wait for the completion of STOP condition.
    //NOTE: generating STOP,automatically clears BTF
    pI2C->I2C_CR1 |= (1 << 9);
 8000cd4:	697b      	ldr	r3, [r7, #20]
 8000cd6:	681b      	ldr	r3, [r3, #0]
 8000cd8:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8000cdc:	697b      	ldr	r3, [r7, #20]
 8000cde:	601a      	str	r2, [r3, #0]

    //20. Wait for RXNE flag
    while(!(pI2C->I2C_SR1 & (1 << 6)));
 8000ce0:	bf00      	nop
 8000ce2:	697b      	ldr	r3, [r7, #20]
 8000ce4:	695b      	ldr	r3, [r3, #20]
 8000ce6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000cea:	2b00      	cmp	r3, #0
 8000cec:	d0f9      	beq.n	8000ce2 <i2c_stm32_master_read_data+0x18a>

    //21. Read data
    sensor_data = pI2C->I2C_DR;
 8000cee:	697b      	ldr	r3, [r7, #20]
 8000cf0:	691b      	ldr	r3, [r3, #16]
 8000cf2:	743b      	strb	r3, [r7, #16]

    return sensor_data;
 8000cf4:	7c3b      	ldrb	r3, [r7, #16]

}
 8000cf6:	4618      	mov	r0, r3
 8000cf8:	371c      	adds	r7, #28
 8000cfa:	46bd      	mov	sp, r7
 8000cfc:	bc80      	pop	{r7}
 8000cfe:	4770      	bx	lr
 8000d00:	40005400 	.word	0x40005400

08000d04 <I2C1_EV_IRQHandler>:
	NVIC_ISER0 |= (1 << 31);
}

/*API to handle I2C1 event related interrupts - MCAL*/
void I2C1_EV_IRQHandler()
{
 8000d04:	b580      	push	{r7, lr}
 8000d06:	af00      	add	r7, sp, #0
	usart_send_string(pUsart22, "I2c1 interrupt");
 8000d08:	4b03      	ldr	r3, [pc, #12]	; (8000d18 <I2C1_EV_IRQHandler+0x14>)
 8000d0a:	681b      	ldr	r3, [r3, #0]
 8000d0c:	4903      	ldr	r1, [pc, #12]	; (8000d1c <I2C1_EV_IRQHandler+0x18>)
 8000d0e:	4618      	mov	r0, r3
 8000d10:	f7ff fd4a 	bl	80007a8 <usart_send_string>
}
 8000d14:	bf00      	nop
 8000d16:	bd80      	pop	{r7, pc}
 8000d18:	20000084 	.word	0x20000084
 8000d1c:	08002550 	.word	0x08002550

08000d20 <get_pclk_value>:
uint16_t ahbp_array[8]  = {2,4,8,16,64,128,256,512};
uint8_t apb1p_array[4] = {2,4,8,16};

/*API to fetch and calculate peripheral clock speed*/
uint32_t get_pclk_value(void)
{
 8000d20:	b580      	push	{r7, lr}
 8000d22:	b084      	sub	sp, #16
 8000d24:	af00      	add	r7, sp, #0
	uint32_t pclk,system_clock;
	uint8_t clksrc,temp_ahb,ahbp,temp_apb1,apb1p;
	clksrc = ((RCC->CFGR >> 2) & 0x3);
 8000d26:	4b25      	ldr	r3, [pc, #148]	; (8000dbc <get_pclk_value+0x9c>)
 8000d28:	689b      	ldr	r3, [r3, #8]
 8000d2a:	089b      	lsrs	r3, r3, #2
 8000d2c:	b2db      	uxtb	r3, r3
 8000d2e:	f003 0303 	and.w	r3, r3, #3
 8000d32:	727b      	strb	r3, [r7, #9]

	if(clksrc == 0)
 8000d34:	7a7b      	ldrb	r3, [r7, #9]
 8000d36:	2b00      	cmp	r3, #0
 8000d38:	d102      	bne.n	8000d40 <get_pclk_value+0x20>
	{
		system_clock = 16000000;
 8000d3a:	4b21      	ldr	r3, [pc, #132]	; (8000dc0 <get_pclk_value+0xa0>)
 8000d3c:	60fb      	str	r3, [r7, #12]
 8000d3e:	e00a      	b.n	8000d56 <get_pclk_value+0x36>
	}
	else if(clksrc == 1)
 8000d40:	7a7b      	ldrb	r3, [r7, #9]
 8000d42:	2b01      	cmp	r3, #1
 8000d44:	d102      	bne.n	8000d4c <get_pclk_value+0x2c>
	{
		system_clock = 8000000; //why?
 8000d46:	4b1f      	ldr	r3, [pc, #124]	; (8000dc4 <get_pclk_value+0xa4>)
 8000d48:	60fb      	str	r3, [r7, #12]
 8000d4a:	e004      	b.n	8000d56 <get_pclk_value+0x36>
	}
	else if(clksrc == 2)
 8000d4c:	7a7b      	ldrb	r3, [r7, #9]
 8000d4e:	2b02      	cmp	r3, #2
 8000d50:	d101      	bne.n	8000d56 <get_pclk_value+0x36>
	{
		RCC_GetPLL_Output_Clk();
 8000d52:	f000 f83d 	bl	8000dd0 <RCC_GetPLL_Output_Clk>
	}

    /*AHB pre-scalar*/
	temp_ahb = ((RCC->CFGR >> 4) & 0xF);
 8000d56:	4b19      	ldr	r3, [pc, #100]	; (8000dbc <get_pclk_value+0x9c>)
 8000d58:	689b      	ldr	r3, [r3, #8]
 8000d5a:	091b      	lsrs	r3, r3, #4
 8000d5c:	b2db      	uxtb	r3, r3
 8000d5e:	f003 030f 	and.w	r3, r3, #15
 8000d62:	723b      	strb	r3, [r7, #8]
	if(temp_ahb < 8)
 8000d64:	7a3b      	ldrb	r3, [r7, #8]
 8000d66:	2b07      	cmp	r3, #7
 8000d68:	d802      	bhi.n	8000d70 <get_pclk_value+0x50>
	{
		ahbp = 1;
 8000d6a:	2301      	movs	r3, #1
 8000d6c:	72fb      	strb	r3, [r7, #11]
 8000d6e:	e005      	b.n	8000d7c <get_pclk_value+0x5c>
	}
	else
	{
		ahbp = ahbp_array[temp_ahb-8];
 8000d70:	7a3b      	ldrb	r3, [r7, #8]
 8000d72:	3b08      	subs	r3, #8
 8000d74:	4a14      	ldr	r2, [pc, #80]	; (8000dc8 <get_pclk_value+0xa8>)
 8000d76:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000d7a:	72fb      	strb	r3, [r7, #11]
	}

	/*APB1 Pre-Scalar */
	temp_apb1 = ((RCC->CFGR >> 10) & 0x7);
 8000d7c:	4b0f      	ldr	r3, [pc, #60]	; (8000dbc <get_pclk_value+0x9c>)
 8000d7e:	689b      	ldr	r3, [r3, #8]
 8000d80:	0a9b      	lsrs	r3, r3, #10
 8000d82:	b2db      	uxtb	r3, r3
 8000d84:	f003 0307 	and.w	r3, r3, #7
 8000d88:	71fb      	strb	r3, [r7, #7]
	if(temp_apb1 < 4)
 8000d8a:	79fb      	ldrb	r3, [r7, #7]
 8000d8c:	2b03      	cmp	r3, #3
 8000d8e:	d802      	bhi.n	8000d96 <get_pclk_value+0x76>
	{
		apb1p = 1;
 8000d90:	2301      	movs	r3, #1
 8000d92:	72bb      	strb	r3, [r7, #10]
 8000d94:	e004      	b.n	8000da0 <get_pclk_value+0x80>
	}
	else
	{
		apb1p = apb1p_array[temp_apb1-4];
 8000d96:	79fb      	ldrb	r3, [r7, #7]
 8000d98:	3b04      	subs	r3, #4
 8000d9a:	4a0c      	ldr	r2, [pc, #48]	; (8000dcc <get_pclk_value+0xac>)
 8000d9c:	5cd3      	ldrb	r3, [r2, r3]
 8000d9e:	72bb      	strb	r3, [r7, #10]
	}

	pclk = ((system_clock/ahbp))/apb1p;
 8000da0:	7afb      	ldrb	r3, [r7, #11]
 8000da2:	68fa      	ldr	r2, [r7, #12]
 8000da4:	fbb2 f2f3 	udiv	r2, r2, r3
 8000da8:	7abb      	ldrb	r3, [r7, #10]
 8000daa:	fbb2 f3f3 	udiv	r3, r2, r3
 8000dae:	603b      	str	r3, [r7, #0]
	return pclk;
 8000db0:	683b      	ldr	r3, [r7, #0]

}
 8000db2:	4618      	mov	r0, r3
 8000db4:	3710      	adds	r7, #16
 8000db6:	46bd      	mov	sp, r7
 8000db8:	bd80      	pop	{r7, pc}
 8000dba:	bf00      	nop
 8000dbc:	40023800 	.word	0x40023800
 8000dc0:	00f42400 	.word	0x00f42400
 8000dc4:	007a1200 	.word	0x007a1200
 8000dc8:	20000088 	.word	0x20000088
 8000dcc:	20000098 	.word	0x20000098

08000dd0 <RCC_GetPLL_Output_Clk>:

void RCC_GetPLL_Output_Clk(void)
{
 8000dd0:	b480      	push	{r7}
 8000dd2:	af00      	add	r7, sp, #0
	//ToDo
	return;
 8000dd4:	bf00      	nop
}
 8000dd6:	46bd      	mov	sp, r7
 8000dd8:	bc80      	pop	{r7}
 8000dda:	4770      	bx	lr

08000ddc <spi_stm32_init>:

uint8_t spi_frame = 0;

/* API to handle stm32 SPI2 initializations - MCAL */
void spi_stm32_init()
{
 8000ddc:	b580      	push	{r7, lr}
 8000dde:	b082      	sub	sp, #8
 8000de0:	af00      	add	r7, sp, #0

	/* SPI peripheral clock enable */
    SPI2_CLK_EN();
 8000de2:	4b32      	ldr	r3, [pc, #200]	; (8000eac <spi_stm32_init+0xd0>)
 8000de4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000de6:	4a31      	ldr	r2, [pc, #196]	; (8000eac <spi_stm32_init+0xd0>)
 8000de8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000dec:	6413      	str	r3, [r2, #64]	; 0x40

    /*Pointer initialization*/
    SPI_RegDef_Struct* pSpi2 = SPI2;
 8000dee:	4b30      	ldr	r3, [pc, #192]	; (8000eb0 <spi_stm32_init+0xd4>)
 8000df0:	607b      	str	r3, [r7, #4]

	/*SPI CR1 register configuration */
    pSpi2->SPI_CR1 = 0;
 8000df2:	687b      	ldr	r3, [r7, #4]
 8000df4:	2200      	movs	r2, #0
 8000df6:	601a      	str	r2, [r3, #0]
    /* Peripheral disable configuration */
    pSpi2->SPI_CR1 &= ~(1<<6);
 8000df8:	687b      	ldr	r3, [r7, #4]
 8000dfa:	681b      	ldr	r3, [r3, #0]
 8000dfc:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 8000e00:	687b      	ldr	r3, [r7, #4]
 8000e02:	601a      	str	r2, [r3, #0]

    /* CPHA configuration */
    pSpi2->SPI_CR1 &= ~(1<<0);
 8000e04:	687b      	ldr	r3, [r7, #4]
 8000e06:	681b      	ldr	r3, [r3, #0]
 8000e08:	f023 0201 	bic.w	r2, r3, #1
 8000e0c:	687b      	ldr	r3, [r7, #4]
 8000e0e:	601a      	str	r2, [r3, #0]

    /*CPOL configuration */
    pSpi2->SPI_CR1 &= ~(1<<1);
 8000e10:	687b      	ldr	r3, [r7, #4]
 8000e12:	681b      	ldr	r3, [r3, #0]
 8000e14:	f023 0202 	bic.w	r2, r3, #2
 8000e18:	687b      	ldr	r3, [r7, #4]
 8000e1a:	601a      	str	r2, [r3, #0]

    /*MASTER mode configuration*/
    pSpi2->SPI_CR1 &= ~(1<<2);
 8000e1c:	687b      	ldr	r3, [r7, #4]
 8000e1e:	681b      	ldr	r3, [r3, #0]
 8000e20:	f023 0204 	bic.w	r2, r3, #4
 8000e24:	687b      	ldr	r3, [r7, #4]
 8000e26:	601a      	str	r2, [r3, #0]
    pSpi2->SPI_CR1 |=  (1<<2);
 8000e28:	687b      	ldr	r3, [r7, #4]
 8000e2a:	681b      	ldr	r3, [r3, #0]
 8000e2c:	f043 0204 	orr.w	r2, r3, #4
 8000e30:	687b      	ldr	r3, [r7, #4]
 8000e32:	601a      	str	r2, [r3, #0]

    /* Baud rate configuration */
    pSpi2->SPI_CR1 &= ~(7<<3);
 8000e34:	687b      	ldr	r3, [r7, #4]
 8000e36:	681b      	ldr	r3, [r3, #0]
 8000e38:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 8000e3c:	687b      	ldr	r3, [r7, #4]
 8000e3e:	601a      	str	r2, [r3, #0]
    pSpi2->SPI_CR1 |=  (4<<3);
 8000e40:	687b      	ldr	r3, [r7, #4]
 8000e42:	681b      	ldr	r3, [r3, #0]
 8000e44:	f043 0220 	orr.w	r2, r3, #32
 8000e48:	687b      	ldr	r3, [r7, #4]
 8000e4a:	601a      	str	r2, [r3, #0]

    /*SW slave management */
    pSpi2->SPI_CR1 &= ~(1<<9);
 8000e4c:	687b      	ldr	r3, [r7, #4]
 8000e4e:	681b      	ldr	r3, [r3, #0]
 8000e50:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8000e54:	687b      	ldr	r3, [r7, #4]
 8000e56:	601a      	str	r2, [r3, #0]
    pSpi2->SPI_CR1 |=  (1<<9);
 8000e58:	687b      	ldr	r3, [r7, #4]
 8000e5a:	681b      	ldr	r3, [r3, #0]
 8000e5c:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8000e60:	687b      	ldr	r3, [r7, #4]
 8000e62:	601a      	str	r2, [r3, #0]

    /* Internal slave select */
    pSpi2->SPI_CR1 &= ~(1<<8);
 8000e64:	687b      	ldr	r3, [r7, #4]
 8000e66:	681b      	ldr	r3, [r3, #0]
 8000e68:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8000e6c:	687b      	ldr	r3, [r7, #4]
 8000e6e:	601a      	str	r2, [r3, #0]
    pSpi2->SPI_CR1 |=  (1<<8);
 8000e70:	687b      	ldr	r3, [r7, #4]
 8000e72:	681b      	ldr	r3, [r3, #0]
 8000e74:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8000e78:	687b      	ldr	r3, [r7, #4]
 8000e7a:	601a      	str	r2, [r3, #0]

    /* RX interrupt configuration SPI_CR2 */
    pSpi2->SPI_CR2 &= ~(1<<6);
 8000e7c:	687b      	ldr	r3, [r7, #4]
 8000e7e:	685b      	ldr	r3, [r3, #4]
 8000e80:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 8000e84:	687b      	ldr	r3, [r7, #4]
 8000e86:	605a      	str	r2, [r3, #4]
    pSpi2->SPI_CR2 |=  (1<<6);
 8000e88:	687b      	ldr	r3, [r7, #4]
 8000e8a:	685b      	ldr	r3, [r3, #4]
 8000e8c:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8000e90:	687b      	ldr	r3, [r7, #4]
 8000e92:	605a      	str	r2, [r3, #4]

    /* Peripheral enable configuration */
    pSpi2->SPI_CR1 |=  (1<<6);
 8000e94:	687b      	ldr	r3, [r7, #4]
 8000e96:	681b      	ldr	r3, [r3, #0]
 8000e98:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8000e9c:	687b      	ldr	r3, [r7, #4]
 8000e9e:	601a      	str	r2, [r3, #0]

    spi2_irq_enable();
 8000ea0:	f000 f862 	bl	8000f68 <spi2_irq_enable>

}
 8000ea4:	bf00      	nop
 8000ea6:	3708      	adds	r7, #8
 8000ea8:	46bd      	mov	sp, r7
 8000eaa:	bd80      	pop	{r7, pc}
 8000eac:	40023800 	.word	0x40023800
 8000eb0:	40003800 	.word	0x40003800

08000eb4 <spi_stm32_send_frame>:

/* API to transmit 8bits TX loop back frame - MCAL */
void spi_stm32_send_frame(uint8_t* pSpi_Frame, SPI_RegDef_Struct* pSpi2)
{
 8000eb4:	b580      	push	{r7, lr}
 8000eb6:	b084      	sub	sp, #16
 8000eb8:	af00      	add	r7, sp, #0
 8000eba:	6078      	str	r0, [r7, #4]
 8000ebc:	6039      	str	r1, [r7, #0]
	spi_frame = 0;
 8000ebe:	4b26      	ldr	r3, [pc, #152]	; (8000f58 <spi_stm32_send_frame+0xa4>)
 8000ec0:	2200      	movs	r2, #0
 8000ec2:	701a      	strb	r2, [r3, #0]

	for(uint8_t i=0; i < 8;i++)
 8000ec4:	2300      	movs	r3, #0
 8000ec6:	73fb      	strb	r3, [r7, #15]
 8000ec8:	e016      	b.n	8000ef8 <spi_stm32_send_frame+0x44>
     {
		spi_frame |= ((pSpi_Frame[i] & 1) << (7-i)); //MSB is transmitted first
 8000eca:	7bfb      	ldrb	r3, [r7, #15]
 8000ecc:	687a      	ldr	r2, [r7, #4]
 8000ece:	4413      	add	r3, r2
 8000ed0:	781b      	ldrb	r3, [r3, #0]
 8000ed2:	f003 0201 	and.w	r2, r3, #1
 8000ed6:	7bfb      	ldrb	r3, [r7, #15]
 8000ed8:	f1c3 0307 	rsb	r3, r3, #7
 8000edc:	fa02 f303 	lsl.w	r3, r2, r3
 8000ee0:	b25a      	sxtb	r2, r3
 8000ee2:	4b1d      	ldr	r3, [pc, #116]	; (8000f58 <spi_stm32_send_frame+0xa4>)
 8000ee4:	781b      	ldrb	r3, [r3, #0]
 8000ee6:	b25b      	sxtb	r3, r3
 8000ee8:	4313      	orrs	r3, r2
 8000eea:	b25b      	sxtb	r3, r3
 8000eec:	b2da      	uxtb	r2, r3
 8000eee:	4b1a      	ldr	r3, [pc, #104]	; (8000f58 <spi_stm32_send_frame+0xa4>)
 8000ef0:	701a      	strb	r2, [r3, #0]
	for(uint8_t i=0; i < 8;i++)
 8000ef2:	7bfb      	ldrb	r3, [r7, #15]
 8000ef4:	3301      	adds	r3, #1
 8000ef6:	73fb      	strb	r3, [r7, #15]
 8000ef8:	7bfb      	ldrb	r3, [r7, #15]
 8000efa:	2b07      	cmp	r3, #7
 8000efc:	d9e5      	bls.n	8000eca <spi_stm32_send_frame+0x16>
     }

    usart_send_string(pUsart2, "TX: ");
 8000efe:	4b17      	ldr	r3, [pc, #92]	; (8000f5c <spi_stm32_send_frame+0xa8>)
 8000f00:	681b      	ldr	r3, [r3, #0]
 8000f02:	4917      	ldr	r1, [pc, #92]	; (8000f60 <spi_stm32_send_frame+0xac>)
 8000f04:	4618      	mov	r0, r3
 8000f06:	f7ff fc4f 	bl	80007a8 <usart_send_string>
	usart_send_hex(pUsart2, (uint32_t)spi_frame);
 8000f0a:	4b14      	ldr	r3, [pc, #80]	; (8000f5c <spi_stm32_send_frame+0xa8>)
 8000f0c:	681b      	ldr	r3, [r3, #0]
 8000f0e:	4a12      	ldr	r2, [pc, #72]	; (8000f58 <spi_stm32_send_frame+0xa4>)
 8000f10:	7812      	ldrb	r2, [r2, #0]
 8000f12:	4611      	mov	r1, r2
 8000f14:	4618      	mov	r0, r3
 8000f16:	f7ff fc54 	bl	80007c2 <usart_send_hex>
	usart_send_string(pUsart2, "   ");
 8000f1a:	4b10      	ldr	r3, [pc, #64]	; (8000f5c <spi_stm32_send_frame+0xa8>)
 8000f1c:	681b      	ldr	r3, [r3, #0]
 8000f1e:	4911      	ldr	r1, [pc, #68]	; (8000f64 <spi_stm32_send_frame+0xb0>)
 8000f20:	4618      	mov	r0, r3
 8000f22:	f7ff fc41 	bl	80007a8 <usart_send_string>

	while(!(pSpi2->SPI_SR & (1<<1))); //Wait till TXE flag is set to make sure TX buffer is empty.
 8000f26:	bf00      	nop
 8000f28:	683b      	ldr	r3, [r7, #0]
 8000f2a:	689b      	ldr	r3, [r3, #8]
 8000f2c:	f003 0302 	and.w	r3, r3, #2
 8000f30:	2b00      	cmp	r3, #0
 8000f32:	d0f9      	beq.n	8000f28 <spi_stm32_send_frame+0x74>
	pSpi2->SPI_DR = spi_frame;
 8000f34:	4b08      	ldr	r3, [pc, #32]	; (8000f58 <spi_stm32_send_frame+0xa4>)
 8000f36:	781b      	ldrb	r3, [r3, #0]
 8000f38:	461a      	mov	r2, r3
 8000f3a:	683b      	ldr	r3, [r7, #0]
 8000f3c:	60da      	str	r2, [r3, #12]
	while(pSpi2->SPI_SR & (1<<7)); //Wait till Busy flag is cleared to make sure SPI communication is not busy.
 8000f3e:	bf00      	nop
 8000f40:	683b      	ldr	r3, [r7, #0]
 8000f42:	689b      	ldr	r3, [r3, #8]
 8000f44:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000f48:	2b00      	cmp	r3, #0
 8000f4a:	d1f9      	bne.n	8000f40 <spi_stm32_send_frame+0x8c>
}
 8000f4c:	bf00      	nop
 8000f4e:	bf00      	nop
 8000f50:	3710      	adds	r7, #16
 8000f52:	46bd      	mov	sp, r7
 8000f54:	bd80      	pop	{r7, pc}
 8000f56:	bf00      	nop
 8000f58:	20000374 	.word	0x20000374
 8000f5c:	2000009c 	.word	0x2000009c
 8000f60:	08002560 	.word	0x08002560
 8000f64:	08002568 	.word	0x08002568

08000f68 <spi2_irq_enable>:

/* API to enable IrQ for SPI2 in ISER1 - MCAL */
void spi2_irq_enable()
{
 8000f68:	b480      	push	{r7}
 8000f6a:	af00      	add	r7, sp, #0
	NVIC_ISER1 |= (1<<(36-32)); //Enable SPI2 interrupt (irq=36)
 8000f6c:	4b04      	ldr	r3, [pc, #16]	; (8000f80 <spi2_irq_enable+0x18>)
 8000f6e:	681b      	ldr	r3, [r3, #0]
 8000f70:	4a03      	ldr	r2, [pc, #12]	; (8000f80 <spi2_irq_enable+0x18>)
 8000f72:	f043 0310 	orr.w	r3, r3, #16
 8000f76:	6013      	str	r3, [r2, #0]
}
 8000f78:	bf00      	nop
 8000f7a:	46bd      	mov	sp, r7
 8000f7c:	bc80      	pop	{r7}
 8000f7e:	4770      	bx	lr
 8000f80:	e000e104 	.word	0xe000e104

08000f84 <SPI2_IRQHandler>:

/* API to handle SPI2 RX interrupts - MCAL */
void SPI2_IRQHandler()
{
 8000f84:	b580      	push	{r7, lr}
 8000f86:	b084      	sub	sp, #16
 8000f88:	af00      	add	r7, sp, #0
	bool flag = false;
 8000f8a:	2300      	movs	r3, #0
 8000f8c:	73fb      	strb	r3, [r7, #15]
	SPI_RegDef_Struct* pSPI2 = SPI2;
 8000f8e:	4b0f      	ldr	r3, [pc, #60]	; (8000fcc <SPI2_IRQHandler+0x48>)
 8000f90:	60bb      	str	r3, [r7, #8]
	if(pSPI2->SPI_SR & (1<<0))
 8000f92:	68bb      	ldr	r3, [r7, #8]
 8000f94:	689b      	ldr	r3, [r3, #8]
 8000f96:	f003 0301 	and.w	r3, r3, #1
 8000f9a:	2b00      	cmp	r3, #0
 8000f9c:	d009      	beq.n	8000fb2 <SPI2_IRQHandler+0x2e>
	{
	 uint8_t spi_frame_8 = (uint8_t)pSPI2->SPI_DR;
 8000f9e:	68bb      	ldr	r3, [r7, #8]
 8000fa0:	68db      	ldr	r3, [r3, #12]
 8000fa2:	71fb      	strb	r3, [r7, #7]
     flag = cb_push(&circ_buffer,spi_frame_8);
 8000fa4:	79fb      	ldrb	r3, [r7, #7]
 8000fa6:	4619      	mov	r1, r3
 8000fa8:	4809      	ldr	r0, [pc, #36]	; (8000fd0 <SPI2_IRQHandler+0x4c>)
 8000faa:	f7ff f972 	bl	8000292 <cb_push>
 8000fae:	4603      	mov	r3, r0
 8000fb0:	73fb      	strb	r3, [r7, #15]
	}
	if(flag == true)
 8000fb2:	7bfb      	ldrb	r3, [r7, #15]
 8000fb4:	2b00      	cmp	r3, #0
 8000fb6:	d004      	beq.n	8000fc2 <SPI2_IRQHandler+0x3e>
	{
      log_data(spi_frame); //to log the data stored in the circular buffer
 8000fb8:	4b06      	ldr	r3, [pc, #24]	; (8000fd4 <SPI2_IRQHandler+0x50>)
 8000fba:	781b      	ldrb	r3, [r3, #0]
 8000fbc:	4618      	mov	r0, r3
 8000fbe:	f7ff fa8f 	bl	80004e0 <log_data>
	}
}
 8000fc2:	bf00      	nop
 8000fc4:	3710      	adds	r7, #16
 8000fc6:	46bd      	mov	sp, r7
 8000fc8:	bd80      	pop	{r7, pc}
 8000fca:	bf00      	nop
 8000fcc:	40003800 	.word	0x40003800
 8000fd0:	20000118 	.word	0x20000118
 8000fd4:	20000374 	.word	0x20000374

08000fd8 <usart_stm32_init>:

volatile char usart_command = 0;

/* API to handle the stm32 usart2 initialization - MCAL */
void usart_stm32_init()
{
 8000fd8:	b580      	push	{r7, lr}
 8000fda:	b082      	sub	sp, #8
 8000fdc:	af00      	add	r7, sp, #0
	    USART2_CLK_EN();
 8000fde:	4b20      	ldr	r3, [pc, #128]	; (8001060 <usart_stm32_init+0x88>)
 8000fe0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fe2:	4a1f      	ldr	r2, [pc, #124]	; (8001060 <usart_stm32_init+0x88>)
 8000fe4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000fe8:	6413      	str	r3, [r2, #64]	; 0x40

		enable_usart2_irq();//To Enable USART2 interrupt in NVIC_ISER1
 8000fea:	f000 f90b 	bl	8001204 <enable_usart2_irq>

		USART_RegDef_Struct* pUsart = USART2;
 8000fee:	4b1d      	ldr	r3, [pc, #116]	; (8001064 <usart_stm32_init+0x8c>)
 8000ff0:	607b      	str	r3, [r7, #4]

		/*Setting up CR1 register */

		pUsart->USART_CR1 &= ~(1U<<13);//clearing UE bit in CR1
 8000ff2:	687b      	ldr	r3, [r7, #4]
 8000ff4:	68db      	ldr	r3, [r3, #12]
 8000ff6:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8000ffa:	687b      	ldr	r3, [r7, #4]
 8000ffc:	60da      	str	r2, [r3, #12]
		usart_set_baudrate(pUsart);
 8000ffe:	6878      	ldr	r0, [r7, #4]
 8001000:	f000 f832 	bl	8001068 <usart_set_baudrate>


		pUsart->USART_CR1 &= ~(1U<<2);//clearing RE bit in CR1
 8001004:	687b      	ldr	r3, [r7, #4]
 8001006:	68db      	ldr	r3, [r3, #12]
 8001008:	f023 0204 	bic.w	r2, r3, #4
 800100c:	687b      	ldr	r3, [r7, #4]
 800100e:	60da      	str	r2, [r3, #12]
		pUsart->USART_CR1 |=  (1U<<2);//setting up RE bit in CR1
 8001010:	687b      	ldr	r3, [r7, #4]
 8001012:	68db      	ldr	r3, [r3, #12]
 8001014:	f043 0204 	orr.w	r2, r3, #4
 8001018:	687b      	ldr	r3, [r7, #4]
 800101a:	60da      	str	r2, [r3, #12]

		pUsart->USART_CR1 &= ~(1U<<3);//clearing TE bit in CR1
 800101c:	687b      	ldr	r3, [r7, #4]
 800101e:	68db      	ldr	r3, [r3, #12]
 8001020:	f023 0208 	bic.w	r2, r3, #8
 8001024:	687b      	ldr	r3, [r7, #4]
 8001026:	60da      	str	r2, [r3, #12]
		pUsart->USART_CR1 |=  (1U<<3);//setting up TE bit in CR1
 8001028:	687b      	ldr	r3, [r7, #4]
 800102a:	68db      	ldr	r3, [r3, #12]
 800102c:	f043 0208 	orr.w	r2, r3, #8
 8001030:	687b      	ldr	r3, [r7, #4]
 8001032:	60da      	str	r2, [r3, #12]

		pUsart->USART_CR1 &= ~(1U<<5);//clearing RXNEIE
 8001034:	687b      	ldr	r3, [r7, #4]
 8001036:	68db      	ldr	r3, [r3, #12]
 8001038:	f023 0220 	bic.w	r2, r3, #32
 800103c:	687b      	ldr	r3, [r7, #4]
 800103e:	60da      	str	r2, [r3, #12]
		pUsart->USART_CR1 |=  (1U<<5);//setting RXNEIE bit in CR1
 8001040:	687b      	ldr	r3, [r7, #4]
 8001042:	68db      	ldr	r3, [r3, #12]
 8001044:	f043 0220 	orr.w	r2, r3, #32
 8001048:	687b      	ldr	r3, [r7, #4]
 800104a:	60da      	str	r2, [r3, #12]

		pUsart->USART_CR1 |=  (1U<<13);//setting up UE bit in CR1
 800104c:	687b      	ldr	r3, [r7, #4]
 800104e:	68db      	ldr	r3, [r3, #12]
 8001050:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8001054:	687b      	ldr	r3, [r7, #4]
 8001056:	60da      	str	r2, [r3, #12]

}
 8001058:	bf00      	nop
 800105a:	3708      	adds	r7, #8
 800105c:	46bd      	mov	sp, r7
 800105e:	bd80      	pop	{r7, pc}
 8001060:	40023800 	.word	0x40023800
 8001064:	40004400 	.word	0x40004400

08001068 <usart_set_baudrate>:

/*API to set the baud rate register for USART2 */
void usart_set_baudrate(USART_RegDef_Struct* pUsart2)
{
 8001068:	b580      	push	{r7, lr}
 800106a:	b088      	sub	sp, #32
 800106c:	af00      	add	r7, sp, #0
 800106e:	6078      	str	r0, [r7, #4]
	uint32_t pclkx,usart_div,M_Part,F_Part;
	uint32_t temp_reg = 0;
 8001070:	2300      	movs	r3, #0
 8001072:	617b      	str	r3, [r7, #20]

	/*API call to fetch peripheral clock value*/
	pclkx = get_pclk_value();
 8001074:	f7ff fe54 	bl	8000d20 <get_pclk_value>
 8001078:	6138      	str	r0, [r7, #16]

	if(pUsart2->USART_CR1 & (1<<15))
 800107a:	687b      	ldr	r3, [r7, #4]
 800107c:	68db      	ldr	r3, [r3, #12]
 800107e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001082:	2b00      	cmp	r3, #0
 8001084:	d00b      	beq.n	800109e <usart_set_baudrate+0x36>
	{
		usart_div = (25 * pclkx)/ (2 * 9600);  //floating point math is expensive in embedded systems,so multiplied by 100.
 8001086:	693a      	ldr	r2, [r7, #16]
 8001088:	4613      	mov	r3, r2
 800108a:	009b      	lsls	r3, r3, #2
 800108c:	4413      	add	r3, r2
 800108e:	009a      	lsls	r2, r3, #2
 8001090:	4413      	add	r3, r2
 8001092:	4a24      	ldr	r2, [pc, #144]	; (8001124 <usart_set_baudrate+0xbc>)
 8001094:	fba2 2303 	umull	r2, r3, r2, r3
 8001098:	0adb      	lsrs	r3, r3, #11
 800109a:	61fb      	str	r3, [r7, #28]
 800109c:	e00a      	b.n	80010b4 <usart_set_baudrate+0x4c>
	}
	else
	{
		usart_div = (25 * pclkx)/ (4 * 9600); //floating point math is expensive in embedded systems,so multiplied by 100.
 800109e:	693a      	ldr	r2, [r7, #16]
 80010a0:	4613      	mov	r3, r2
 80010a2:	009b      	lsls	r3, r3, #2
 80010a4:	4413      	add	r3, r2
 80010a6:	009a      	lsls	r2, r3, #2
 80010a8:	4413      	add	r3, r2
 80010aa:	4a1e      	ldr	r2, [pc, #120]	; (8001124 <usart_set_baudrate+0xbc>)
 80010ac:	fba2 2303 	umull	r2, r3, r2, r3
 80010b0:	0b1b      	lsrs	r3, r3, #12
 80010b2:	61fb      	str	r3, [r7, #28]
	}

	/* Calculate mantissa part */
	M_Part = usart_div/100;
 80010b4:	69fb      	ldr	r3, [r7, #28]
 80010b6:	4a1c      	ldr	r2, [pc, #112]	; (8001128 <usart_set_baudrate+0xc0>)
 80010b8:	fba2 2303 	umull	r2, r3, r2, r3
 80010bc:	095b      	lsrs	r3, r3, #5
 80010be:	60fb      	str	r3, [r7, #12]

	temp_reg |= M_Part << 4;
 80010c0:	68fb      	ldr	r3, [r7, #12]
 80010c2:	011b      	lsls	r3, r3, #4
 80010c4:	697a      	ldr	r2, [r7, #20]
 80010c6:	4313      	orrs	r3, r2
 80010c8:	617b      	str	r3, [r7, #20]

	/* Calculate fractional part */
	F_Part = usart_div - (M_Part * 100);
 80010ca:	68fb      	ldr	r3, [r7, #12]
 80010cc:	2264      	movs	r2, #100	; 0x64
 80010ce:	fb02 f303 	mul.w	r3, r2, r3
 80010d2:	69fa      	ldr	r2, [r7, #28]
 80010d4:	1ad3      	subs	r3, r2, r3
 80010d6:	61bb      	str	r3, [r7, #24]

	/* Calculate the final fractional part */
	if(pUsart2->USART_CR1 & (1<< 15))
 80010d8:	687b      	ldr	r3, [r7, #4]
 80010da:	68db      	ldr	r3, [r3, #12]
 80010dc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80010e0:	2b00      	cmp	r3, #0
 80010e2:	d00a      	beq.n	80010fa <usart_set_baudrate+0x92>
	{
		F_Part = (((F_Part * 8) + 50)/100) & (0x7);//adding 50 to get the correct nearest value
 80010e4:	69bb      	ldr	r3, [r7, #24]
 80010e6:	00db      	lsls	r3, r3, #3
 80010e8:	3332      	adds	r3, #50	; 0x32
 80010ea:	4a0f      	ldr	r2, [pc, #60]	; (8001128 <usart_set_baudrate+0xc0>)
 80010ec:	fba2 2303 	umull	r2, r3, r2, r3
 80010f0:	095b      	lsrs	r3, r3, #5
 80010f2:	f003 0307 	and.w	r3, r3, #7
 80010f6:	61bb      	str	r3, [r7, #24]
 80010f8:	e009      	b.n	800110e <usart_set_baudrate+0xa6>
	}
	else
	{
		F_Part = (((F_Part * 16) + 50)/100) & (0x0F);//adding 50 to get the correct nearest value
 80010fa:	69bb      	ldr	r3, [r7, #24]
 80010fc:	011b      	lsls	r3, r3, #4
 80010fe:	3332      	adds	r3, #50	; 0x32
 8001100:	4a09      	ldr	r2, [pc, #36]	; (8001128 <usart_set_baudrate+0xc0>)
 8001102:	fba2 2303 	umull	r2, r3, r2, r3
 8001106:	095b      	lsrs	r3, r3, #5
 8001108:	f003 030f 	and.w	r3, r3, #15
 800110c:	61bb      	str	r3, [r7, #24]
	}
    temp_reg |= F_Part;
 800110e:	697a      	ldr	r2, [r7, #20]
 8001110:	69bb      	ldr	r3, [r7, #24]
 8001112:	4313      	orrs	r3, r2
 8001114:	617b      	str	r3, [r7, #20]

    /* set USART BRR register */
    pUsart2->USART_BRR = temp_reg;
 8001116:	687b      	ldr	r3, [r7, #4]
 8001118:	697a      	ldr	r2, [r7, #20]
 800111a:	609a      	str	r2, [r3, #8]
}
 800111c:	bf00      	nop
 800111e:	3720      	adds	r7, #32
 8001120:	46bd      	mov	sp, r7
 8001122:	bd80      	pop	{r7, pc}
 8001124:	1b4e81b5 	.word	0x1b4e81b5
 8001128:	51eb851f 	.word	0x51eb851f

0800112c <usart_stm32_send_char>:


/*API to handle transmission of a character*/
void usart_stm32_send_char(USART_RegDef_Struct* pUSART,char ch)
{
 800112c:	b480      	push	{r7}
 800112e:	b083      	sub	sp, #12
 8001130:	af00      	add	r7, sp, #0
 8001132:	6078      	str	r0, [r7, #4]
 8001134:	460b      	mov	r3, r1
 8001136:	70fb      	strb	r3, [r7, #3]
	/* wait until TXE flag is set */
	while(!(pUSART->USART_SR & (1 << 7)));
 8001138:	bf00      	nop
 800113a:	687b      	ldr	r3, [r7, #4]
 800113c:	681b      	ldr	r3, [r3, #0]
 800113e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001142:	2b00      	cmp	r3, #0
 8001144:	d0f9      	beq.n	800113a <usart_stm32_send_char+0xe>
	pUSART->USART_DR = ch;
 8001146:	78fa      	ldrb	r2, [r7, #3]
 8001148:	687b      	ldr	r3, [r7, #4]
 800114a:	605a      	str	r2, [r3, #4]
	/* wait until whole transmission completes */
	while(!(pUSART->USART_SR & (1 << 6)));
 800114c:	bf00      	nop
 800114e:	687b      	ldr	r3, [r7, #4]
 8001150:	681b      	ldr	r3, [r3, #0]
 8001152:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001156:	2b00      	cmp	r3, #0
 8001158:	d0f9      	beq.n	800114e <usart_stm32_send_char+0x22>
}
 800115a:	bf00      	nop
 800115c:	bf00      	nop
 800115e:	370c      	adds	r7, #12
 8001160:	46bd      	mov	sp, r7
 8001162:	bc80      	pop	{r7}
 8001164:	4770      	bx	lr

08001166 <usart_stm32_send_string>:

/*API to handle transmission of a string*/
void usart_stm32_send_string(USART_RegDef_Struct* pUsart,char* pStr)
{
 8001166:	b580      	push	{r7, lr}
 8001168:	b082      	sub	sp, #8
 800116a:	af00      	add	r7, sp, #0
 800116c:	6078      	str	r0, [r7, #4]
 800116e:	6039      	str	r1, [r7, #0]
	while(*pStr)
 8001170:	e007      	b.n	8001182 <usart_stm32_send_string+0x1c>
	{
		usart_send_char(pUsart,*(pStr++));
 8001172:	683b      	ldr	r3, [r7, #0]
 8001174:	1c5a      	adds	r2, r3, #1
 8001176:	603a      	str	r2, [r7, #0]
 8001178:	781b      	ldrb	r3, [r3, #0]
 800117a:	4619      	mov	r1, r3
 800117c:	6878      	ldr	r0, [r7, #4]
 800117e:	f7ff fb04 	bl	800078a <usart_send_char>
	while(*pStr)
 8001182:	683b      	ldr	r3, [r7, #0]
 8001184:	781b      	ldrb	r3, [r3, #0]
 8001186:	2b00      	cmp	r3, #0
 8001188:	d1f3      	bne.n	8001172 <usart_stm32_send_string+0xc>
	}
}
 800118a:	bf00      	nop
 800118c:	bf00      	nop
 800118e:	3708      	adds	r7, #8
 8001190:	46bd      	mov	sp, r7
 8001192:	bd80      	pop	{r7, pc}

08001194 <usart_stm32_send_hex>:

/*API to handle transmission of a hex value*/
void usart_stm32_send_hex(USART_RegDef_Struct* pUSARTx, uint32_t hex_value)
{
 8001194:	b580      	push	{r7, lr}
 8001196:	b084      	sub	sp, #16
 8001198:	af00      	add	r7, sp, #0
 800119a:	6078      	str	r0, [r7, #4]
 800119c:	6039      	str	r1, [r7, #0]
	char hex_char = '0' ;
 800119e:	2330      	movs	r3, #48	; 0x30
 80011a0:	73fb      	strb	r3, [r7, #15]
	usart_send_string(pUSARTx, "0x");
 80011a2:	4917      	ldr	r1, [pc, #92]	; (8001200 <usart_stm32_send_hex+0x6c>)
 80011a4:	6878      	ldr	r0, [r7, #4]
 80011a6:	f7ff faff 	bl	80007a8 <usart_send_string>
	for(int8_t i = 28; i >= 0; i-=4)
 80011aa:	231c      	movs	r3, #28
 80011ac:	73bb      	strb	r3, [r7, #14]
 80011ae:	e01e      	b.n	80011ee <usart_stm32_send_hex+0x5a>
	{
		uint8_t nibble = (hex_value >> i) & 0xF;
 80011b0:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80011b4:	683a      	ldr	r2, [r7, #0]
 80011b6:	fa22 f303 	lsr.w	r3, r2, r3
 80011ba:	b2db      	uxtb	r3, r3
 80011bc:	f003 030f 	and.w	r3, r3, #15
 80011c0:	737b      	strb	r3, [r7, #13]
		if(nibble < 10)
 80011c2:	7b7b      	ldrb	r3, [r7, #13]
 80011c4:	2b09      	cmp	r3, #9
 80011c6:	d803      	bhi.n	80011d0 <usart_stm32_send_hex+0x3c>
		{
		  hex_char = '0' + nibble;
 80011c8:	7b7b      	ldrb	r3, [r7, #13]
 80011ca:	3330      	adds	r3, #48	; 0x30
 80011cc:	73fb      	strb	r3, [r7, #15]
 80011ce:	e005      	b.n	80011dc <usart_stm32_send_hex+0x48>
		}
		else if(nibble > 10)
 80011d0:	7b7b      	ldrb	r3, [r7, #13]
 80011d2:	2b0a      	cmp	r3, #10
 80011d4:	d902      	bls.n	80011dc <usart_stm32_send_hex+0x48>
		{
			hex_char = 'A' + (nibble - 10);
 80011d6:	7b7b      	ldrb	r3, [r7, #13]
 80011d8:	3337      	adds	r3, #55	; 0x37
 80011da:	73fb      	strb	r3, [r7, #15]
		}

		usart_send_char(pUSARTx, hex_char);
 80011dc:	7bfb      	ldrb	r3, [r7, #15]
 80011de:	4619      	mov	r1, r3
 80011e0:	6878      	ldr	r0, [r7, #4]
 80011e2:	f7ff fad2 	bl	800078a <usart_send_char>
	for(int8_t i = 28; i >= 0; i-=4)
 80011e6:	7bbb      	ldrb	r3, [r7, #14]
 80011e8:	3b04      	subs	r3, #4
 80011ea:	b2db      	uxtb	r3, r3
 80011ec:	73bb      	strb	r3, [r7, #14]
 80011ee:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80011f2:	2b00      	cmp	r3, #0
 80011f4:	dadc      	bge.n	80011b0 <usart_stm32_send_hex+0x1c>
	}
}
 80011f6:	bf00      	nop
 80011f8:	bf00      	nop
 80011fa:	3710      	adds	r7, #16
 80011fc:	46bd      	mov	sp, r7
 80011fe:	bd80      	pop	{r7, pc}
 8001200:	0800256c 	.word	0x0800256c

08001204 <enable_usart2_irq>:

/*API to enable USART2 interrupt*/
void enable_usart2_irq(void)
{
 8001204:	b480      	push	{r7}
 8001206:	af00      	add	r7, sp, #0
    NVIC_ISER1 = (1 << (38-32)); //Enable USART2 interrupt (Irq 38)
 8001208:	4b03      	ldr	r3, [pc, #12]	; (8001218 <enable_usart2_irq+0x14>)
 800120a:	2240      	movs	r2, #64	; 0x40
 800120c:	601a      	str	r2, [r3, #0]
}
 800120e:	bf00      	nop
 8001210:	46bd      	mov	sp, r7
 8001212:	bc80      	pop	{r7}
 8001214:	4770      	bx	lr
 8001216:	bf00      	nop
 8001218:	e000e104 	.word	0xe000e104

0800121c <USART2_IRQHandler>:

/*USART2 IRQ handler*/
void USART2_IRQHandler(void)
{
 800121c:	b480      	push	{r7}
 800121e:	b083      	sub	sp, #12
 8001220:	af00      	add	r7, sp, #0
    USART_RegDef_Struct* pusart2 = USART2;
 8001222:	4b09      	ldr	r3, [pc, #36]	; (8001248 <USART2_IRQHandler+0x2c>)
 8001224:	607b      	str	r3, [r7, #4]
	while(!(pusart2->USART_SR & (1 << 5)));//Wait until RXE flag is set
 8001226:	bf00      	nop
 8001228:	687b      	ldr	r3, [r7, #4]
 800122a:	681b      	ldr	r3, [r3, #0]
 800122c:	f003 0320 	and.w	r3, r3, #32
 8001230:	2b00      	cmp	r3, #0
 8001232:	d0f9      	beq.n	8001228 <USART2_IRQHandler+0xc>
	usart_command = pusart2->USART_DR;
 8001234:	687b      	ldr	r3, [r7, #4]
 8001236:	685b      	ldr	r3, [r3, #4]
 8001238:	b2da      	uxtb	r2, r3
 800123a:	4b04      	ldr	r3, [pc, #16]	; (800124c <USART2_IRQHandler+0x30>)
 800123c:	701a      	strb	r2, [r3, #0]

}
 800123e:	bf00      	nop
 8001240:	370c      	adds	r7, #12
 8001242:	46bd      	mov	sp, r7
 8001244:	bc80      	pop	{r7}
 8001246:	4770      	bx	lr
 8001248:	40004400 	.word	0x40004400
 800124c:	20000375 	.word	0x20000375

08001250 <sw_delay>:
  #warning "FPU is not initialized, but the project is compiling for an FPU. Please initialize the FPU before use."
#endif

/* SW delay */
void sw_delay()
{
 8001250:	b480      	push	{r7}
 8001252:	b083      	sub	sp, #12
 8001254:	af00      	add	r7, sp, #0
	for(uint32_t i=0; i<900000; i++);
 8001256:	2300      	movs	r3, #0
 8001258:	607b      	str	r3, [r7, #4]
 800125a:	e002      	b.n	8001262 <sw_delay+0x12>
 800125c:	687b      	ldr	r3, [r7, #4]
 800125e:	3301      	adds	r3, #1
 8001260:	607b      	str	r3, [r7, #4]
 8001262:	687b      	ldr	r3, [r7, #4]
 8001264:	4a04      	ldr	r2, [pc, #16]	; (8001278 <sw_delay+0x28>)
 8001266:	4293      	cmp	r3, r2
 8001268:	d9f8      	bls.n	800125c <sw_delay+0xc>
}
 800126a:	bf00      	nop
 800126c:	bf00      	nop
 800126e:	370c      	adds	r7, #12
 8001270:	46bd      	mov	sp, r7
 8001272:	bc80      	pop	{r7}
 8001274:	4770      	bx	lr
 8001276:	bf00      	nop
 8001278:	000dbb9f 	.word	0x000dbb9f

0800127c <main>:

int main(void)
{
 800127c:	b580      	push	{r7, lr}
 800127e:	b082      	sub	sp, #8
 8001280:	af00      	add	r7, sp, #0

	extern circular_buffer circ_buffer;

	volatile uint8_t list_menu_sent = 1;
 8001282:	2301      	movs	r3, #1
 8001284:	70fb      	strb	r3, [r7, #3]
	volatile char current_mode = 0;
 8001286:	2300      	movs	r3, #0
 8001288:	70bb      	strb	r3, [r7, #2]

	gpio_user_cfg_init();
 800128a:	f7ff f9fd 	bl	8000688 <gpio_user_cfg_init>
	spi_init();
 800128e:	f7ff fa63 	bl	8000758 <spi_init>
    cb_init(&circ_buffer);
 8001292:	4823      	ldr	r0, [pc, #140]	; (8001320 <main+0xa4>)
 8001294:	f7fe ffec 	bl	8000270 <cb_init>
    i2c_init();
 8001298:	f7ff fa43 	bl	8000722 <i2c_init>

    USART_RegDef_Struct* pProtUsart = USART2;
 800129c:	4b21      	ldr	r3, [pc, #132]	; (8001324 <main+0xa8>)
 800129e:	607b      	str	r3, [r7, #4]

	/* Loop forever */
	while(1)
	{
		/* Setting the active user command */
		if (usart_command != 0)
 80012a0:	4b21      	ldr	r3, [pc, #132]	; (8001328 <main+0xac>)
 80012a2:	781b      	ldrb	r3, [r3, #0]
 80012a4:	b2db      	uxtb	r3, r3
 80012a6:	2b00      	cmp	r3, #0
 80012a8:	d006      	beq.n	80012b8 <main+0x3c>
		{
		   current_mode = usart_command;  // Set active mode
 80012aa:	4b1f      	ldr	r3, [pc, #124]	; (8001328 <main+0xac>)
 80012ac:	781b      	ldrb	r3, [r3, #0]
 80012ae:	b2db      	uxtb	r3, r3
 80012b0:	70bb      	strb	r3, [r7, #2]
		   usart_command = 0;             // Clear the command
 80012b2:	4b1d      	ldr	r3, [pc, #116]	; (8001328 <main+0xac>)
 80012b4:	2200      	movs	r2, #0
 80012b6:	701a      	strb	r2, [r3, #0]
		}


		if(list_menu_sent)
 80012b8:	78fb      	ldrb	r3, [r7, #3]
 80012ba:	b2db      	uxtb	r3, r3
 80012bc:	2b00      	cmp	r3, #0
 80012be:	d011      	beq.n	80012e4 <main+0x68>
		{
			usart_send_string(pProtUsart, "*****Protocol Sniffer Options*****\r\n");
 80012c0:	491a      	ldr	r1, [pc, #104]	; (800132c <main+0xb0>)
 80012c2:	6878      	ldr	r0, [r7, #4]
 80012c4:	f7ff fa70 	bl	80007a8 <usart_send_string>
			usart_send_string(pProtUsart, "s = SPI LoopBack Test\r\n");
 80012c8:	4919      	ldr	r1, [pc, #100]	; (8001330 <main+0xb4>)
 80012ca:	6878      	ldr	r0, [r7, #4]
 80012cc:	f7ff fa6c 	bl	80007a8 <usart_send_string>
			usart_send_string(pProtUsart, "i = I2C-Accel Sensor Liner Acceleration Live Data\r\n");
 80012d0:	4918      	ldr	r1, [pc, #96]	; (8001334 <main+0xb8>)
 80012d2:	6878      	ldr	r0, [r7, #4]
 80012d4:	f7ff fa68 	bl	80007a8 <usart_send_string>
			usart_send_string(pProtUsart, "m = Protocol Sniffer Menu\r\n");
 80012d8:	4917      	ldr	r1, [pc, #92]	; (8001338 <main+0xbc>)
 80012da:	6878      	ldr	r0, [r7, #4]
 80012dc:	f7ff fa64 	bl	80007a8 <usart_send_string>

			list_menu_sent = 0;
 80012e0:	2300      	movs	r3, #0
 80012e2:	70fb      	strb	r3, [r7, #3]
		}

       /* Handling various user commands */
	   if(current_mode == 's')
 80012e4:	78bb      	ldrb	r3, [r7, #2]
 80012e6:	b2db      	uxtb	r3, r3
 80012e8:	2b73      	cmp	r3, #115	; 0x73
 80012ea:	d108      	bne.n	80012fe <main+0x82>
	   {
		 usart_send_string(pProtUsart, "[SPI LOOPBACK TEST] ");
 80012ec:	4913      	ldr	r1, [pc, #76]	; (800133c <main+0xc0>)
 80012ee:	6878      	ldr	r0, [r7, #4]
 80012f0:	f7ff fa5a 	bl	80007a8 <usart_send_string>
		 spi_loopback_test();
 80012f4:	f7ff f9b6 	bl	8000664 <spi_loopback_test>
		 sw_delay();
 80012f8:	f7ff ffaa 	bl	8001250 <sw_delay>
 80012fc:	e7d0      	b.n	80012a0 <main+0x24>
	   }
	   else if(current_mode == 'i')
 80012fe:	78bb      	ldrb	r3, [r7, #2]
 8001300:	b2db      	uxtb	r3, r3
 8001302:	2b69      	cmp	r3, #105	; 0x69
 8001304:	d102      	bne.n	800130c <main+0x90>
	   {
			  i2c_gyro_sensor_read();
 8001306:	f7ff f89f 	bl	8000448 <i2c_gyro_sensor_read>
 800130a:	e7c9      	b.n	80012a0 <main+0x24>
	   }
	   else if(current_mode == 'm')
 800130c:	78bb      	ldrb	r3, [r7, #2]
 800130e:	b2db      	uxtb	r3, r3
 8001310:	2b6d      	cmp	r3, #109	; 0x6d
 8001312:	d1c5      	bne.n	80012a0 <main+0x24>
	   {
		   list_menu_sent = 1;
 8001314:	2301      	movs	r3, #1
 8001316:	70fb      	strb	r3, [r7, #3]
		   current_mode = 0;
 8001318:	2300      	movs	r3, #0
 800131a:	70bb      	strb	r3, [r7, #2]
		if (usart_command != 0)
 800131c:	e7c0      	b.n	80012a0 <main+0x24>
 800131e:	bf00      	nop
 8001320:	20000118 	.word	0x20000118
 8001324:	40004400 	.word	0x40004400
 8001328:	20000375 	.word	0x20000375
 800132c:	08002570 	.word	0x08002570
 8001330:	08002598 	.word	0x08002598
 8001334:	080025b0 	.word	0x080025b0
 8001338:	080025e4 	.word	0x080025e4
 800133c:	08002600 	.word	0x08002600

08001340 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001340:	b480      	push	{r7}
 8001342:	af00      	add	r7, sp, #0
  return 1;
 8001344:	2301      	movs	r3, #1
}
 8001346:	4618      	mov	r0, r3
 8001348:	46bd      	mov	sp, r7
 800134a:	bc80      	pop	{r7}
 800134c:	4770      	bx	lr

0800134e <_kill>:

int _kill(int pid, int sig)
{
 800134e:	b580      	push	{r7, lr}
 8001350:	b082      	sub	sp, #8
 8001352:	af00      	add	r7, sp, #0
 8001354:	6078      	str	r0, [r7, #4]
 8001356:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001358:	f000 fa6e 	bl	8001838 <__errno>
 800135c:	4603      	mov	r3, r0
 800135e:	2216      	movs	r2, #22
 8001360:	601a      	str	r2, [r3, #0]
  return -1;
 8001362:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001366:	4618      	mov	r0, r3
 8001368:	3708      	adds	r7, #8
 800136a:	46bd      	mov	sp, r7
 800136c:	bd80      	pop	{r7, pc}

0800136e <_exit>:

void _exit (int status)
{
 800136e:	b580      	push	{r7, lr}
 8001370:	b082      	sub	sp, #8
 8001372:	af00      	add	r7, sp, #0
 8001374:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001376:	f04f 31ff 	mov.w	r1, #4294967295
 800137a:	6878      	ldr	r0, [r7, #4]
 800137c:	f7ff ffe7 	bl	800134e <_kill>
  while (1) {}    /* Make sure we hang here */
 8001380:	e7fe      	b.n	8001380 <_exit+0x12>

08001382 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001382:	b580      	push	{r7, lr}
 8001384:	b086      	sub	sp, #24
 8001386:	af00      	add	r7, sp, #0
 8001388:	60f8      	str	r0, [r7, #12]
 800138a:	60b9      	str	r1, [r7, #8]
 800138c:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800138e:	2300      	movs	r3, #0
 8001390:	617b      	str	r3, [r7, #20]
 8001392:	e00a      	b.n	80013aa <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001394:	f3af 8000 	nop.w
 8001398:	4601      	mov	r1, r0
 800139a:	68bb      	ldr	r3, [r7, #8]
 800139c:	1c5a      	adds	r2, r3, #1
 800139e:	60ba      	str	r2, [r7, #8]
 80013a0:	b2ca      	uxtb	r2, r1
 80013a2:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80013a4:	697b      	ldr	r3, [r7, #20]
 80013a6:	3301      	adds	r3, #1
 80013a8:	617b      	str	r3, [r7, #20]
 80013aa:	697a      	ldr	r2, [r7, #20]
 80013ac:	687b      	ldr	r3, [r7, #4]
 80013ae:	429a      	cmp	r2, r3
 80013b0:	dbf0      	blt.n	8001394 <_read+0x12>
  }

  return len;
 80013b2:	687b      	ldr	r3, [r7, #4]
}
 80013b4:	4618      	mov	r0, r3
 80013b6:	3718      	adds	r7, #24
 80013b8:	46bd      	mov	sp, r7
 80013ba:	bd80      	pop	{r7, pc}

080013bc <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80013bc:	b580      	push	{r7, lr}
 80013be:	b086      	sub	sp, #24
 80013c0:	af00      	add	r7, sp, #0
 80013c2:	60f8      	str	r0, [r7, #12]
 80013c4:	60b9      	str	r1, [r7, #8]
 80013c6:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80013c8:	2300      	movs	r3, #0
 80013ca:	617b      	str	r3, [r7, #20]
 80013cc:	e009      	b.n	80013e2 <_write+0x26>
  {
    __io_putchar(*ptr++);
 80013ce:	68bb      	ldr	r3, [r7, #8]
 80013d0:	1c5a      	adds	r2, r3, #1
 80013d2:	60ba      	str	r2, [r7, #8]
 80013d4:	781b      	ldrb	r3, [r3, #0]
 80013d6:	4618      	mov	r0, r3
 80013d8:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80013dc:	697b      	ldr	r3, [r7, #20]
 80013de:	3301      	adds	r3, #1
 80013e0:	617b      	str	r3, [r7, #20]
 80013e2:	697a      	ldr	r2, [r7, #20]
 80013e4:	687b      	ldr	r3, [r7, #4]
 80013e6:	429a      	cmp	r2, r3
 80013e8:	dbf1      	blt.n	80013ce <_write+0x12>
  }
  return len;
 80013ea:	687b      	ldr	r3, [r7, #4]
}
 80013ec:	4618      	mov	r0, r3
 80013ee:	3718      	adds	r7, #24
 80013f0:	46bd      	mov	sp, r7
 80013f2:	bd80      	pop	{r7, pc}

080013f4 <_close>:

int _close(int file)
{
 80013f4:	b480      	push	{r7}
 80013f6:	b083      	sub	sp, #12
 80013f8:	af00      	add	r7, sp, #0
 80013fa:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80013fc:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001400:	4618      	mov	r0, r3
 8001402:	370c      	adds	r7, #12
 8001404:	46bd      	mov	sp, r7
 8001406:	bc80      	pop	{r7}
 8001408:	4770      	bx	lr

0800140a <_fstat>:


int _fstat(int file, struct stat *st)
{
 800140a:	b480      	push	{r7}
 800140c:	b083      	sub	sp, #12
 800140e:	af00      	add	r7, sp, #0
 8001410:	6078      	str	r0, [r7, #4]
 8001412:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001414:	683b      	ldr	r3, [r7, #0]
 8001416:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800141a:	605a      	str	r2, [r3, #4]
  return 0;
 800141c:	2300      	movs	r3, #0
}
 800141e:	4618      	mov	r0, r3
 8001420:	370c      	adds	r7, #12
 8001422:	46bd      	mov	sp, r7
 8001424:	bc80      	pop	{r7}
 8001426:	4770      	bx	lr

08001428 <_isatty>:

int _isatty(int file)
{
 8001428:	b480      	push	{r7}
 800142a:	b083      	sub	sp, #12
 800142c:	af00      	add	r7, sp, #0
 800142e:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001430:	2301      	movs	r3, #1
}
 8001432:	4618      	mov	r0, r3
 8001434:	370c      	adds	r7, #12
 8001436:	46bd      	mov	sp, r7
 8001438:	bc80      	pop	{r7}
 800143a:	4770      	bx	lr

0800143c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800143c:	b480      	push	{r7}
 800143e:	b085      	sub	sp, #20
 8001440:	af00      	add	r7, sp, #0
 8001442:	60f8      	str	r0, [r7, #12]
 8001444:	60b9      	str	r1, [r7, #8]
 8001446:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001448:	2300      	movs	r3, #0
}
 800144a:	4618      	mov	r0, r3
 800144c:	3714      	adds	r7, #20
 800144e:	46bd      	mov	sp, r7
 8001450:	bc80      	pop	{r7}
 8001452:	4770      	bx	lr

08001454 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001454:	b580      	push	{r7, lr}
 8001456:	b086      	sub	sp, #24
 8001458:	af00      	add	r7, sp, #0
 800145a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800145c:	4a14      	ldr	r2, [pc, #80]	; (80014b0 <_sbrk+0x5c>)
 800145e:	4b15      	ldr	r3, [pc, #84]	; (80014b4 <_sbrk+0x60>)
 8001460:	1ad3      	subs	r3, r2, r3
 8001462:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001464:	697b      	ldr	r3, [r7, #20]
 8001466:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001468:	4b13      	ldr	r3, [pc, #76]	; (80014b8 <_sbrk+0x64>)
 800146a:	681b      	ldr	r3, [r3, #0]
 800146c:	2b00      	cmp	r3, #0
 800146e:	d102      	bne.n	8001476 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001470:	4b11      	ldr	r3, [pc, #68]	; (80014b8 <_sbrk+0x64>)
 8001472:	4a12      	ldr	r2, [pc, #72]	; (80014bc <_sbrk+0x68>)
 8001474:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001476:	4b10      	ldr	r3, [pc, #64]	; (80014b8 <_sbrk+0x64>)
 8001478:	681a      	ldr	r2, [r3, #0]
 800147a:	687b      	ldr	r3, [r7, #4]
 800147c:	4413      	add	r3, r2
 800147e:	693a      	ldr	r2, [r7, #16]
 8001480:	429a      	cmp	r2, r3
 8001482:	d207      	bcs.n	8001494 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001484:	f000 f9d8 	bl	8001838 <__errno>
 8001488:	4603      	mov	r3, r0
 800148a:	220c      	movs	r2, #12
 800148c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800148e:	f04f 33ff 	mov.w	r3, #4294967295
 8001492:	e009      	b.n	80014a8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001494:	4b08      	ldr	r3, [pc, #32]	; (80014b8 <_sbrk+0x64>)
 8001496:	681b      	ldr	r3, [r3, #0]
 8001498:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800149a:	4b07      	ldr	r3, [pc, #28]	; (80014b8 <_sbrk+0x64>)
 800149c:	681a      	ldr	r2, [r3, #0]
 800149e:	687b      	ldr	r3, [r7, #4]
 80014a0:	4413      	add	r3, r2
 80014a2:	4a05      	ldr	r2, [pc, #20]	; (80014b8 <_sbrk+0x64>)
 80014a4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80014a6:	68fb      	ldr	r3, [r7, #12]
}
 80014a8:	4618      	mov	r0, r3
 80014aa:	3718      	adds	r7, #24
 80014ac:	46bd      	mov	sp, r7
 80014ae:	bd80      	pop	{r7, pc}
 80014b0:	20020000 	.word	0x20020000
 80014b4:	00000400 	.word	0x00000400
 80014b8:	20000378 	.word	0x20000378
 80014bc:	200004c8 	.word	0x200004c8

080014c0 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80014c0:	480d      	ldr	r0, [pc, #52]	; (80014f8 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80014c2:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 80014c4:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80014c8:	480c      	ldr	r0, [pc, #48]	; (80014fc <LoopForever+0x6>)
  ldr r1, =_edata
 80014ca:	490d      	ldr	r1, [pc, #52]	; (8001500 <LoopForever+0xa>)
  ldr r2, =_sidata
 80014cc:	4a0d      	ldr	r2, [pc, #52]	; (8001504 <LoopForever+0xe>)
  movs r3, #0
 80014ce:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80014d0:	e002      	b.n	80014d8 <LoopCopyDataInit>

080014d2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80014d2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80014d4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80014d6:	3304      	adds	r3, #4

080014d8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80014d8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80014da:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80014dc:	d3f9      	bcc.n	80014d2 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80014de:	4a0a      	ldr	r2, [pc, #40]	; (8001508 <LoopForever+0x12>)
  ldr r4, =_ebss
 80014e0:	4c0a      	ldr	r4, [pc, #40]	; (800150c <LoopForever+0x16>)
  movs r3, #0
 80014e2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80014e4:	e001      	b.n	80014ea <LoopFillZerobss>

080014e6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80014e6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80014e8:	3204      	adds	r2, #4

080014ea <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80014ea:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80014ec:	d3fb      	bcc.n	80014e6 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80014ee:	f000 f9a9 	bl	8001844 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80014f2:	f7ff fec3 	bl	800127c <main>

080014f6 <LoopForever>:

LoopForever:
  b LoopForever
 80014f6:	e7fe      	b.n	80014f6 <LoopForever>
  ldr   r0, =_estack
 80014f8:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80014fc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001500:	200000fc 	.word	0x200000fc
  ldr r2, =_sidata
 8001504:	080026fc 	.word	0x080026fc
  ldr r2, =_sbss
 8001508:	200000fc 	.word	0x200000fc
  ldr r4, =_ebss
 800150c:	200004c8 	.word	0x200004c8

08001510 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001510:	e7fe      	b.n	8001510 <ADC_IRQHandler>
	...

08001514 <rand>:
 8001514:	4b16      	ldr	r3, [pc, #88]	; (8001570 <rand+0x5c>)
 8001516:	b510      	push	{r4, lr}
 8001518:	681c      	ldr	r4, [r3, #0]
 800151a:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800151c:	b9b3      	cbnz	r3, 800154c <rand+0x38>
 800151e:	2018      	movs	r0, #24
 8001520:	f000 fa20 	bl	8001964 <malloc>
 8001524:	4602      	mov	r2, r0
 8001526:	6320      	str	r0, [r4, #48]	; 0x30
 8001528:	b920      	cbnz	r0, 8001534 <rand+0x20>
 800152a:	4b12      	ldr	r3, [pc, #72]	; (8001574 <rand+0x60>)
 800152c:	4812      	ldr	r0, [pc, #72]	; (8001578 <rand+0x64>)
 800152e:	2152      	movs	r1, #82	; 0x52
 8001530:	f000 f9b0 	bl	8001894 <__assert_func>
 8001534:	4911      	ldr	r1, [pc, #68]	; (800157c <rand+0x68>)
 8001536:	4b12      	ldr	r3, [pc, #72]	; (8001580 <rand+0x6c>)
 8001538:	e9c0 1300 	strd	r1, r3, [r0]
 800153c:	4b11      	ldr	r3, [pc, #68]	; (8001584 <rand+0x70>)
 800153e:	6083      	str	r3, [r0, #8]
 8001540:	230b      	movs	r3, #11
 8001542:	8183      	strh	r3, [r0, #12]
 8001544:	2100      	movs	r1, #0
 8001546:	2001      	movs	r0, #1
 8001548:	e9c2 0104 	strd	r0, r1, [r2, #16]
 800154c:	6b21      	ldr	r1, [r4, #48]	; 0x30
 800154e:	480e      	ldr	r0, [pc, #56]	; (8001588 <rand+0x74>)
 8001550:	690b      	ldr	r3, [r1, #16]
 8001552:	694c      	ldr	r4, [r1, #20]
 8001554:	4a0d      	ldr	r2, [pc, #52]	; (800158c <rand+0x78>)
 8001556:	4358      	muls	r0, r3
 8001558:	fb02 0004 	mla	r0, r2, r4, r0
 800155c:	fba3 3202 	umull	r3, r2, r3, r2
 8001560:	3301      	adds	r3, #1
 8001562:	eb40 0002 	adc.w	r0, r0, r2
 8001566:	e9c1 3004 	strd	r3, r0, [r1, #16]
 800156a:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 800156e:	bd10      	pop	{r4, pc}
 8001570:	200000f8 	.word	0x200000f8
 8001574:	08002615 	.word	0x08002615
 8001578:	0800262c 	.word	0x0800262c
 800157c:	abcd330e 	.word	0xabcd330e
 8001580:	e66d1234 	.word	0xe66d1234
 8001584:	0005deec 	.word	0x0005deec
 8001588:	5851f42d 	.word	0x5851f42d
 800158c:	4c957f2d 	.word	0x4c957f2d

08001590 <std>:
 8001590:	2300      	movs	r3, #0
 8001592:	b510      	push	{r4, lr}
 8001594:	4604      	mov	r4, r0
 8001596:	e9c0 3300 	strd	r3, r3, [r0]
 800159a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800159e:	6083      	str	r3, [r0, #8]
 80015a0:	8181      	strh	r1, [r0, #12]
 80015a2:	6643      	str	r3, [r0, #100]	; 0x64
 80015a4:	81c2      	strh	r2, [r0, #14]
 80015a6:	6183      	str	r3, [r0, #24]
 80015a8:	4619      	mov	r1, r3
 80015aa:	2208      	movs	r2, #8
 80015ac:	305c      	adds	r0, #92	; 0x5c
 80015ae:	f000 f8f4 	bl	800179a <memset>
 80015b2:	4b0d      	ldr	r3, [pc, #52]	; (80015e8 <std+0x58>)
 80015b4:	6263      	str	r3, [r4, #36]	; 0x24
 80015b6:	4b0d      	ldr	r3, [pc, #52]	; (80015ec <std+0x5c>)
 80015b8:	62a3      	str	r3, [r4, #40]	; 0x28
 80015ba:	4b0d      	ldr	r3, [pc, #52]	; (80015f0 <std+0x60>)
 80015bc:	62e3      	str	r3, [r4, #44]	; 0x2c
 80015be:	4b0d      	ldr	r3, [pc, #52]	; (80015f4 <std+0x64>)
 80015c0:	6323      	str	r3, [r4, #48]	; 0x30
 80015c2:	4b0d      	ldr	r3, [pc, #52]	; (80015f8 <std+0x68>)
 80015c4:	6224      	str	r4, [r4, #32]
 80015c6:	429c      	cmp	r4, r3
 80015c8:	d006      	beq.n	80015d8 <std+0x48>
 80015ca:	f103 0268 	add.w	r2, r3, #104	; 0x68
 80015ce:	4294      	cmp	r4, r2
 80015d0:	d002      	beq.n	80015d8 <std+0x48>
 80015d2:	33d0      	adds	r3, #208	; 0xd0
 80015d4:	429c      	cmp	r4, r3
 80015d6:	d105      	bne.n	80015e4 <std+0x54>
 80015d8:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80015dc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80015e0:	f000 b954 	b.w	800188c <__retarget_lock_init_recursive>
 80015e4:	bd10      	pop	{r4, pc}
 80015e6:	bf00      	nop
 80015e8:	08001715 	.word	0x08001715
 80015ec:	08001737 	.word	0x08001737
 80015f0:	0800176f 	.word	0x0800176f
 80015f4:	08001793 	.word	0x08001793
 80015f8:	2000037c 	.word	0x2000037c

080015fc <stdio_exit_handler>:
 80015fc:	4a02      	ldr	r2, [pc, #8]	; (8001608 <stdio_exit_handler+0xc>)
 80015fe:	4903      	ldr	r1, [pc, #12]	; (800160c <stdio_exit_handler+0x10>)
 8001600:	4803      	ldr	r0, [pc, #12]	; (8001610 <stdio_exit_handler+0x14>)
 8001602:	f000 b869 	b.w	80016d8 <_fwalk_sglue>
 8001606:	bf00      	nop
 8001608:	200000a0 	.word	0x200000a0
 800160c:	08001bd1 	.word	0x08001bd1
 8001610:	200000ac 	.word	0x200000ac

08001614 <cleanup_stdio>:
 8001614:	6841      	ldr	r1, [r0, #4]
 8001616:	4b0c      	ldr	r3, [pc, #48]	; (8001648 <cleanup_stdio+0x34>)
 8001618:	4299      	cmp	r1, r3
 800161a:	b510      	push	{r4, lr}
 800161c:	4604      	mov	r4, r0
 800161e:	d001      	beq.n	8001624 <cleanup_stdio+0x10>
 8001620:	f000 fad6 	bl	8001bd0 <_fflush_r>
 8001624:	68a1      	ldr	r1, [r4, #8]
 8001626:	4b09      	ldr	r3, [pc, #36]	; (800164c <cleanup_stdio+0x38>)
 8001628:	4299      	cmp	r1, r3
 800162a:	d002      	beq.n	8001632 <cleanup_stdio+0x1e>
 800162c:	4620      	mov	r0, r4
 800162e:	f000 facf 	bl	8001bd0 <_fflush_r>
 8001632:	68e1      	ldr	r1, [r4, #12]
 8001634:	4b06      	ldr	r3, [pc, #24]	; (8001650 <cleanup_stdio+0x3c>)
 8001636:	4299      	cmp	r1, r3
 8001638:	d004      	beq.n	8001644 <cleanup_stdio+0x30>
 800163a:	4620      	mov	r0, r4
 800163c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8001640:	f000 bac6 	b.w	8001bd0 <_fflush_r>
 8001644:	bd10      	pop	{r4, pc}
 8001646:	bf00      	nop
 8001648:	2000037c 	.word	0x2000037c
 800164c:	200003e4 	.word	0x200003e4
 8001650:	2000044c 	.word	0x2000044c

08001654 <global_stdio_init.part.0>:
 8001654:	b510      	push	{r4, lr}
 8001656:	4b0b      	ldr	r3, [pc, #44]	; (8001684 <global_stdio_init.part.0+0x30>)
 8001658:	4c0b      	ldr	r4, [pc, #44]	; (8001688 <global_stdio_init.part.0+0x34>)
 800165a:	4a0c      	ldr	r2, [pc, #48]	; (800168c <global_stdio_init.part.0+0x38>)
 800165c:	601a      	str	r2, [r3, #0]
 800165e:	4620      	mov	r0, r4
 8001660:	2200      	movs	r2, #0
 8001662:	2104      	movs	r1, #4
 8001664:	f7ff ff94 	bl	8001590 <std>
 8001668:	f104 0068 	add.w	r0, r4, #104	; 0x68
 800166c:	2201      	movs	r2, #1
 800166e:	2109      	movs	r1, #9
 8001670:	f7ff ff8e 	bl	8001590 <std>
 8001674:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8001678:	2202      	movs	r2, #2
 800167a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800167e:	2112      	movs	r1, #18
 8001680:	f7ff bf86 	b.w	8001590 <std>
 8001684:	200004b4 	.word	0x200004b4
 8001688:	2000037c 	.word	0x2000037c
 800168c:	080015fd 	.word	0x080015fd

08001690 <__sfp_lock_acquire>:
 8001690:	4801      	ldr	r0, [pc, #4]	; (8001698 <__sfp_lock_acquire+0x8>)
 8001692:	f000 b8fc 	b.w	800188e <__retarget_lock_acquire_recursive>
 8001696:	bf00      	nop
 8001698:	200004bd 	.word	0x200004bd

0800169c <__sfp_lock_release>:
 800169c:	4801      	ldr	r0, [pc, #4]	; (80016a4 <__sfp_lock_release+0x8>)
 800169e:	f000 b8f7 	b.w	8001890 <__retarget_lock_release_recursive>
 80016a2:	bf00      	nop
 80016a4:	200004bd 	.word	0x200004bd

080016a8 <__sinit>:
 80016a8:	b510      	push	{r4, lr}
 80016aa:	4604      	mov	r4, r0
 80016ac:	f7ff fff0 	bl	8001690 <__sfp_lock_acquire>
 80016b0:	6a23      	ldr	r3, [r4, #32]
 80016b2:	b11b      	cbz	r3, 80016bc <__sinit+0x14>
 80016b4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80016b8:	f7ff bff0 	b.w	800169c <__sfp_lock_release>
 80016bc:	4b04      	ldr	r3, [pc, #16]	; (80016d0 <__sinit+0x28>)
 80016be:	6223      	str	r3, [r4, #32]
 80016c0:	4b04      	ldr	r3, [pc, #16]	; (80016d4 <__sinit+0x2c>)
 80016c2:	681b      	ldr	r3, [r3, #0]
 80016c4:	2b00      	cmp	r3, #0
 80016c6:	d1f5      	bne.n	80016b4 <__sinit+0xc>
 80016c8:	f7ff ffc4 	bl	8001654 <global_stdio_init.part.0>
 80016cc:	e7f2      	b.n	80016b4 <__sinit+0xc>
 80016ce:	bf00      	nop
 80016d0:	08001615 	.word	0x08001615
 80016d4:	200004b4 	.word	0x200004b4

080016d8 <_fwalk_sglue>:
 80016d8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80016dc:	4607      	mov	r7, r0
 80016de:	4688      	mov	r8, r1
 80016e0:	4614      	mov	r4, r2
 80016e2:	2600      	movs	r6, #0
 80016e4:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80016e8:	f1b9 0901 	subs.w	r9, r9, #1
 80016ec:	d505      	bpl.n	80016fa <_fwalk_sglue+0x22>
 80016ee:	6824      	ldr	r4, [r4, #0]
 80016f0:	2c00      	cmp	r4, #0
 80016f2:	d1f7      	bne.n	80016e4 <_fwalk_sglue+0xc>
 80016f4:	4630      	mov	r0, r6
 80016f6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80016fa:	89ab      	ldrh	r3, [r5, #12]
 80016fc:	2b01      	cmp	r3, #1
 80016fe:	d907      	bls.n	8001710 <_fwalk_sglue+0x38>
 8001700:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8001704:	3301      	adds	r3, #1
 8001706:	d003      	beq.n	8001710 <_fwalk_sglue+0x38>
 8001708:	4629      	mov	r1, r5
 800170a:	4638      	mov	r0, r7
 800170c:	47c0      	blx	r8
 800170e:	4306      	orrs	r6, r0
 8001710:	3568      	adds	r5, #104	; 0x68
 8001712:	e7e9      	b.n	80016e8 <_fwalk_sglue+0x10>

08001714 <__sread>:
 8001714:	b510      	push	{r4, lr}
 8001716:	460c      	mov	r4, r1
 8001718:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800171c:	f000 f868 	bl	80017f0 <_read_r>
 8001720:	2800      	cmp	r0, #0
 8001722:	bfab      	itete	ge
 8001724:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8001726:	89a3      	ldrhlt	r3, [r4, #12]
 8001728:	181b      	addge	r3, r3, r0
 800172a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800172e:	bfac      	ite	ge
 8001730:	6563      	strge	r3, [r4, #84]	; 0x54
 8001732:	81a3      	strhlt	r3, [r4, #12]
 8001734:	bd10      	pop	{r4, pc}

08001736 <__swrite>:
 8001736:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800173a:	461f      	mov	r7, r3
 800173c:	898b      	ldrh	r3, [r1, #12]
 800173e:	05db      	lsls	r3, r3, #23
 8001740:	4605      	mov	r5, r0
 8001742:	460c      	mov	r4, r1
 8001744:	4616      	mov	r6, r2
 8001746:	d505      	bpl.n	8001754 <__swrite+0x1e>
 8001748:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800174c:	2302      	movs	r3, #2
 800174e:	2200      	movs	r2, #0
 8001750:	f000 f83c 	bl	80017cc <_lseek_r>
 8001754:	89a3      	ldrh	r3, [r4, #12]
 8001756:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800175a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800175e:	81a3      	strh	r3, [r4, #12]
 8001760:	4632      	mov	r2, r6
 8001762:	463b      	mov	r3, r7
 8001764:	4628      	mov	r0, r5
 8001766:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800176a:	f000 b853 	b.w	8001814 <_write_r>

0800176e <__sseek>:
 800176e:	b510      	push	{r4, lr}
 8001770:	460c      	mov	r4, r1
 8001772:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001776:	f000 f829 	bl	80017cc <_lseek_r>
 800177a:	1c43      	adds	r3, r0, #1
 800177c:	89a3      	ldrh	r3, [r4, #12]
 800177e:	bf15      	itete	ne
 8001780:	6560      	strne	r0, [r4, #84]	; 0x54
 8001782:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8001786:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800178a:	81a3      	strheq	r3, [r4, #12]
 800178c:	bf18      	it	ne
 800178e:	81a3      	strhne	r3, [r4, #12]
 8001790:	bd10      	pop	{r4, pc}

08001792 <__sclose>:
 8001792:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001796:	f000 b809 	b.w	80017ac <_close_r>

0800179a <memset>:
 800179a:	4402      	add	r2, r0
 800179c:	4603      	mov	r3, r0
 800179e:	4293      	cmp	r3, r2
 80017a0:	d100      	bne.n	80017a4 <memset+0xa>
 80017a2:	4770      	bx	lr
 80017a4:	f803 1b01 	strb.w	r1, [r3], #1
 80017a8:	e7f9      	b.n	800179e <memset+0x4>
	...

080017ac <_close_r>:
 80017ac:	b538      	push	{r3, r4, r5, lr}
 80017ae:	4d06      	ldr	r5, [pc, #24]	; (80017c8 <_close_r+0x1c>)
 80017b0:	2300      	movs	r3, #0
 80017b2:	4604      	mov	r4, r0
 80017b4:	4608      	mov	r0, r1
 80017b6:	602b      	str	r3, [r5, #0]
 80017b8:	f7ff fe1c 	bl	80013f4 <_close>
 80017bc:	1c43      	adds	r3, r0, #1
 80017be:	d102      	bne.n	80017c6 <_close_r+0x1a>
 80017c0:	682b      	ldr	r3, [r5, #0]
 80017c2:	b103      	cbz	r3, 80017c6 <_close_r+0x1a>
 80017c4:	6023      	str	r3, [r4, #0]
 80017c6:	bd38      	pop	{r3, r4, r5, pc}
 80017c8:	200004b8 	.word	0x200004b8

080017cc <_lseek_r>:
 80017cc:	b538      	push	{r3, r4, r5, lr}
 80017ce:	4d07      	ldr	r5, [pc, #28]	; (80017ec <_lseek_r+0x20>)
 80017d0:	4604      	mov	r4, r0
 80017d2:	4608      	mov	r0, r1
 80017d4:	4611      	mov	r1, r2
 80017d6:	2200      	movs	r2, #0
 80017d8:	602a      	str	r2, [r5, #0]
 80017da:	461a      	mov	r2, r3
 80017dc:	f7ff fe2e 	bl	800143c <_lseek>
 80017e0:	1c43      	adds	r3, r0, #1
 80017e2:	d102      	bne.n	80017ea <_lseek_r+0x1e>
 80017e4:	682b      	ldr	r3, [r5, #0]
 80017e6:	b103      	cbz	r3, 80017ea <_lseek_r+0x1e>
 80017e8:	6023      	str	r3, [r4, #0]
 80017ea:	bd38      	pop	{r3, r4, r5, pc}
 80017ec:	200004b8 	.word	0x200004b8

080017f0 <_read_r>:
 80017f0:	b538      	push	{r3, r4, r5, lr}
 80017f2:	4d07      	ldr	r5, [pc, #28]	; (8001810 <_read_r+0x20>)
 80017f4:	4604      	mov	r4, r0
 80017f6:	4608      	mov	r0, r1
 80017f8:	4611      	mov	r1, r2
 80017fa:	2200      	movs	r2, #0
 80017fc:	602a      	str	r2, [r5, #0]
 80017fe:	461a      	mov	r2, r3
 8001800:	f7ff fdbf 	bl	8001382 <_read>
 8001804:	1c43      	adds	r3, r0, #1
 8001806:	d102      	bne.n	800180e <_read_r+0x1e>
 8001808:	682b      	ldr	r3, [r5, #0]
 800180a:	b103      	cbz	r3, 800180e <_read_r+0x1e>
 800180c:	6023      	str	r3, [r4, #0]
 800180e:	bd38      	pop	{r3, r4, r5, pc}
 8001810:	200004b8 	.word	0x200004b8

08001814 <_write_r>:
 8001814:	b538      	push	{r3, r4, r5, lr}
 8001816:	4d07      	ldr	r5, [pc, #28]	; (8001834 <_write_r+0x20>)
 8001818:	4604      	mov	r4, r0
 800181a:	4608      	mov	r0, r1
 800181c:	4611      	mov	r1, r2
 800181e:	2200      	movs	r2, #0
 8001820:	602a      	str	r2, [r5, #0]
 8001822:	461a      	mov	r2, r3
 8001824:	f7ff fdca 	bl	80013bc <_write>
 8001828:	1c43      	adds	r3, r0, #1
 800182a:	d102      	bne.n	8001832 <_write_r+0x1e>
 800182c:	682b      	ldr	r3, [r5, #0]
 800182e:	b103      	cbz	r3, 8001832 <_write_r+0x1e>
 8001830:	6023      	str	r3, [r4, #0]
 8001832:	bd38      	pop	{r3, r4, r5, pc}
 8001834:	200004b8 	.word	0x200004b8

08001838 <__errno>:
 8001838:	4b01      	ldr	r3, [pc, #4]	; (8001840 <__errno+0x8>)
 800183a:	6818      	ldr	r0, [r3, #0]
 800183c:	4770      	bx	lr
 800183e:	bf00      	nop
 8001840:	200000f8 	.word	0x200000f8

08001844 <__libc_init_array>:
 8001844:	b570      	push	{r4, r5, r6, lr}
 8001846:	4d0d      	ldr	r5, [pc, #52]	; (800187c <__libc_init_array+0x38>)
 8001848:	4c0d      	ldr	r4, [pc, #52]	; (8001880 <__libc_init_array+0x3c>)
 800184a:	1b64      	subs	r4, r4, r5
 800184c:	10a4      	asrs	r4, r4, #2
 800184e:	2600      	movs	r6, #0
 8001850:	42a6      	cmp	r6, r4
 8001852:	d109      	bne.n	8001868 <__libc_init_array+0x24>
 8001854:	4d0b      	ldr	r5, [pc, #44]	; (8001884 <__libc_init_array+0x40>)
 8001856:	4c0c      	ldr	r4, [pc, #48]	; (8001888 <__libc_init_array+0x44>)
 8001858:	f000 fe3a 	bl	80024d0 <_init>
 800185c:	1b64      	subs	r4, r4, r5
 800185e:	10a4      	asrs	r4, r4, #2
 8001860:	2600      	movs	r6, #0
 8001862:	42a6      	cmp	r6, r4
 8001864:	d105      	bne.n	8001872 <__libc_init_array+0x2e>
 8001866:	bd70      	pop	{r4, r5, r6, pc}
 8001868:	f855 3b04 	ldr.w	r3, [r5], #4
 800186c:	4798      	blx	r3
 800186e:	3601      	adds	r6, #1
 8001870:	e7ee      	b.n	8001850 <__libc_init_array+0xc>
 8001872:	f855 3b04 	ldr.w	r3, [r5], #4
 8001876:	4798      	blx	r3
 8001878:	3601      	adds	r6, #1
 800187a:	e7f2      	b.n	8001862 <__libc_init_array+0x1e>
 800187c:	080026f4 	.word	0x080026f4
 8001880:	080026f4 	.word	0x080026f4
 8001884:	080026f4 	.word	0x080026f4
 8001888:	080026f8 	.word	0x080026f8

0800188c <__retarget_lock_init_recursive>:
 800188c:	4770      	bx	lr

0800188e <__retarget_lock_acquire_recursive>:
 800188e:	4770      	bx	lr

08001890 <__retarget_lock_release_recursive>:
 8001890:	4770      	bx	lr
	...

08001894 <__assert_func>:
 8001894:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8001896:	4614      	mov	r4, r2
 8001898:	461a      	mov	r2, r3
 800189a:	4b09      	ldr	r3, [pc, #36]	; (80018c0 <__assert_func+0x2c>)
 800189c:	681b      	ldr	r3, [r3, #0]
 800189e:	4605      	mov	r5, r0
 80018a0:	68d8      	ldr	r0, [r3, #12]
 80018a2:	b14c      	cbz	r4, 80018b8 <__assert_func+0x24>
 80018a4:	4b07      	ldr	r3, [pc, #28]	; (80018c4 <__assert_func+0x30>)
 80018a6:	9100      	str	r1, [sp, #0]
 80018a8:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80018ac:	4906      	ldr	r1, [pc, #24]	; (80018c8 <__assert_func+0x34>)
 80018ae:	462b      	mov	r3, r5
 80018b0:	f000 f9b6 	bl	8001c20 <fiprintf>
 80018b4:	f000 f9d6 	bl	8001c64 <abort>
 80018b8:	4b04      	ldr	r3, [pc, #16]	; (80018cc <__assert_func+0x38>)
 80018ba:	461c      	mov	r4, r3
 80018bc:	e7f3      	b.n	80018a6 <__assert_func+0x12>
 80018be:	bf00      	nop
 80018c0:	200000f8 	.word	0x200000f8
 80018c4:	08002684 	.word	0x08002684
 80018c8:	08002691 	.word	0x08002691
 80018cc:	080026bf 	.word	0x080026bf

080018d0 <_free_r>:
 80018d0:	b538      	push	{r3, r4, r5, lr}
 80018d2:	4605      	mov	r5, r0
 80018d4:	2900      	cmp	r1, #0
 80018d6:	d041      	beq.n	800195c <_free_r+0x8c>
 80018d8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80018dc:	1f0c      	subs	r4, r1, #4
 80018de:	2b00      	cmp	r3, #0
 80018e0:	bfb8      	it	lt
 80018e2:	18e4      	addlt	r4, r4, r3
 80018e4:	f000 f8e6 	bl	8001ab4 <__malloc_lock>
 80018e8:	4a1d      	ldr	r2, [pc, #116]	; (8001960 <_free_r+0x90>)
 80018ea:	6813      	ldr	r3, [r2, #0]
 80018ec:	b933      	cbnz	r3, 80018fc <_free_r+0x2c>
 80018ee:	6063      	str	r3, [r4, #4]
 80018f0:	6014      	str	r4, [r2, #0]
 80018f2:	4628      	mov	r0, r5
 80018f4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80018f8:	f000 b8e2 	b.w	8001ac0 <__malloc_unlock>
 80018fc:	42a3      	cmp	r3, r4
 80018fe:	d908      	bls.n	8001912 <_free_r+0x42>
 8001900:	6820      	ldr	r0, [r4, #0]
 8001902:	1821      	adds	r1, r4, r0
 8001904:	428b      	cmp	r3, r1
 8001906:	bf01      	itttt	eq
 8001908:	6819      	ldreq	r1, [r3, #0]
 800190a:	685b      	ldreq	r3, [r3, #4]
 800190c:	1809      	addeq	r1, r1, r0
 800190e:	6021      	streq	r1, [r4, #0]
 8001910:	e7ed      	b.n	80018ee <_free_r+0x1e>
 8001912:	461a      	mov	r2, r3
 8001914:	685b      	ldr	r3, [r3, #4]
 8001916:	b10b      	cbz	r3, 800191c <_free_r+0x4c>
 8001918:	42a3      	cmp	r3, r4
 800191a:	d9fa      	bls.n	8001912 <_free_r+0x42>
 800191c:	6811      	ldr	r1, [r2, #0]
 800191e:	1850      	adds	r0, r2, r1
 8001920:	42a0      	cmp	r0, r4
 8001922:	d10b      	bne.n	800193c <_free_r+0x6c>
 8001924:	6820      	ldr	r0, [r4, #0]
 8001926:	4401      	add	r1, r0
 8001928:	1850      	adds	r0, r2, r1
 800192a:	4283      	cmp	r3, r0
 800192c:	6011      	str	r1, [r2, #0]
 800192e:	d1e0      	bne.n	80018f2 <_free_r+0x22>
 8001930:	6818      	ldr	r0, [r3, #0]
 8001932:	685b      	ldr	r3, [r3, #4]
 8001934:	6053      	str	r3, [r2, #4]
 8001936:	4408      	add	r0, r1
 8001938:	6010      	str	r0, [r2, #0]
 800193a:	e7da      	b.n	80018f2 <_free_r+0x22>
 800193c:	d902      	bls.n	8001944 <_free_r+0x74>
 800193e:	230c      	movs	r3, #12
 8001940:	602b      	str	r3, [r5, #0]
 8001942:	e7d6      	b.n	80018f2 <_free_r+0x22>
 8001944:	6820      	ldr	r0, [r4, #0]
 8001946:	1821      	adds	r1, r4, r0
 8001948:	428b      	cmp	r3, r1
 800194a:	bf04      	itt	eq
 800194c:	6819      	ldreq	r1, [r3, #0]
 800194e:	685b      	ldreq	r3, [r3, #4]
 8001950:	6063      	str	r3, [r4, #4]
 8001952:	bf04      	itt	eq
 8001954:	1809      	addeq	r1, r1, r0
 8001956:	6021      	streq	r1, [r4, #0]
 8001958:	6054      	str	r4, [r2, #4]
 800195a:	e7ca      	b.n	80018f2 <_free_r+0x22>
 800195c:	bd38      	pop	{r3, r4, r5, pc}
 800195e:	bf00      	nop
 8001960:	200004c0 	.word	0x200004c0

08001964 <malloc>:
 8001964:	4b02      	ldr	r3, [pc, #8]	; (8001970 <malloc+0xc>)
 8001966:	4601      	mov	r1, r0
 8001968:	6818      	ldr	r0, [r3, #0]
 800196a:	f000 b823 	b.w	80019b4 <_malloc_r>
 800196e:	bf00      	nop
 8001970:	200000f8 	.word	0x200000f8

08001974 <sbrk_aligned>:
 8001974:	b570      	push	{r4, r5, r6, lr}
 8001976:	4e0e      	ldr	r6, [pc, #56]	; (80019b0 <sbrk_aligned+0x3c>)
 8001978:	460c      	mov	r4, r1
 800197a:	6831      	ldr	r1, [r6, #0]
 800197c:	4605      	mov	r5, r0
 800197e:	b911      	cbnz	r1, 8001986 <sbrk_aligned+0x12>
 8001980:	f000 f960 	bl	8001c44 <_sbrk_r>
 8001984:	6030      	str	r0, [r6, #0]
 8001986:	4621      	mov	r1, r4
 8001988:	4628      	mov	r0, r5
 800198a:	f000 f95b 	bl	8001c44 <_sbrk_r>
 800198e:	1c43      	adds	r3, r0, #1
 8001990:	d00a      	beq.n	80019a8 <sbrk_aligned+0x34>
 8001992:	1cc4      	adds	r4, r0, #3
 8001994:	f024 0403 	bic.w	r4, r4, #3
 8001998:	42a0      	cmp	r0, r4
 800199a:	d007      	beq.n	80019ac <sbrk_aligned+0x38>
 800199c:	1a21      	subs	r1, r4, r0
 800199e:	4628      	mov	r0, r5
 80019a0:	f000 f950 	bl	8001c44 <_sbrk_r>
 80019a4:	3001      	adds	r0, #1
 80019a6:	d101      	bne.n	80019ac <sbrk_aligned+0x38>
 80019a8:	f04f 34ff 	mov.w	r4, #4294967295
 80019ac:	4620      	mov	r0, r4
 80019ae:	bd70      	pop	{r4, r5, r6, pc}
 80019b0:	200004c4 	.word	0x200004c4

080019b4 <_malloc_r>:
 80019b4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80019b8:	1ccd      	adds	r5, r1, #3
 80019ba:	f025 0503 	bic.w	r5, r5, #3
 80019be:	3508      	adds	r5, #8
 80019c0:	2d0c      	cmp	r5, #12
 80019c2:	bf38      	it	cc
 80019c4:	250c      	movcc	r5, #12
 80019c6:	2d00      	cmp	r5, #0
 80019c8:	4607      	mov	r7, r0
 80019ca:	db01      	blt.n	80019d0 <_malloc_r+0x1c>
 80019cc:	42a9      	cmp	r1, r5
 80019ce:	d905      	bls.n	80019dc <_malloc_r+0x28>
 80019d0:	230c      	movs	r3, #12
 80019d2:	603b      	str	r3, [r7, #0]
 80019d4:	2600      	movs	r6, #0
 80019d6:	4630      	mov	r0, r6
 80019d8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80019dc:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8001ab0 <_malloc_r+0xfc>
 80019e0:	f000 f868 	bl	8001ab4 <__malloc_lock>
 80019e4:	f8d8 3000 	ldr.w	r3, [r8]
 80019e8:	461c      	mov	r4, r3
 80019ea:	bb5c      	cbnz	r4, 8001a44 <_malloc_r+0x90>
 80019ec:	4629      	mov	r1, r5
 80019ee:	4638      	mov	r0, r7
 80019f0:	f7ff ffc0 	bl	8001974 <sbrk_aligned>
 80019f4:	1c43      	adds	r3, r0, #1
 80019f6:	4604      	mov	r4, r0
 80019f8:	d155      	bne.n	8001aa6 <_malloc_r+0xf2>
 80019fa:	f8d8 4000 	ldr.w	r4, [r8]
 80019fe:	4626      	mov	r6, r4
 8001a00:	2e00      	cmp	r6, #0
 8001a02:	d145      	bne.n	8001a90 <_malloc_r+0xdc>
 8001a04:	2c00      	cmp	r4, #0
 8001a06:	d048      	beq.n	8001a9a <_malloc_r+0xe6>
 8001a08:	6823      	ldr	r3, [r4, #0]
 8001a0a:	4631      	mov	r1, r6
 8001a0c:	4638      	mov	r0, r7
 8001a0e:	eb04 0903 	add.w	r9, r4, r3
 8001a12:	f000 f917 	bl	8001c44 <_sbrk_r>
 8001a16:	4581      	cmp	r9, r0
 8001a18:	d13f      	bne.n	8001a9a <_malloc_r+0xe6>
 8001a1a:	6821      	ldr	r1, [r4, #0]
 8001a1c:	1a6d      	subs	r5, r5, r1
 8001a1e:	4629      	mov	r1, r5
 8001a20:	4638      	mov	r0, r7
 8001a22:	f7ff ffa7 	bl	8001974 <sbrk_aligned>
 8001a26:	3001      	adds	r0, #1
 8001a28:	d037      	beq.n	8001a9a <_malloc_r+0xe6>
 8001a2a:	6823      	ldr	r3, [r4, #0]
 8001a2c:	442b      	add	r3, r5
 8001a2e:	6023      	str	r3, [r4, #0]
 8001a30:	f8d8 3000 	ldr.w	r3, [r8]
 8001a34:	2b00      	cmp	r3, #0
 8001a36:	d038      	beq.n	8001aaa <_malloc_r+0xf6>
 8001a38:	685a      	ldr	r2, [r3, #4]
 8001a3a:	42a2      	cmp	r2, r4
 8001a3c:	d12b      	bne.n	8001a96 <_malloc_r+0xe2>
 8001a3e:	2200      	movs	r2, #0
 8001a40:	605a      	str	r2, [r3, #4]
 8001a42:	e00f      	b.n	8001a64 <_malloc_r+0xb0>
 8001a44:	6822      	ldr	r2, [r4, #0]
 8001a46:	1b52      	subs	r2, r2, r5
 8001a48:	d41f      	bmi.n	8001a8a <_malloc_r+0xd6>
 8001a4a:	2a0b      	cmp	r2, #11
 8001a4c:	d917      	bls.n	8001a7e <_malloc_r+0xca>
 8001a4e:	1961      	adds	r1, r4, r5
 8001a50:	42a3      	cmp	r3, r4
 8001a52:	6025      	str	r5, [r4, #0]
 8001a54:	bf18      	it	ne
 8001a56:	6059      	strne	r1, [r3, #4]
 8001a58:	6863      	ldr	r3, [r4, #4]
 8001a5a:	bf08      	it	eq
 8001a5c:	f8c8 1000 	streq.w	r1, [r8]
 8001a60:	5162      	str	r2, [r4, r5]
 8001a62:	604b      	str	r3, [r1, #4]
 8001a64:	4638      	mov	r0, r7
 8001a66:	f104 060b 	add.w	r6, r4, #11
 8001a6a:	f000 f829 	bl	8001ac0 <__malloc_unlock>
 8001a6e:	f026 0607 	bic.w	r6, r6, #7
 8001a72:	1d23      	adds	r3, r4, #4
 8001a74:	1af2      	subs	r2, r6, r3
 8001a76:	d0ae      	beq.n	80019d6 <_malloc_r+0x22>
 8001a78:	1b9b      	subs	r3, r3, r6
 8001a7a:	50a3      	str	r3, [r4, r2]
 8001a7c:	e7ab      	b.n	80019d6 <_malloc_r+0x22>
 8001a7e:	42a3      	cmp	r3, r4
 8001a80:	6862      	ldr	r2, [r4, #4]
 8001a82:	d1dd      	bne.n	8001a40 <_malloc_r+0x8c>
 8001a84:	f8c8 2000 	str.w	r2, [r8]
 8001a88:	e7ec      	b.n	8001a64 <_malloc_r+0xb0>
 8001a8a:	4623      	mov	r3, r4
 8001a8c:	6864      	ldr	r4, [r4, #4]
 8001a8e:	e7ac      	b.n	80019ea <_malloc_r+0x36>
 8001a90:	4634      	mov	r4, r6
 8001a92:	6876      	ldr	r6, [r6, #4]
 8001a94:	e7b4      	b.n	8001a00 <_malloc_r+0x4c>
 8001a96:	4613      	mov	r3, r2
 8001a98:	e7cc      	b.n	8001a34 <_malloc_r+0x80>
 8001a9a:	230c      	movs	r3, #12
 8001a9c:	603b      	str	r3, [r7, #0]
 8001a9e:	4638      	mov	r0, r7
 8001aa0:	f000 f80e 	bl	8001ac0 <__malloc_unlock>
 8001aa4:	e797      	b.n	80019d6 <_malloc_r+0x22>
 8001aa6:	6025      	str	r5, [r4, #0]
 8001aa8:	e7dc      	b.n	8001a64 <_malloc_r+0xb0>
 8001aaa:	605b      	str	r3, [r3, #4]
 8001aac:	deff      	udf	#255	; 0xff
 8001aae:	bf00      	nop
 8001ab0:	200004c0 	.word	0x200004c0

08001ab4 <__malloc_lock>:
 8001ab4:	4801      	ldr	r0, [pc, #4]	; (8001abc <__malloc_lock+0x8>)
 8001ab6:	f7ff beea 	b.w	800188e <__retarget_lock_acquire_recursive>
 8001aba:	bf00      	nop
 8001abc:	200004bc 	.word	0x200004bc

08001ac0 <__malloc_unlock>:
 8001ac0:	4801      	ldr	r0, [pc, #4]	; (8001ac8 <__malloc_unlock+0x8>)
 8001ac2:	f7ff bee5 	b.w	8001890 <__retarget_lock_release_recursive>
 8001ac6:	bf00      	nop
 8001ac8:	200004bc 	.word	0x200004bc

08001acc <__sflush_r>:
 8001acc:	898a      	ldrh	r2, [r1, #12]
 8001ace:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001ad0:	4605      	mov	r5, r0
 8001ad2:	0710      	lsls	r0, r2, #28
 8001ad4:	460c      	mov	r4, r1
 8001ad6:	d457      	bmi.n	8001b88 <__sflush_r+0xbc>
 8001ad8:	684b      	ldr	r3, [r1, #4]
 8001ada:	2b00      	cmp	r3, #0
 8001adc:	dc04      	bgt.n	8001ae8 <__sflush_r+0x1c>
 8001ade:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8001ae0:	2b00      	cmp	r3, #0
 8001ae2:	dc01      	bgt.n	8001ae8 <__sflush_r+0x1c>
 8001ae4:	2000      	movs	r0, #0
 8001ae6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001ae8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8001aea:	2e00      	cmp	r6, #0
 8001aec:	d0fa      	beq.n	8001ae4 <__sflush_r+0x18>
 8001aee:	2300      	movs	r3, #0
 8001af0:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8001af4:	682f      	ldr	r7, [r5, #0]
 8001af6:	6a21      	ldr	r1, [r4, #32]
 8001af8:	602b      	str	r3, [r5, #0]
 8001afa:	d032      	beq.n	8001b62 <__sflush_r+0x96>
 8001afc:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8001afe:	89a3      	ldrh	r3, [r4, #12]
 8001b00:	075a      	lsls	r2, r3, #29
 8001b02:	d505      	bpl.n	8001b10 <__sflush_r+0x44>
 8001b04:	6863      	ldr	r3, [r4, #4]
 8001b06:	1ac0      	subs	r0, r0, r3
 8001b08:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8001b0a:	b10b      	cbz	r3, 8001b10 <__sflush_r+0x44>
 8001b0c:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8001b0e:	1ac0      	subs	r0, r0, r3
 8001b10:	2300      	movs	r3, #0
 8001b12:	4602      	mov	r2, r0
 8001b14:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8001b16:	6a21      	ldr	r1, [r4, #32]
 8001b18:	4628      	mov	r0, r5
 8001b1a:	47b0      	blx	r6
 8001b1c:	1c43      	adds	r3, r0, #1
 8001b1e:	89a3      	ldrh	r3, [r4, #12]
 8001b20:	d106      	bne.n	8001b30 <__sflush_r+0x64>
 8001b22:	6829      	ldr	r1, [r5, #0]
 8001b24:	291d      	cmp	r1, #29
 8001b26:	d82b      	bhi.n	8001b80 <__sflush_r+0xb4>
 8001b28:	4a28      	ldr	r2, [pc, #160]	; (8001bcc <__sflush_r+0x100>)
 8001b2a:	410a      	asrs	r2, r1
 8001b2c:	07d6      	lsls	r6, r2, #31
 8001b2e:	d427      	bmi.n	8001b80 <__sflush_r+0xb4>
 8001b30:	2200      	movs	r2, #0
 8001b32:	6062      	str	r2, [r4, #4]
 8001b34:	04d9      	lsls	r1, r3, #19
 8001b36:	6922      	ldr	r2, [r4, #16]
 8001b38:	6022      	str	r2, [r4, #0]
 8001b3a:	d504      	bpl.n	8001b46 <__sflush_r+0x7a>
 8001b3c:	1c42      	adds	r2, r0, #1
 8001b3e:	d101      	bne.n	8001b44 <__sflush_r+0x78>
 8001b40:	682b      	ldr	r3, [r5, #0]
 8001b42:	b903      	cbnz	r3, 8001b46 <__sflush_r+0x7a>
 8001b44:	6560      	str	r0, [r4, #84]	; 0x54
 8001b46:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8001b48:	602f      	str	r7, [r5, #0]
 8001b4a:	2900      	cmp	r1, #0
 8001b4c:	d0ca      	beq.n	8001ae4 <__sflush_r+0x18>
 8001b4e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8001b52:	4299      	cmp	r1, r3
 8001b54:	d002      	beq.n	8001b5c <__sflush_r+0x90>
 8001b56:	4628      	mov	r0, r5
 8001b58:	f7ff feba 	bl	80018d0 <_free_r>
 8001b5c:	2000      	movs	r0, #0
 8001b5e:	6360      	str	r0, [r4, #52]	; 0x34
 8001b60:	e7c1      	b.n	8001ae6 <__sflush_r+0x1a>
 8001b62:	2301      	movs	r3, #1
 8001b64:	4628      	mov	r0, r5
 8001b66:	47b0      	blx	r6
 8001b68:	1c41      	adds	r1, r0, #1
 8001b6a:	d1c8      	bne.n	8001afe <__sflush_r+0x32>
 8001b6c:	682b      	ldr	r3, [r5, #0]
 8001b6e:	2b00      	cmp	r3, #0
 8001b70:	d0c5      	beq.n	8001afe <__sflush_r+0x32>
 8001b72:	2b1d      	cmp	r3, #29
 8001b74:	d001      	beq.n	8001b7a <__sflush_r+0xae>
 8001b76:	2b16      	cmp	r3, #22
 8001b78:	d101      	bne.n	8001b7e <__sflush_r+0xb2>
 8001b7a:	602f      	str	r7, [r5, #0]
 8001b7c:	e7b2      	b.n	8001ae4 <__sflush_r+0x18>
 8001b7e:	89a3      	ldrh	r3, [r4, #12]
 8001b80:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001b84:	81a3      	strh	r3, [r4, #12]
 8001b86:	e7ae      	b.n	8001ae6 <__sflush_r+0x1a>
 8001b88:	690f      	ldr	r7, [r1, #16]
 8001b8a:	2f00      	cmp	r7, #0
 8001b8c:	d0aa      	beq.n	8001ae4 <__sflush_r+0x18>
 8001b8e:	0793      	lsls	r3, r2, #30
 8001b90:	680e      	ldr	r6, [r1, #0]
 8001b92:	bf08      	it	eq
 8001b94:	694b      	ldreq	r3, [r1, #20]
 8001b96:	600f      	str	r7, [r1, #0]
 8001b98:	bf18      	it	ne
 8001b9a:	2300      	movne	r3, #0
 8001b9c:	1bf6      	subs	r6, r6, r7
 8001b9e:	608b      	str	r3, [r1, #8]
 8001ba0:	2e00      	cmp	r6, #0
 8001ba2:	dd9f      	ble.n	8001ae4 <__sflush_r+0x18>
 8001ba4:	6a21      	ldr	r1, [r4, #32]
 8001ba6:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
 8001baa:	4633      	mov	r3, r6
 8001bac:	463a      	mov	r2, r7
 8001bae:	4628      	mov	r0, r5
 8001bb0:	47e0      	blx	ip
 8001bb2:	2800      	cmp	r0, #0
 8001bb4:	dc06      	bgt.n	8001bc4 <__sflush_r+0xf8>
 8001bb6:	89a3      	ldrh	r3, [r4, #12]
 8001bb8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001bbc:	81a3      	strh	r3, [r4, #12]
 8001bbe:	f04f 30ff 	mov.w	r0, #4294967295
 8001bc2:	e790      	b.n	8001ae6 <__sflush_r+0x1a>
 8001bc4:	4407      	add	r7, r0
 8001bc6:	1a36      	subs	r6, r6, r0
 8001bc8:	e7ea      	b.n	8001ba0 <__sflush_r+0xd4>
 8001bca:	bf00      	nop
 8001bcc:	dfbffffe 	.word	0xdfbffffe

08001bd0 <_fflush_r>:
 8001bd0:	b538      	push	{r3, r4, r5, lr}
 8001bd2:	690b      	ldr	r3, [r1, #16]
 8001bd4:	4605      	mov	r5, r0
 8001bd6:	460c      	mov	r4, r1
 8001bd8:	b913      	cbnz	r3, 8001be0 <_fflush_r+0x10>
 8001bda:	2500      	movs	r5, #0
 8001bdc:	4628      	mov	r0, r5
 8001bde:	bd38      	pop	{r3, r4, r5, pc}
 8001be0:	b118      	cbz	r0, 8001bea <_fflush_r+0x1a>
 8001be2:	6a03      	ldr	r3, [r0, #32]
 8001be4:	b90b      	cbnz	r3, 8001bea <_fflush_r+0x1a>
 8001be6:	f7ff fd5f 	bl	80016a8 <__sinit>
 8001bea:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8001bee:	2b00      	cmp	r3, #0
 8001bf0:	d0f3      	beq.n	8001bda <_fflush_r+0xa>
 8001bf2:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8001bf4:	07d0      	lsls	r0, r2, #31
 8001bf6:	d404      	bmi.n	8001c02 <_fflush_r+0x32>
 8001bf8:	0599      	lsls	r1, r3, #22
 8001bfa:	d402      	bmi.n	8001c02 <_fflush_r+0x32>
 8001bfc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8001bfe:	f7ff fe46 	bl	800188e <__retarget_lock_acquire_recursive>
 8001c02:	4628      	mov	r0, r5
 8001c04:	4621      	mov	r1, r4
 8001c06:	f7ff ff61 	bl	8001acc <__sflush_r>
 8001c0a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8001c0c:	07da      	lsls	r2, r3, #31
 8001c0e:	4605      	mov	r5, r0
 8001c10:	d4e4      	bmi.n	8001bdc <_fflush_r+0xc>
 8001c12:	89a3      	ldrh	r3, [r4, #12]
 8001c14:	059b      	lsls	r3, r3, #22
 8001c16:	d4e1      	bmi.n	8001bdc <_fflush_r+0xc>
 8001c18:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8001c1a:	f7ff fe39 	bl	8001890 <__retarget_lock_release_recursive>
 8001c1e:	e7dd      	b.n	8001bdc <_fflush_r+0xc>

08001c20 <fiprintf>:
 8001c20:	b40e      	push	{r1, r2, r3}
 8001c22:	b503      	push	{r0, r1, lr}
 8001c24:	4601      	mov	r1, r0
 8001c26:	ab03      	add	r3, sp, #12
 8001c28:	4805      	ldr	r0, [pc, #20]	; (8001c40 <fiprintf+0x20>)
 8001c2a:	f853 2b04 	ldr.w	r2, [r3], #4
 8001c2e:	6800      	ldr	r0, [r0, #0]
 8001c30:	9301      	str	r3, [sp, #4]
 8001c32:	f000 f845 	bl	8001cc0 <_vfiprintf_r>
 8001c36:	b002      	add	sp, #8
 8001c38:	f85d eb04 	ldr.w	lr, [sp], #4
 8001c3c:	b003      	add	sp, #12
 8001c3e:	4770      	bx	lr
 8001c40:	200000f8 	.word	0x200000f8

08001c44 <_sbrk_r>:
 8001c44:	b538      	push	{r3, r4, r5, lr}
 8001c46:	4d06      	ldr	r5, [pc, #24]	; (8001c60 <_sbrk_r+0x1c>)
 8001c48:	2300      	movs	r3, #0
 8001c4a:	4604      	mov	r4, r0
 8001c4c:	4608      	mov	r0, r1
 8001c4e:	602b      	str	r3, [r5, #0]
 8001c50:	f7ff fc00 	bl	8001454 <_sbrk>
 8001c54:	1c43      	adds	r3, r0, #1
 8001c56:	d102      	bne.n	8001c5e <_sbrk_r+0x1a>
 8001c58:	682b      	ldr	r3, [r5, #0]
 8001c5a:	b103      	cbz	r3, 8001c5e <_sbrk_r+0x1a>
 8001c5c:	6023      	str	r3, [r4, #0]
 8001c5e:	bd38      	pop	{r3, r4, r5, pc}
 8001c60:	200004b8 	.word	0x200004b8

08001c64 <abort>:
 8001c64:	b508      	push	{r3, lr}
 8001c66:	2006      	movs	r0, #6
 8001c68:	f000 fb92 	bl	8002390 <raise>
 8001c6c:	2001      	movs	r0, #1
 8001c6e:	f7ff fb7e 	bl	800136e <_exit>

08001c72 <__sfputc_r>:
 8001c72:	6893      	ldr	r3, [r2, #8]
 8001c74:	3b01      	subs	r3, #1
 8001c76:	2b00      	cmp	r3, #0
 8001c78:	b410      	push	{r4}
 8001c7a:	6093      	str	r3, [r2, #8]
 8001c7c:	da07      	bge.n	8001c8e <__sfputc_r+0x1c>
 8001c7e:	6994      	ldr	r4, [r2, #24]
 8001c80:	42a3      	cmp	r3, r4
 8001c82:	db01      	blt.n	8001c88 <__sfputc_r+0x16>
 8001c84:	290a      	cmp	r1, #10
 8001c86:	d102      	bne.n	8001c8e <__sfputc_r+0x1c>
 8001c88:	bc10      	pop	{r4}
 8001c8a:	f000 bac3 	b.w	8002214 <__swbuf_r>
 8001c8e:	6813      	ldr	r3, [r2, #0]
 8001c90:	1c58      	adds	r0, r3, #1
 8001c92:	6010      	str	r0, [r2, #0]
 8001c94:	7019      	strb	r1, [r3, #0]
 8001c96:	4608      	mov	r0, r1
 8001c98:	bc10      	pop	{r4}
 8001c9a:	4770      	bx	lr

08001c9c <__sfputs_r>:
 8001c9c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001c9e:	4606      	mov	r6, r0
 8001ca0:	460f      	mov	r7, r1
 8001ca2:	4614      	mov	r4, r2
 8001ca4:	18d5      	adds	r5, r2, r3
 8001ca6:	42ac      	cmp	r4, r5
 8001ca8:	d101      	bne.n	8001cae <__sfputs_r+0x12>
 8001caa:	2000      	movs	r0, #0
 8001cac:	e007      	b.n	8001cbe <__sfputs_r+0x22>
 8001cae:	f814 1b01 	ldrb.w	r1, [r4], #1
 8001cb2:	463a      	mov	r2, r7
 8001cb4:	4630      	mov	r0, r6
 8001cb6:	f7ff ffdc 	bl	8001c72 <__sfputc_r>
 8001cba:	1c43      	adds	r3, r0, #1
 8001cbc:	d1f3      	bne.n	8001ca6 <__sfputs_r+0xa>
 8001cbe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08001cc0 <_vfiprintf_r>:
 8001cc0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001cc4:	460d      	mov	r5, r1
 8001cc6:	b09d      	sub	sp, #116	; 0x74
 8001cc8:	4614      	mov	r4, r2
 8001cca:	4698      	mov	r8, r3
 8001ccc:	4606      	mov	r6, r0
 8001cce:	b118      	cbz	r0, 8001cd8 <_vfiprintf_r+0x18>
 8001cd0:	6a03      	ldr	r3, [r0, #32]
 8001cd2:	b90b      	cbnz	r3, 8001cd8 <_vfiprintf_r+0x18>
 8001cd4:	f7ff fce8 	bl	80016a8 <__sinit>
 8001cd8:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8001cda:	07d9      	lsls	r1, r3, #31
 8001cdc:	d405      	bmi.n	8001cea <_vfiprintf_r+0x2a>
 8001cde:	89ab      	ldrh	r3, [r5, #12]
 8001ce0:	059a      	lsls	r2, r3, #22
 8001ce2:	d402      	bmi.n	8001cea <_vfiprintf_r+0x2a>
 8001ce4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8001ce6:	f7ff fdd2 	bl	800188e <__retarget_lock_acquire_recursive>
 8001cea:	89ab      	ldrh	r3, [r5, #12]
 8001cec:	071b      	lsls	r3, r3, #28
 8001cee:	d501      	bpl.n	8001cf4 <_vfiprintf_r+0x34>
 8001cf0:	692b      	ldr	r3, [r5, #16]
 8001cf2:	b99b      	cbnz	r3, 8001d1c <_vfiprintf_r+0x5c>
 8001cf4:	4629      	mov	r1, r5
 8001cf6:	4630      	mov	r0, r6
 8001cf8:	f000 faca 	bl	8002290 <__swsetup_r>
 8001cfc:	b170      	cbz	r0, 8001d1c <_vfiprintf_r+0x5c>
 8001cfe:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8001d00:	07dc      	lsls	r4, r3, #31
 8001d02:	d504      	bpl.n	8001d0e <_vfiprintf_r+0x4e>
 8001d04:	f04f 30ff 	mov.w	r0, #4294967295
 8001d08:	b01d      	add	sp, #116	; 0x74
 8001d0a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8001d0e:	89ab      	ldrh	r3, [r5, #12]
 8001d10:	0598      	lsls	r0, r3, #22
 8001d12:	d4f7      	bmi.n	8001d04 <_vfiprintf_r+0x44>
 8001d14:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8001d16:	f7ff fdbb 	bl	8001890 <__retarget_lock_release_recursive>
 8001d1a:	e7f3      	b.n	8001d04 <_vfiprintf_r+0x44>
 8001d1c:	2300      	movs	r3, #0
 8001d1e:	9309      	str	r3, [sp, #36]	; 0x24
 8001d20:	2320      	movs	r3, #32
 8001d22:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8001d26:	f8cd 800c 	str.w	r8, [sp, #12]
 8001d2a:	2330      	movs	r3, #48	; 0x30
 8001d2c:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 8001ee0 <_vfiprintf_r+0x220>
 8001d30:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8001d34:	f04f 0901 	mov.w	r9, #1
 8001d38:	4623      	mov	r3, r4
 8001d3a:	469a      	mov	sl, r3
 8001d3c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8001d40:	b10a      	cbz	r2, 8001d46 <_vfiprintf_r+0x86>
 8001d42:	2a25      	cmp	r2, #37	; 0x25
 8001d44:	d1f9      	bne.n	8001d3a <_vfiprintf_r+0x7a>
 8001d46:	ebba 0b04 	subs.w	fp, sl, r4
 8001d4a:	d00b      	beq.n	8001d64 <_vfiprintf_r+0xa4>
 8001d4c:	465b      	mov	r3, fp
 8001d4e:	4622      	mov	r2, r4
 8001d50:	4629      	mov	r1, r5
 8001d52:	4630      	mov	r0, r6
 8001d54:	f7ff ffa2 	bl	8001c9c <__sfputs_r>
 8001d58:	3001      	adds	r0, #1
 8001d5a:	f000 80a9 	beq.w	8001eb0 <_vfiprintf_r+0x1f0>
 8001d5e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8001d60:	445a      	add	r2, fp
 8001d62:	9209      	str	r2, [sp, #36]	; 0x24
 8001d64:	f89a 3000 	ldrb.w	r3, [sl]
 8001d68:	2b00      	cmp	r3, #0
 8001d6a:	f000 80a1 	beq.w	8001eb0 <_vfiprintf_r+0x1f0>
 8001d6e:	2300      	movs	r3, #0
 8001d70:	f04f 32ff 	mov.w	r2, #4294967295
 8001d74:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8001d78:	f10a 0a01 	add.w	sl, sl, #1
 8001d7c:	9304      	str	r3, [sp, #16]
 8001d7e:	9307      	str	r3, [sp, #28]
 8001d80:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8001d84:	931a      	str	r3, [sp, #104]	; 0x68
 8001d86:	4654      	mov	r4, sl
 8001d88:	2205      	movs	r2, #5
 8001d8a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8001d8e:	4854      	ldr	r0, [pc, #336]	; (8001ee0 <_vfiprintf_r+0x220>)
 8001d90:	f7fe fa1e 	bl	80001d0 <memchr>
 8001d94:	9a04      	ldr	r2, [sp, #16]
 8001d96:	b9d8      	cbnz	r0, 8001dd0 <_vfiprintf_r+0x110>
 8001d98:	06d1      	lsls	r1, r2, #27
 8001d9a:	bf44      	itt	mi
 8001d9c:	2320      	movmi	r3, #32
 8001d9e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8001da2:	0713      	lsls	r3, r2, #28
 8001da4:	bf44      	itt	mi
 8001da6:	232b      	movmi	r3, #43	; 0x2b
 8001da8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8001dac:	f89a 3000 	ldrb.w	r3, [sl]
 8001db0:	2b2a      	cmp	r3, #42	; 0x2a
 8001db2:	d015      	beq.n	8001de0 <_vfiprintf_r+0x120>
 8001db4:	9a07      	ldr	r2, [sp, #28]
 8001db6:	4654      	mov	r4, sl
 8001db8:	2000      	movs	r0, #0
 8001dba:	f04f 0c0a 	mov.w	ip, #10
 8001dbe:	4621      	mov	r1, r4
 8001dc0:	f811 3b01 	ldrb.w	r3, [r1], #1
 8001dc4:	3b30      	subs	r3, #48	; 0x30
 8001dc6:	2b09      	cmp	r3, #9
 8001dc8:	d94d      	bls.n	8001e66 <_vfiprintf_r+0x1a6>
 8001dca:	b1b0      	cbz	r0, 8001dfa <_vfiprintf_r+0x13a>
 8001dcc:	9207      	str	r2, [sp, #28]
 8001dce:	e014      	b.n	8001dfa <_vfiprintf_r+0x13a>
 8001dd0:	eba0 0308 	sub.w	r3, r0, r8
 8001dd4:	fa09 f303 	lsl.w	r3, r9, r3
 8001dd8:	4313      	orrs	r3, r2
 8001dda:	9304      	str	r3, [sp, #16]
 8001ddc:	46a2      	mov	sl, r4
 8001dde:	e7d2      	b.n	8001d86 <_vfiprintf_r+0xc6>
 8001de0:	9b03      	ldr	r3, [sp, #12]
 8001de2:	1d19      	adds	r1, r3, #4
 8001de4:	681b      	ldr	r3, [r3, #0]
 8001de6:	9103      	str	r1, [sp, #12]
 8001de8:	2b00      	cmp	r3, #0
 8001dea:	bfbb      	ittet	lt
 8001dec:	425b      	neglt	r3, r3
 8001dee:	f042 0202 	orrlt.w	r2, r2, #2
 8001df2:	9307      	strge	r3, [sp, #28]
 8001df4:	9307      	strlt	r3, [sp, #28]
 8001df6:	bfb8      	it	lt
 8001df8:	9204      	strlt	r2, [sp, #16]
 8001dfa:	7823      	ldrb	r3, [r4, #0]
 8001dfc:	2b2e      	cmp	r3, #46	; 0x2e
 8001dfe:	d10c      	bne.n	8001e1a <_vfiprintf_r+0x15a>
 8001e00:	7863      	ldrb	r3, [r4, #1]
 8001e02:	2b2a      	cmp	r3, #42	; 0x2a
 8001e04:	d134      	bne.n	8001e70 <_vfiprintf_r+0x1b0>
 8001e06:	9b03      	ldr	r3, [sp, #12]
 8001e08:	1d1a      	adds	r2, r3, #4
 8001e0a:	681b      	ldr	r3, [r3, #0]
 8001e0c:	9203      	str	r2, [sp, #12]
 8001e0e:	2b00      	cmp	r3, #0
 8001e10:	bfb8      	it	lt
 8001e12:	f04f 33ff 	movlt.w	r3, #4294967295
 8001e16:	3402      	adds	r4, #2
 8001e18:	9305      	str	r3, [sp, #20]
 8001e1a:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8001ee4 <_vfiprintf_r+0x224>
 8001e1e:	7821      	ldrb	r1, [r4, #0]
 8001e20:	2203      	movs	r2, #3
 8001e22:	4650      	mov	r0, sl
 8001e24:	f7fe f9d4 	bl	80001d0 <memchr>
 8001e28:	b138      	cbz	r0, 8001e3a <_vfiprintf_r+0x17a>
 8001e2a:	9b04      	ldr	r3, [sp, #16]
 8001e2c:	eba0 000a 	sub.w	r0, r0, sl
 8001e30:	2240      	movs	r2, #64	; 0x40
 8001e32:	4082      	lsls	r2, r0
 8001e34:	4313      	orrs	r3, r2
 8001e36:	3401      	adds	r4, #1
 8001e38:	9304      	str	r3, [sp, #16]
 8001e3a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8001e3e:	482a      	ldr	r0, [pc, #168]	; (8001ee8 <_vfiprintf_r+0x228>)
 8001e40:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8001e44:	2206      	movs	r2, #6
 8001e46:	f7fe f9c3 	bl	80001d0 <memchr>
 8001e4a:	2800      	cmp	r0, #0
 8001e4c:	d03f      	beq.n	8001ece <_vfiprintf_r+0x20e>
 8001e4e:	4b27      	ldr	r3, [pc, #156]	; (8001eec <_vfiprintf_r+0x22c>)
 8001e50:	bb1b      	cbnz	r3, 8001e9a <_vfiprintf_r+0x1da>
 8001e52:	9b03      	ldr	r3, [sp, #12]
 8001e54:	3307      	adds	r3, #7
 8001e56:	f023 0307 	bic.w	r3, r3, #7
 8001e5a:	3308      	adds	r3, #8
 8001e5c:	9303      	str	r3, [sp, #12]
 8001e5e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8001e60:	443b      	add	r3, r7
 8001e62:	9309      	str	r3, [sp, #36]	; 0x24
 8001e64:	e768      	b.n	8001d38 <_vfiprintf_r+0x78>
 8001e66:	fb0c 3202 	mla	r2, ip, r2, r3
 8001e6a:	460c      	mov	r4, r1
 8001e6c:	2001      	movs	r0, #1
 8001e6e:	e7a6      	b.n	8001dbe <_vfiprintf_r+0xfe>
 8001e70:	2300      	movs	r3, #0
 8001e72:	3401      	adds	r4, #1
 8001e74:	9305      	str	r3, [sp, #20]
 8001e76:	4619      	mov	r1, r3
 8001e78:	f04f 0c0a 	mov.w	ip, #10
 8001e7c:	4620      	mov	r0, r4
 8001e7e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8001e82:	3a30      	subs	r2, #48	; 0x30
 8001e84:	2a09      	cmp	r2, #9
 8001e86:	d903      	bls.n	8001e90 <_vfiprintf_r+0x1d0>
 8001e88:	2b00      	cmp	r3, #0
 8001e8a:	d0c6      	beq.n	8001e1a <_vfiprintf_r+0x15a>
 8001e8c:	9105      	str	r1, [sp, #20]
 8001e8e:	e7c4      	b.n	8001e1a <_vfiprintf_r+0x15a>
 8001e90:	fb0c 2101 	mla	r1, ip, r1, r2
 8001e94:	4604      	mov	r4, r0
 8001e96:	2301      	movs	r3, #1
 8001e98:	e7f0      	b.n	8001e7c <_vfiprintf_r+0x1bc>
 8001e9a:	ab03      	add	r3, sp, #12
 8001e9c:	9300      	str	r3, [sp, #0]
 8001e9e:	462a      	mov	r2, r5
 8001ea0:	4b13      	ldr	r3, [pc, #76]	; (8001ef0 <_vfiprintf_r+0x230>)
 8001ea2:	a904      	add	r1, sp, #16
 8001ea4:	4630      	mov	r0, r6
 8001ea6:	f3af 8000 	nop.w
 8001eaa:	4607      	mov	r7, r0
 8001eac:	1c78      	adds	r0, r7, #1
 8001eae:	d1d6      	bne.n	8001e5e <_vfiprintf_r+0x19e>
 8001eb0:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8001eb2:	07d9      	lsls	r1, r3, #31
 8001eb4:	d405      	bmi.n	8001ec2 <_vfiprintf_r+0x202>
 8001eb6:	89ab      	ldrh	r3, [r5, #12]
 8001eb8:	059a      	lsls	r2, r3, #22
 8001eba:	d402      	bmi.n	8001ec2 <_vfiprintf_r+0x202>
 8001ebc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8001ebe:	f7ff fce7 	bl	8001890 <__retarget_lock_release_recursive>
 8001ec2:	89ab      	ldrh	r3, [r5, #12]
 8001ec4:	065b      	lsls	r3, r3, #25
 8001ec6:	f53f af1d 	bmi.w	8001d04 <_vfiprintf_r+0x44>
 8001eca:	9809      	ldr	r0, [sp, #36]	; 0x24
 8001ecc:	e71c      	b.n	8001d08 <_vfiprintf_r+0x48>
 8001ece:	ab03      	add	r3, sp, #12
 8001ed0:	9300      	str	r3, [sp, #0]
 8001ed2:	462a      	mov	r2, r5
 8001ed4:	4b06      	ldr	r3, [pc, #24]	; (8001ef0 <_vfiprintf_r+0x230>)
 8001ed6:	a904      	add	r1, sp, #16
 8001ed8:	4630      	mov	r0, r6
 8001eda:	f000 f879 	bl	8001fd0 <_printf_i>
 8001ede:	e7e4      	b.n	8001eaa <_vfiprintf_r+0x1ea>
 8001ee0:	080026c0 	.word	0x080026c0
 8001ee4:	080026c6 	.word	0x080026c6
 8001ee8:	080026ca 	.word	0x080026ca
 8001eec:	00000000 	.word	0x00000000
 8001ef0:	08001c9d 	.word	0x08001c9d

08001ef4 <_printf_common>:
 8001ef4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8001ef8:	4616      	mov	r6, r2
 8001efa:	4699      	mov	r9, r3
 8001efc:	688a      	ldr	r2, [r1, #8]
 8001efe:	690b      	ldr	r3, [r1, #16]
 8001f00:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8001f04:	4293      	cmp	r3, r2
 8001f06:	bfb8      	it	lt
 8001f08:	4613      	movlt	r3, r2
 8001f0a:	6033      	str	r3, [r6, #0]
 8001f0c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8001f10:	4607      	mov	r7, r0
 8001f12:	460c      	mov	r4, r1
 8001f14:	b10a      	cbz	r2, 8001f1a <_printf_common+0x26>
 8001f16:	3301      	adds	r3, #1
 8001f18:	6033      	str	r3, [r6, #0]
 8001f1a:	6823      	ldr	r3, [r4, #0]
 8001f1c:	0699      	lsls	r1, r3, #26
 8001f1e:	bf42      	ittt	mi
 8001f20:	6833      	ldrmi	r3, [r6, #0]
 8001f22:	3302      	addmi	r3, #2
 8001f24:	6033      	strmi	r3, [r6, #0]
 8001f26:	6825      	ldr	r5, [r4, #0]
 8001f28:	f015 0506 	ands.w	r5, r5, #6
 8001f2c:	d106      	bne.n	8001f3c <_printf_common+0x48>
 8001f2e:	f104 0a19 	add.w	sl, r4, #25
 8001f32:	68e3      	ldr	r3, [r4, #12]
 8001f34:	6832      	ldr	r2, [r6, #0]
 8001f36:	1a9b      	subs	r3, r3, r2
 8001f38:	42ab      	cmp	r3, r5
 8001f3a:	dc26      	bgt.n	8001f8a <_printf_common+0x96>
 8001f3c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8001f40:	1e13      	subs	r3, r2, #0
 8001f42:	6822      	ldr	r2, [r4, #0]
 8001f44:	bf18      	it	ne
 8001f46:	2301      	movne	r3, #1
 8001f48:	0692      	lsls	r2, r2, #26
 8001f4a:	d42b      	bmi.n	8001fa4 <_printf_common+0xb0>
 8001f4c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8001f50:	4649      	mov	r1, r9
 8001f52:	4638      	mov	r0, r7
 8001f54:	47c0      	blx	r8
 8001f56:	3001      	adds	r0, #1
 8001f58:	d01e      	beq.n	8001f98 <_printf_common+0xa4>
 8001f5a:	6823      	ldr	r3, [r4, #0]
 8001f5c:	6922      	ldr	r2, [r4, #16]
 8001f5e:	f003 0306 	and.w	r3, r3, #6
 8001f62:	2b04      	cmp	r3, #4
 8001f64:	bf02      	ittt	eq
 8001f66:	68e5      	ldreq	r5, [r4, #12]
 8001f68:	6833      	ldreq	r3, [r6, #0]
 8001f6a:	1aed      	subeq	r5, r5, r3
 8001f6c:	68a3      	ldr	r3, [r4, #8]
 8001f6e:	bf0c      	ite	eq
 8001f70:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8001f74:	2500      	movne	r5, #0
 8001f76:	4293      	cmp	r3, r2
 8001f78:	bfc4      	itt	gt
 8001f7a:	1a9b      	subgt	r3, r3, r2
 8001f7c:	18ed      	addgt	r5, r5, r3
 8001f7e:	2600      	movs	r6, #0
 8001f80:	341a      	adds	r4, #26
 8001f82:	42b5      	cmp	r5, r6
 8001f84:	d11a      	bne.n	8001fbc <_printf_common+0xc8>
 8001f86:	2000      	movs	r0, #0
 8001f88:	e008      	b.n	8001f9c <_printf_common+0xa8>
 8001f8a:	2301      	movs	r3, #1
 8001f8c:	4652      	mov	r2, sl
 8001f8e:	4649      	mov	r1, r9
 8001f90:	4638      	mov	r0, r7
 8001f92:	47c0      	blx	r8
 8001f94:	3001      	adds	r0, #1
 8001f96:	d103      	bne.n	8001fa0 <_printf_common+0xac>
 8001f98:	f04f 30ff 	mov.w	r0, #4294967295
 8001f9c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001fa0:	3501      	adds	r5, #1
 8001fa2:	e7c6      	b.n	8001f32 <_printf_common+0x3e>
 8001fa4:	18e1      	adds	r1, r4, r3
 8001fa6:	1c5a      	adds	r2, r3, #1
 8001fa8:	2030      	movs	r0, #48	; 0x30
 8001faa:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8001fae:	4422      	add	r2, r4
 8001fb0:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8001fb4:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8001fb8:	3302      	adds	r3, #2
 8001fba:	e7c7      	b.n	8001f4c <_printf_common+0x58>
 8001fbc:	2301      	movs	r3, #1
 8001fbe:	4622      	mov	r2, r4
 8001fc0:	4649      	mov	r1, r9
 8001fc2:	4638      	mov	r0, r7
 8001fc4:	47c0      	blx	r8
 8001fc6:	3001      	adds	r0, #1
 8001fc8:	d0e6      	beq.n	8001f98 <_printf_common+0xa4>
 8001fca:	3601      	adds	r6, #1
 8001fcc:	e7d9      	b.n	8001f82 <_printf_common+0x8e>
	...

08001fd0 <_printf_i>:
 8001fd0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8001fd4:	7e0f      	ldrb	r7, [r1, #24]
 8001fd6:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8001fd8:	2f78      	cmp	r7, #120	; 0x78
 8001fda:	4691      	mov	r9, r2
 8001fdc:	4680      	mov	r8, r0
 8001fde:	460c      	mov	r4, r1
 8001fe0:	469a      	mov	sl, r3
 8001fe2:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8001fe6:	d807      	bhi.n	8001ff8 <_printf_i+0x28>
 8001fe8:	2f62      	cmp	r7, #98	; 0x62
 8001fea:	d80a      	bhi.n	8002002 <_printf_i+0x32>
 8001fec:	2f00      	cmp	r7, #0
 8001fee:	f000 80d4 	beq.w	800219a <_printf_i+0x1ca>
 8001ff2:	2f58      	cmp	r7, #88	; 0x58
 8001ff4:	f000 80c0 	beq.w	8002178 <_printf_i+0x1a8>
 8001ff8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8001ffc:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8002000:	e03a      	b.n	8002078 <_printf_i+0xa8>
 8002002:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8002006:	2b15      	cmp	r3, #21
 8002008:	d8f6      	bhi.n	8001ff8 <_printf_i+0x28>
 800200a:	a101      	add	r1, pc, #4	; (adr r1, 8002010 <_printf_i+0x40>)
 800200c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8002010:	08002069 	.word	0x08002069
 8002014:	0800207d 	.word	0x0800207d
 8002018:	08001ff9 	.word	0x08001ff9
 800201c:	08001ff9 	.word	0x08001ff9
 8002020:	08001ff9 	.word	0x08001ff9
 8002024:	08001ff9 	.word	0x08001ff9
 8002028:	0800207d 	.word	0x0800207d
 800202c:	08001ff9 	.word	0x08001ff9
 8002030:	08001ff9 	.word	0x08001ff9
 8002034:	08001ff9 	.word	0x08001ff9
 8002038:	08001ff9 	.word	0x08001ff9
 800203c:	08002181 	.word	0x08002181
 8002040:	080020a9 	.word	0x080020a9
 8002044:	0800213b 	.word	0x0800213b
 8002048:	08001ff9 	.word	0x08001ff9
 800204c:	08001ff9 	.word	0x08001ff9
 8002050:	080021a3 	.word	0x080021a3
 8002054:	08001ff9 	.word	0x08001ff9
 8002058:	080020a9 	.word	0x080020a9
 800205c:	08001ff9 	.word	0x08001ff9
 8002060:	08001ff9 	.word	0x08001ff9
 8002064:	08002143 	.word	0x08002143
 8002068:	682b      	ldr	r3, [r5, #0]
 800206a:	1d1a      	adds	r2, r3, #4
 800206c:	681b      	ldr	r3, [r3, #0]
 800206e:	602a      	str	r2, [r5, #0]
 8002070:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8002074:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8002078:	2301      	movs	r3, #1
 800207a:	e09f      	b.n	80021bc <_printf_i+0x1ec>
 800207c:	6820      	ldr	r0, [r4, #0]
 800207e:	682b      	ldr	r3, [r5, #0]
 8002080:	0607      	lsls	r7, r0, #24
 8002082:	f103 0104 	add.w	r1, r3, #4
 8002086:	6029      	str	r1, [r5, #0]
 8002088:	d501      	bpl.n	800208e <_printf_i+0xbe>
 800208a:	681e      	ldr	r6, [r3, #0]
 800208c:	e003      	b.n	8002096 <_printf_i+0xc6>
 800208e:	0646      	lsls	r6, r0, #25
 8002090:	d5fb      	bpl.n	800208a <_printf_i+0xba>
 8002092:	f9b3 6000 	ldrsh.w	r6, [r3]
 8002096:	2e00      	cmp	r6, #0
 8002098:	da03      	bge.n	80020a2 <_printf_i+0xd2>
 800209a:	232d      	movs	r3, #45	; 0x2d
 800209c:	4276      	negs	r6, r6
 800209e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80020a2:	485a      	ldr	r0, [pc, #360]	; (800220c <_printf_i+0x23c>)
 80020a4:	230a      	movs	r3, #10
 80020a6:	e012      	b.n	80020ce <_printf_i+0xfe>
 80020a8:	682b      	ldr	r3, [r5, #0]
 80020aa:	6820      	ldr	r0, [r4, #0]
 80020ac:	1d19      	adds	r1, r3, #4
 80020ae:	6029      	str	r1, [r5, #0]
 80020b0:	0605      	lsls	r5, r0, #24
 80020b2:	d501      	bpl.n	80020b8 <_printf_i+0xe8>
 80020b4:	681e      	ldr	r6, [r3, #0]
 80020b6:	e002      	b.n	80020be <_printf_i+0xee>
 80020b8:	0641      	lsls	r1, r0, #25
 80020ba:	d5fb      	bpl.n	80020b4 <_printf_i+0xe4>
 80020bc:	881e      	ldrh	r6, [r3, #0]
 80020be:	4853      	ldr	r0, [pc, #332]	; (800220c <_printf_i+0x23c>)
 80020c0:	2f6f      	cmp	r7, #111	; 0x6f
 80020c2:	bf0c      	ite	eq
 80020c4:	2308      	moveq	r3, #8
 80020c6:	230a      	movne	r3, #10
 80020c8:	2100      	movs	r1, #0
 80020ca:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80020ce:	6865      	ldr	r5, [r4, #4]
 80020d0:	60a5      	str	r5, [r4, #8]
 80020d2:	2d00      	cmp	r5, #0
 80020d4:	bfa2      	ittt	ge
 80020d6:	6821      	ldrge	r1, [r4, #0]
 80020d8:	f021 0104 	bicge.w	r1, r1, #4
 80020dc:	6021      	strge	r1, [r4, #0]
 80020de:	b90e      	cbnz	r6, 80020e4 <_printf_i+0x114>
 80020e0:	2d00      	cmp	r5, #0
 80020e2:	d04b      	beq.n	800217c <_printf_i+0x1ac>
 80020e4:	4615      	mov	r5, r2
 80020e6:	fbb6 f1f3 	udiv	r1, r6, r3
 80020ea:	fb03 6711 	mls	r7, r3, r1, r6
 80020ee:	5dc7      	ldrb	r7, [r0, r7]
 80020f0:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80020f4:	4637      	mov	r7, r6
 80020f6:	42bb      	cmp	r3, r7
 80020f8:	460e      	mov	r6, r1
 80020fa:	d9f4      	bls.n	80020e6 <_printf_i+0x116>
 80020fc:	2b08      	cmp	r3, #8
 80020fe:	d10b      	bne.n	8002118 <_printf_i+0x148>
 8002100:	6823      	ldr	r3, [r4, #0]
 8002102:	07de      	lsls	r6, r3, #31
 8002104:	d508      	bpl.n	8002118 <_printf_i+0x148>
 8002106:	6923      	ldr	r3, [r4, #16]
 8002108:	6861      	ldr	r1, [r4, #4]
 800210a:	4299      	cmp	r1, r3
 800210c:	bfde      	ittt	le
 800210e:	2330      	movle	r3, #48	; 0x30
 8002110:	f805 3c01 	strble.w	r3, [r5, #-1]
 8002114:	f105 35ff 	addle.w	r5, r5, #4294967295
 8002118:	1b52      	subs	r2, r2, r5
 800211a:	6122      	str	r2, [r4, #16]
 800211c:	f8cd a000 	str.w	sl, [sp]
 8002120:	464b      	mov	r3, r9
 8002122:	aa03      	add	r2, sp, #12
 8002124:	4621      	mov	r1, r4
 8002126:	4640      	mov	r0, r8
 8002128:	f7ff fee4 	bl	8001ef4 <_printf_common>
 800212c:	3001      	adds	r0, #1
 800212e:	d14a      	bne.n	80021c6 <_printf_i+0x1f6>
 8002130:	f04f 30ff 	mov.w	r0, #4294967295
 8002134:	b004      	add	sp, #16
 8002136:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800213a:	6823      	ldr	r3, [r4, #0]
 800213c:	f043 0320 	orr.w	r3, r3, #32
 8002140:	6023      	str	r3, [r4, #0]
 8002142:	4833      	ldr	r0, [pc, #204]	; (8002210 <_printf_i+0x240>)
 8002144:	2778      	movs	r7, #120	; 0x78
 8002146:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800214a:	6823      	ldr	r3, [r4, #0]
 800214c:	6829      	ldr	r1, [r5, #0]
 800214e:	061f      	lsls	r7, r3, #24
 8002150:	f851 6b04 	ldr.w	r6, [r1], #4
 8002154:	d402      	bmi.n	800215c <_printf_i+0x18c>
 8002156:	065f      	lsls	r7, r3, #25
 8002158:	bf48      	it	mi
 800215a:	b2b6      	uxthmi	r6, r6
 800215c:	07df      	lsls	r7, r3, #31
 800215e:	bf48      	it	mi
 8002160:	f043 0320 	orrmi.w	r3, r3, #32
 8002164:	6029      	str	r1, [r5, #0]
 8002166:	bf48      	it	mi
 8002168:	6023      	strmi	r3, [r4, #0]
 800216a:	b91e      	cbnz	r6, 8002174 <_printf_i+0x1a4>
 800216c:	6823      	ldr	r3, [r4, #0]
 800216e:	f023 0320 	bic.w	r3, r3, #32
 8002172:	6023      	str	r3, [r4, #0]
 8002174:	2310      	movs	r3, #16
 8002176:	e7a7      	b.n	80020c8 <_printf_i+0xf8>
 8002178:	4824      	ldr	r0, [pc, #144]	; (800220c <_printf_i+0x23c>)
 800217a:	e7e4      	b.n	8002146 <_printf_i+0x176>
 800217c:	4615      	mov	r5, r2
 800217e:	e7bd      	b.n	80020fc <_printf_i+0x12c>
 8002180:	682b      	ldr	r3, [r5, #0]
 8002182:	6826      	ldr	r6, [r4, #0]
 8002184:	6961      	ldr	r1, [r4, #20]
 8002186:	1d18      	adds	r0, r3, #4
 8002188:	6028      	str	r0, [r5, #0]
 800218a:	0635      	lsls	r5, r6, #24
 800218c:	681b      	ldr	r3, [r3, #0]
 800218e:	d501      	bpl.n	8002194 <_printf_i+0x1c4>
 8002190:	6019      	str	r1, [r3, #0]
 8002192:	e002      	b.n	800219a <_printf_i+0x1ca>
 8002194:	0670      	lsls	r0, r6, #25
 8002196:	d5fb      	bpl.n	8002190 <_printf_i+0x1c0>
 8002198:	8019      	strh	r1, [r3, #0]
 800219a:	2300      	movs	r3, #0
 800219c:	6123      	str	r3, [r4, #16]
 800219e:	4615      	mov	r5, r2
 80021a0:	e7bc      	b.n	800211c <_printf_i+0x14c>
 80021a2:	682b      	ldr	r3, [r5, #0]
 80021a4:	1d1a      	adds	r2, r3, #4
 80021a6:	602a      	str	r2, [r5, #0]
 80021a8:	681d      	ldr	r5, [r3, #0]
 80021aa:	6862      	ldr	r2, [r4, #4]
 80021ac:	2100      	movs	r1, #0
 80021ae:	4628      	mov	r0, r5
 80021b0:	f7fe f80e 	bl	80001d0 <memchr>
 80021b4:	b108      	cbz	r0, 80021ba <_printf_i+0x1ea>
 80021b6:	1b40      	subs	r0, r0, r5
 80021b8:	6060      	str	r0, [r4, #4]
 80021ba:	6863      	ldr	r3, [r4, #4]
 80021bc:	6123      	str	r3, [r4, #16]
 80021be:	2300      	movs	r3, #0
 80021c0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80021c4:	e7aa      	b.n	800211c <_printf_i+0x14c>
 80021c6:	6923      	ldr	r3, [r4, #16]
 80021c8:	462a      	mov	r2, r5
 80021ca:	4649      	mov	r1, r9
 80021cc:	4640      	mov	r0, r8
 80021ce:	47d0      	blx	sl
 80021d0:	3001      	adds	r0, #1
 80021d2:	d0ad      	beq.n	8002130 <_printf_i+0x160>
 80021d4:	6823      	ldr	r3, [r4, #0]
 80021d6:	079b      	lsls	r3, r3, #30
 80021d8:	d413      	bmi.n	8002202 <_printf_i+0x232>
 80021da:	68e0      	ldr	r0, [r4, #12]
 80021dc:	9b03      	ldr	r3, [sp, #12]
 80021de:	4298      	cmp	r0, r3
 80021e0:	bfb8      	it	lt
 80021e2:	4618      	movlt	r0, r3
 80021e4:	e7a6      	b.n	8002134 <_printf_i+0x164>
 80021e6:	2301      	movs	r3, #1
 80021e8:	4632      	mov	r2, r6
 80021ea:	4649      	mov	r1, r9
 80021ec:	4640      	mov	r0, r8
 80021ee:	47d0      	blx	sl
 80021f0:	3001      	adds	r0, #1
 80021f2:	d09d      	beq.n	8002130 <_printf_i+0x160>
 80021f4:	3501      	adds	r5, #1
 80021f6:	68e3      	ldr	r3, [r4, #12]
 80021f8:	9903      	ldr	r1, [sp, #12]
 80021fa:	1a5b      	subs	r3, r3, r1
 80021fc:	42ab      	cmp	r3, r5
 80021fe:	dcf2      	bgt.n	80021e6 <_printf_i+0x216>
 8002200:	e7eb      	b.n	80021da <_printf_i+0x20a>
 8002202:	2500      	movs	r5, #0
 8002204:	f104 0619 	add.w	r6, r4, #25
 8002208:	e7f5      	b.n	80021f6 <_printf_i+0x226>
 800220a:	bf00      	nop
 800220c:	080026d1 	.word	0x080026d1
 8002210:	080026e2 	.word	0x080026e2

08002214 <__swbuf_r>:
 8002214:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002216:	460e      	mov	r6, r1
 8002218:	4614      	mov	r4, r2
 800221a:	4605      	mov	r5, r0
 800221c:	b118      	cbz	r0, 8002226 <__swbuf_r+0x12>
 800221e:	6a03      	ldr	r3, [r0, #32]
 8002220:	b90b      	cbnz	r3, 8002226 <__swbuf_r+0x12>
 8002222:	f7ff fa41 	bl	80016a8 <__sinit>
 8002226:	69a3      	ldr	r3, [r4, #24]
 8002228:	60a3      	str	r3, [r4, #8]
 800222a:	89a3      	ldrh	r3, [r4, #12]
 800222c:	071a      	lsls	r2, r3, #28
 800222e:	d525      	bpl.n	800227c <__swbuf_r+0x68>
 8002230:	6923      	ldr	r3, [r4, #16]
 8002232:	b31b      	cbz	r3, 800227c <__swbuf_r+0x68>
 8002234:	6823      	ldr	r3, [r4, #0]
 8002236:	6922      	ldr	r2, [r4, #16]
 8002238:	1a98      	subs	r0, r3, r2
 800223a:	6963      	ldr	r3, [r4, #20]
 800223c:	b2f6      	uxtb	r6, r6
 800223e:	4283      	cmp	r3, r0
 8002240:	4637      	mov	r7, r6
 8002242:	dc04      	bgt.n	800224e <__swbuf_r+0x3a>
 8002244:	4621      	mov	r1, r4
 8002246:	4628      	mov	r0, r5
 8002248:	f7ff fcc2 	bl	8001bd0 <_fflush_r>
 800224c:	b9e0      	cbnz	r0, 8002288 <__swbuf_r+0x74>
 800224e:	68a3      	ldr	r3, [r4, #8]
 8002250:	3b01      	subs	r3, #1
 8002252:	60a3      	str	r3, [r4, #8]
 8002254:	6823      	ldr	r3, [r4, #0]
 8002256:	1c5a      	adds	r2, r3, #1
 8002258:	6022      	str	r2, [r4, #0]
 800225a:	701e      	strb	r6, [r3, #0]
 800225c:	6962      	ldr	r2, [r4, #20]
 800225e:	1c43      	adds	r3, r0, #1
 8002260:	429a      	cmp	r2, r3
 8002262:	d004      	beq.n	800226e <__swbuf_r+0x5a>
 8002264:	89a3      	ldrh	r3, [r4, #12]
 8002266:	07db      	lsls	r3, r3, #31
 8002268:	d506      	bpl.n	8002278 <__swbuf_r+0x64>
 800226a:	2e0a      	cmp	r6, #10
 800226c:	d104      	bne.n	8002278 <__swbuf_r+0x64>
 800226e:	4621      	mov	r1, r4
 8002270:	4628      	mov	r0, r5
 8002272:	f7ff fcad 	bl	8001bd0 <_fflush_r>
 8002276:	b938      	cbnz	r0, 8002288 <__swbuf_r+0x74>
 8002278:	4638      	mov	r0, r7
 800227a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800227c:	4621      	mov	r1, r4
 800227e:	4628      	mov	r0, r5
 8002280:	f000 f806 	bl	8002290 <__swsetup_r>
 8002284:	2800      	cmp	r0, #0
 8002286:	d0d5      	beq.n	8002234 <__swbuf_r+0x20>
 8002288:	f04f 37ff 	mov.w	r7, #4294967295
 800228c:	e7f4      	b.n	8002278 <__swbuf_r+0x64>
	...

08002290 <__swsetup_r>:
 8002290:	b538      	push	{r3, r4, r5, lr}
 8002292:	4b2a      	ldr	r3, [pc, #168]	; (800233c <__swsetup_r+0xac>)
 8002294:	4605      	mov	r5, r0
 8002296:	6818      	ldr	r0, [r3, #0]
 8002298:	460c      	mov	r4, r1
 800229a:	b118      	cbz	r0, 80022a4 <__swsetup_r+0x14>
 800229c:	6a03      	ldr	r3, [r0, #32]
 800229e:	b90b      	cbnz	r3, 80022a4 <__swsetup_r+0x14>
 80022a0:	f7ff fa02 	bl	80016a8 <__sinit>
 80022a4:	89a3      	ldrh	r3, [r4, #12]
 80022a6:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80022aa:	0718      	lsls	r0, r3, #28
 80022ac:	d422      	bmi.n	80022f4 <__swsetup_r+0x64>
 80022ae:	06d9      	lsls	r1, r3, #27
 80022b0:	d407      	bmi.n	80022c2 <__swsetup_r+0x32>
 80022b2:	2309      	movs	r3, #9
 80022b4:	602b      	str	r3, [r5, #0]
 80022b6:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80022ba:	81a3      	strh	r3, [r4, #12]
 80022bc:	f04f 30ff 	mov.w	r0, #4294967295
 80022c0:	e034      	b.n	800232c <__swsetup_r+0x9c>
 80022c2:	0758      	lsls	r0, r3, #29
 80022c4:	d512      	bpl.n	80022ec <__swsetup_r+0x5c>
 80022c6:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80022c8:	b141      	cbz	r1, 80022dc <__swsetup_r+0x4c>
 80022ca:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80022ce:	4299      	cmp	r1, r3
 80022d0:	d002      	beq.n	80022d8 <__swsetup_r+0x48>
 80022d2:	4628      	mov	r0, r5
 80022d4:	f7ff fafc 	bl	80018d0 <_free_r>
 80022d8:	2300      	movs	r3, #0
 80022da:	6363      	str	r3, [r4, #52]	; 0x34
 80022dc:	89a3      	ldrh	r3, [r4, #12]
 80022de:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80022e2:	81a3      	strh	r3, [r4, #12]
 80022e4:	2300      	movs	r3, #0
 80022e6:	6063      	str	r3, [r4, #4]
 80022e8:	6923      	ldr	r3, [r4, #16]
 80022ea:	6023      	str	r3, [r4, #0]
 80022ec:	89a3      	ldrh	r3, [r4, #12]
 80022ee:	f043 0308 	orr.w	r3, r3, #8
 80022f2:	81a3      	strh	r3, [r4, #12]
 80022f4:	6923      	ldr	r3, [r4, #16]
 80022f6:	b94b      	cbnz	r3, 800230c <__swsetup_r+0x7c>
 80022f8:	89a3      	ldrh	r3, [r4, #12]
 80022fa:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80022fe:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002302:	d003      	beq.n	800230c <__swsetup_r+0x7c>
 8002304:	4621      	mov	r1, r4
 8002306:	4628      	mov	r0, r5
 8002308:	f000 f884 	bl	8002414 <__smakebuf_r>
 800230c:	89a0      	ldrh	r0, [r4, #12]
 800230e:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8002312:	f010 0301 	ands.w	r3, r0, #1
 8002316:	d00a      	beq.n	800232e <__swsetup_r+0x9e>
 8002318:	2300      	movs	r3, #0
 800231a:	60a3      	str	r3, [r4, #8]
 800231c:	6963      	ldr	r3, [r4, #20]
 800231e:	425b      	negs	r3, r3
 8002320:	61a3      	str	r3, [r4, #24]
 8002322:	6923      	ldr	r3, [r4, #16]
 8002324:	b943      	cbnz	r3, 8002338 <__swsetup_r+0xa8>
 8002326:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800232a:	d1c4      	bne.n	80022b6 <__swsetup_r+0x26>
 800232c:	bd38      	pop	{r3, r4, r5, pc}
 800232e:	0781      	lsls	r1, r0, #30
 8002330:	bf58      	it	pl
 8002332:	6963      	ldrpl	r3, [r4, #20]
 8002334:	60a3      	str	r3, [r4, #8]
 8002336:	e7f4      	b.n	8002322 <__swsetup_r+0x92>
 8002338:	2000      	movs	r0, #0
 800233a:	e7f7      	b.n	800232c <__swsetup_r+0x9c>
 800233c:	200000f8 	.word	0x200000f8

08002340 <_raise_r>:
 8002340:	291f      	cmp	r1, #31
 8002342:	b538      	push	{r3, r4, r5, lr}
 8002344:	4604      	mov	r4, r0
 8002346:	460d      	mov	r5, r1
 8002348:	d904      	bls.n	8002354 <_raise_r+0x14>
 800234a:	2316      	movs	r3, #22
 800234c:	6003      	str	r3, [r0, #0]
 800234e:	f04f 30ff 	mov.w	r0, #4294967295
 8002352:	bd38      	pop	{r3, r4, r5, pc}
 8002354:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 8002356:	b112      	cbz	r2, 800235e <_raise_r+0x1e>
 8002358:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800235c:	b94b      	cbnz	r3, 8002372 <_raise_r+0x32>
 800235e:	4620      	mov	r0, r4
 8002360:	f000 f830 	bl	80023c4 <_getpid_r>
 8002364:	462a      	mov	r2, r5
 8002366:	4601      	mov	r1, r0
 8002368:	4620      	mov	r0, r4
 800236a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800236e:	f000 b817 	b.w	80023a0 <_kill_r>
 8002372:	2b01      	cmp	r3, #1
 8002374:	d00a      	beq.n	800238c <_raise_r+0x4c>
 8002376:	1c59      	adds	r1, r3, #1
 8002378:	d103      	bne.n	8002382 <_raise_r+0x42>
 800237a:	2316      	movs	r3, #22
 800237c:	6003      	str	r3, [r0, #0]
 800237e:	2001      	movs	r0, #1
 8002380:	e7e7      	b.n	8002352 <_raise_r+0x12>
 8002382:	2400      	movs	r4, #0
 8002384:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8002388:	4628      	mov	r0, r5
 800238a:	4798      	blx	r3
 800238c:	2000      	movs	r0, #0
 800238e:	e7e0      	b.n	8002352 <_raise_r+0x12>

08002390 <raise>:
 8002390:	4b02      	ldr	r3, [pc, #8]	; (800239c <raise+0xc>)
 8002392:	4601      	mov	r1, r0
 8002394:	6818      	ldr	r0, [r3, #0]
 8002396:	f7ff bfd3 	b.w	8002340 <_raise_r>
 800239a:	bf00      	nop
 800239c:	200000f8 	.word	0x200000f8

080023a0 <_kill_r>:
 80023a0:	b538      	push	{r3, r4, r5, lr}
 80023a2:	4d07      	ldr	r5, [pc, #28]	; (80023c0 <_kill_r+0x20>)
 80023a4:	2300      	movs	r3, #0
 80023a6:	4604      	mov	r4, r0
 80023a8:	4608      	mov	r0, r1
 80023aa:	4611      	mov	r1, r2
 80023ac:	602b      	str	r3, [r5, #0]
 80023ae:	f7fe ffce 	bl	800134e <_kill>
 80023b2:	1c43      	adds	r3, r0, #1
 80023b4:	d102      	bne.n	80023bc <_kill_r+0x1c>
 80023b6:	682b      	ldr	r3, [r5, #0]
 80023b8:	b103      	cbz	r3, 80023bc <_kill_r+0x1c>
 80023ba:	6023      	str	r3, [r4, #0]
 80023bc:	bd38      	pop	{r3, r4, r5, pc}
 80023be:	bf00      	nop
 80023c0:	200004b8 	.word	0x200004b8

080023c4 <_getpid_r>:
 80023c4:	f7fe bfbc 	b.w	8001340 <_getpid>

080023c8 <__swhatbuf_r>:
 80023c8:	b570      	push	{r4, r5, r6, lr}
 80023ca:	460c      	mov	r4, r1
 80023cc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80023d0:	2900      	cmp	r1, #0
 80023d2:	b096      	sub	sp, #88	; 0x58
 80023d4:	4615      	mov	r5, r2
 80023d6:	461e      	mov	r6, r3
 80023d8:	da0d      	bge.n	80023f6 <__swhatbuf_r+0x2e>
 80023da:	89a3      	ldrh	r3, [r4, #12]
 80023dc:	f013 0f80 	tst.w	r3, #128	; 0x80
 80023e0:	f04f 0100 	mov.w	r1, #0
 80023e4:	bf0c      	ite	eq
 80023e6:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 80023ea:	2340      	movne	r3, #64	; 0x40
 80023ec:	2000      	movs	r0, #0
 80023ee:	6031      	str	r1, [r6, #0]
 80023f0:	602b      	str	r3, [r5, #0]
 80023f2:	b016      	add	sp, #88	; 0x58
 80023f4:	bd70      	pop	{r4, r5, r6, pc}
 80023f6:	466a      	mov	r2, sp
 80023f8:	f000 f848 	bl	800248c <_fstat_r>
 80023fc:	2800      	cmp	r0, #0
 80023fe:	dbec      	blt.n	80023da <__swhatbuf_r+0x12>
 8002400:	9901      	ldr	r1, [sp, #4]
 8002402:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 8002406:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 800240a:	4259      	negs	r1, r3
 800240c:	4159      	adcs	r1, r3
 800240e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002412:	e7eb      	b.n	80023ec <__swhatbuf_r+0x24>

08002414 <__smakebuf_r>:
 8002414:	898b      	ldrh	r3, [r1, #12]
 8002416:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8002418:	079d      	lsls	r5, r3, #30
 800241a:	4606      	mov	r6, r0
 800241c:	460c      	mov	r4, r1
 800241e:	d507      	bpl.n	8002430 <__smakebuf_r+0x1c>
 8002420:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8002424:	6023      	str	r3, [r4, #0]
 8002426:	6123      	str	r3, [r4, #16]
 8002428:	2301      	movs	r3, #1
 800242a:	6163      	str	r3, [r4, #20]
 800242c:	b002      	add	sp, #8
 800242e:	bd70      	pop	{r4, r5, r6, pc}
 8002430:	ab01      	add	r3, sp, #4
 8002432:	466a      	mov	r2, sp
 8002434:	f7ff ffc8 	bl	80023c8 <__swhatbuf_r>
 8002438:	9900      	ldr	r1, [sp, #0]
 800243a:	4605      	mov	r5, r0
 800243c:	4630      	mov	r0, r6
 800243e:	f7ff fab9 	bl	80019b4 <_malloc_r>
 8002442:	b948      	cbnz	r0, 8002458 <__smakebuf_r+0x44>
 8002444:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8002448:	059a      	lsls	r2, r3, #22
 800244a:	d4ef      	bmi.n	800242c <__smakebuf_r+0x18>
 800244c:	f023 0303 	bic.w	r3, r3, #3
 8002450:	f043 0302 	orr.w	r3, r3, #2
 8002454:	81a3      	strh	r3, [r4, #12]
 8002456:	e7e3      	b.n	8002420 <__smakebuf_r+0xc>
 8002458:	89a3      	ldrh	r3, [r4, #12]
 800245a:	6020      	str	r0, [r4, #0]
 800245c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002460:	81a3      	strh	r3, [r4, #12]
 8002462:	9b00      	ldr	r3, [sp, #0]
 8002464:	6163      	str	r3, [r4, #20]
 8002466:	9b01      	ldr	r3, [sp, #4]
 8002468:	6120      	str	r0, [r4, #16]
 800246a:	b15b      	cbz	r3, 8002484 <__smakebuf_r+0x70>
 800246c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8002470:	4630      	mov	r0, r6
 8002472:	f000 f81d 	bl	80024b0 <_isatty_r>
 8002476:	b128      	cbz	r0, 8002484 <__smakebuf_r+0x70>
 8002478:	89a3      	ldrh	r3, [r4, #12]
 800247a:	f023 0303 	bic.w	r3, r3, #3
 800247e:	f043 0301 	orr.w	r3, r3, #1
 8002482:	81a3      	strh	r3, [r4, #12]
 8002484:	89a3      	ldrh	r3, [r4, #12]
 8002486:	431d      	orrs	r5, r3
 8002488:	81a5      	strh	r5, [r4, #12]
 800248a:	e7cf      	b.n	800242c <__smakebuf_r+0x18>

0800248c <_fstat_r>:
 800248c:	b538      	push	{r3, r4, r5, lr}
 800248e:	4d07      	ldr	r5, [pc, #28]	; (80024ac <_fstat_r+0x20>)
 8002490:	2300      	movs	r3, #0
 8002492:	4604      	mov	r4, r0
 8002494:	4608      	mov	r0, r1
 8002496:	4611      	mov	r1, r2
 8002498:	602b      	str	r3, [r5, #0]
 800249a:	f7fe ffb6 	bl	800140a <_fstat>
 800249e:	1c43      	adds	r3, r0, #1
 80024a0:	d102      	bne.n	80024a8 <_fstat_r+0x1c>
 80024a2:	682b      	ldr	r3, [r5, #0]
 80024a4:	b103      	cbz	r3, 80024a8 <_fstat_r+0x1c>
 80024a6:	6023      	str	r3, [r4, #0]
 80024a8:	bd38      	pop	{r3, r4, r5, pc}
 80024aa:	bf00      	nop
 80024ac:	200004b8 	.word	0x200004b8

080024b0 <_isatty_r>:
 80024b0:	b538      	push	{r3, r4, r5, lr}
 80024b2:	4d06      	ldr	r5, [pc, #24]	; (80024cc <_isatty_r+0x1c>)
 80024b4:	2300      	movs	r3, #0
 80024b6:	4604      	mov	r4, r0
 80024b8:	4608      	mov	r0, r1
 80024ba:	602b      	str	r3, [r5, #0]
 80024bc:	f7fe ffb4 	bl	8001428 <_isatty>
 80024c0:	1c43      	adds	r3, r0, #1
 80024c2:	d102      	bne.n	80024ca <_isatty_r+0x1a>
 80024c4:	682b      	ldr	r3, [r5, #0]
 80024c6:	b103      	cbz	r3, 80024ca <_isatty_r+0x1a>
 80024c8:	6023      	str	r3, [r4, #0]
 80024ca:	bd38      	pop	{r3, r4, r5, pc}
 80024cc:	200004b8 	.word	0x200004b8

080024d0 <_init>:
 80024d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80024d2:	bf00      	nop
 80024d4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80024d6:	bc08      	pop	{r3}
 80024d8:	469e      	mov	lr, r3
 80024da:	4770      	bx	lr

080024dc <_fini>:
 80024dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80024de:	bf00      	nop
 80024e0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80024e2:	bc08      	pop	{r3}
 80024e4:	469e      	mov	lr, r3
 80024e6:	4770      	bx	lr
